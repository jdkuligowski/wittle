{"version":3,"file":"static/js/685.9d3c5c20.chunk.js","mappings":"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","sources":["components/whiteLabel/advancedSearch/SinglePropertyInsights.js","components/whiteLabel/advancedSearch/TopProperties.js","components/whiteLabel/b2bModals/KYCInput.js","../node_modules/react-select/dist/react-select.esm.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport PropertySummary from '../propertyDetails/componentHighlights/PropertySummary'\nimport SchoolHighlights from '../propertyDetails/componentHighlights/SchoolHighlights'\nimport LifestyleHighlights from '../propertyDetails/componentHighlights/LifestyleHighlights'\nimport TransportHighlights from '../propertyDetails/componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from '../propertyDetails/componentHighlights/NeighbourhoodHighlights'\nimport PropertyDetailSlider from '../propertyDetails/helpers/PropertyDetailSlider'\nimport PrimaryDetails from '../propertyDetails/componentDetails/PrimaryDetails'\nimport SecondaryDetails from '../propertyDetails/componentDetails/SecondaryDetails'\nimport TubeDetails from '../propertyDetails/componentDetails/TubeDetails'\nimport RestaurantDetails from '../propertyDetails/componentDetails/RestaurantDetails'\nimport PubDetails from '../propertyDetails/componentDetails/PubDetails'\nimport SupermarketDetails from '../propertyDetails/componentDetails/SupermarketDetails'\nimport FitnessDetails from '../propertyDetails/componentDetails/FitnessDetails'\nimport EVDetails from '../propertyDetails/componentDetails/EVDetails'\n\n\n\n\n\nconst SinglePropertyInsights = ({ setSingleProperty }) => {\n\n  const [propertyView, setPropertyView] = useState('Overview')\n\n  const [errors, setErrors] = useState()\n\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  const [tableMapView, setTableMapView] = useState('Table')\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants] = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  const [aiSearch, setAiSearch] = useState()\n\n  const [aiReady, setAiReady] = useState(false)\n\n  // start ai seearch\n  const [searchGo, setSearchGo] = useState(false)\n\n  const [secondaryDetail, setSecondaryDetail] = useState('Table')\n  const [primaryDetail, setPrimaryDetail] = useState('Table')\n\n\n  // We want to load the postcode data on first load\n  useEffect(() => {\n    const postcodeData = JSON.parse(localStorage.getItem('listing-postcode'))\n    loadPostcodeData(postcodeData)\n  }, [])\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = async (postcodeValue) => {\n    try {\n      const { data } = await axios.post('/api/postcodes/', { postcode: postcodeValue })\n      console.log('postcode data ->', data)\n      setPostcodes(data)\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n\n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n\n      // handle independent schools\n      if (item.school_type === 'Independent school') {\n        item.within_catchment = 'N/a'\n\n        // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n\n        // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n\n        // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n\n        // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n\n        // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n\n        // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n\n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      } else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n        // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n        // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n        // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n  }\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n\n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n\n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n    // extract the key studios\n    const topThreeStudios = []\n\n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n\n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n\n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n\n    // extract the key studios\n    const topThreeSupermarkets = []\n\n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_brand)) {\n        topThreeSupermarkets.push(supermarket.supermarket_brand)\n        uniqueSupermarkets.add(supermarket.supermarket_brand)\n\n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n\n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        // console.log('ev data ->', data)\n        setEv(data)\n        // Average walking speed is 5km/h. \n        const walkDistanceKm10 = 5 * (10 / 60)\n\n        // filter out restaurants firther than 15 mins walk away\n        const nearbyChargers = data.filter(item => {\n          const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n          const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n          const a =\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2)\n          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n          const distanceKm = R * c\n\n          item.distance_between = distanceKm\n          item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n          return distanceKm <= walkDistanceKm10\n        }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n        setEv1(nearbyChargers)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        // console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n\n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    // console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Load and sort tubes data\n  const loadTrainsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        // console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTrains1(nearbyTrains)\n    // console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n      postcodeData[0].ev.percentile +\n      postcodeData[0].fitness.percentile +\n      (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n      postcodeData[0].restaurants.normal_percentile +\n      postcodeData[0].supermarkets.percentile +\n      postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n  // overview navigation\n  const goToOverview = () => {\n    setPropertyView('Overview')\n    setPrimaryDetail('Table')\n    setSecondaryDetail('Table')\n  }\n\n  return (\n    <>\n      <section className=\"insights-results-wrapper remove-margin\" id='property-search-insights-wrapper'>\n        <section className=\"property-insights-wrapper\">\n          {/* <div className=\"property-insight-nav no-print remove-margin\">\n            <div className=\"property-insight-buttons no-print remove-margin\">\n              <h3 className={`insight-button ${propertyView === 'Overview' ? 'active' : 'inactive'}`} id='left' onClick={() => goToOverview()}>Overview</h3>\n              <h3 className={`insight-button ${propertyView === 'Details' ? 'active' : 'inactive'}`} id='right' onClick={() => setPropertyView('Details')}>Details</h3>\n            </div>\n          </div> */}\n          <div className='return-to-properties'>\n            <h3 onClick={() => setSingleProperty(false)}>&lt;- back to properties</h3>\n          </div>\n          <div className='single-property-navigation'>\n            {/* <h3 className='matching-pill' onClick={() => setPropertyView('Overview')} style={{ color: propertyView === 'Overview' ? 'white' : '#1A276C', backgroundColor: propertyView === 'Overview' ? '#ED6B86' : 'rgba(26, 39, 108, 0.15)' }}>Overview</h3>\n            <h3 className='matching-pill' onClick={() => setPropertyView('Details')} style={{ color: propertyView === 'Details' ? 'white' : '#1A276C', backgroundColor: propertyView === 'Details' ? '#ED6B86' : 'rgba(26, 39, 108, 0.15)' }}>Details</h3> */}\n            <div className=\"section-selectors\">\n              <div className=\"property-insight-buttons no-print remove-margin\">\n\n                <h3 className={`selector-button ${propertyView === 'Overview' ? 'active' : 'inactive'}`} id='left' onClick={() => setPropertyView('Overview')}>Overview</h3>\n                <h3 className={`selector-button ${propertyView === 'Details' ? 'active' : 'inactive'}`} id='right' onClick={() => setPropertyView('Details')}>Details</h3>\n              </div>\n            </div>\n          </div>\n          {propertyView === 'Overview' ?\n            <div className='insight-dropdowns'>\n              <div className='summary-header'>\n                <h3>Property Summary</h3>\n                <hr className='header-line' />\n              </div>\n              <PropertySummary\n                neighbourhoodScore={neighbourhoodScore}\n                postcodeData={postcodeData}\n              />\n              <div className='summary-header' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {schoolSection ?\n                <SchoolHighlights\n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                  setPropertyView={setPropertyView}\n                  setSecondaryDetail={setSecondaryDetail}\n                  setPrimaryDetail={setPrimaryDetail}\n                  setSliderSelection={setSliderSelection}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {lifestyleSection ?\n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {transportSection ?\n                <TransportHighlights\n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                  trains1={trains1}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhoood highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {neighbourhoodSection ?\n                <NeighbourhoodHighlights\n                  postcodeData={postcodeData}\n                />\n                : ''\n              }\n            </div>\n\n            : propertyView === 'Details' ?\n              <>\n\n                <div className='property-details-wrapper'>\n                  <PropertyDetailSlider\n                    sliderSelection={sliderSelection}\n                    setSliderSelection={setSliderSelection}\n                    setSecondaryDetail={setSecondaryDetail}\n                    setPrimaryDetail={setPrimaryDetail}\n                  />\n                  {secondaryDetail === 'School' ?\n                    <h3 className='go-back' onClick={() => setSecondaryDetail('Table')}>&lt;- Back to secondary school long list</h3>\n                    :\n                    primaryDetail === 'School' ?\n                      <h3 className='go-back' onClick={() => setPrimaryDetail('Table')}>&lt;- Back to primary school long list</h3>\n                      :\n                      <div className='detail-table-title'>\n                        <h3>{sliderSelection} list</h3>\n                        <hr className='table-title-line' />\n                        <input placeholder='Explore the data'></input>\n                        <div className={`icon-box ${tableMapView === 'Table' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Table')}>\n                          <div className='icon' id='table'></div>\n                        </div>\n                        <div className={`icon-box ${tableMapView === 'Map' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Map')}>\n                          <div className='icon' id='map'></div>\n                        </div>\n\n                      </div>\n                  }\n                  <div className='insight-tables'>\n                    {sliderSelection === 'Primary schools' ?\n                      <PrimaryDetails\n                        primaryData1={primaryData1}\n                        setPrimaryData1={setPrimaryData1}\n                        postcodeData={postcodeData}\n                        tableMapView={tableMapView}\n                        listType={'short list'}\n                        primaryDetail={primaryDetail}\n                        setPrimaryDetail={setPrimaryDetail}\n                        setSliderSelection={setSliderSelection}\n                        setPropertyView={setPropertyView}\n                      />\n\n                      : sliderSelection === 'Secondary schools' ?\n\n                        <SecondaryDetails\n                          secondaryData1={secondaryData1}\n                          setSecondaryData1={setSecondaryData1}\n                          postcodeData={postcodeData}\n                          tableMapView={tableMapView}\n                          listType={'short list'}\n                          secondaryDetail={secondaryDetail}\n                          setSecondaryDetail={setSecondaryDetail}\n                          setSliderSelection={setSliderSelection}\n                          setPropertyView={setPropertyView}\n                        />\n\n                        : sliderSelection === 'Tubes' ?\n                          <TubeDetails\n                            tubes1={tubes1}\n                            setTubes1={setTubes1}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                            tableMapView={tableMapView}\n                          />\n\n                          : sliderSelection === 'Restaurants' ?\n                            <RestaurantDetails\n                              restaurants1={restaurants1}\n                              setRestaurants1={setRestaurants1}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                              tableMapView={tableMapView}\n                            />\n\n                            : sliderSelection === 'Pubs' ?\n                              <PubDetails\n                                pubs1={pubs1}\n                                setPubs1={setPubs1}\n                                listType={'short list'}\n                                postcodeData={postcodeData}\n                                tableMapView={tableMapView}\n\n                              />\n\n                              : sliderSelection === 'Supermarkets' ?\n                                <SupermarketDetails\n                                  supermarkets1={supermarkets1}\n                                  setSupermarkets1={setSupermarkets1}\n                                  listType={'short list'}\n                                  postcodeData={postcodeData}\n                                  tableMapView={tableMapView}\n\n                                />\n\n                                : sliderSelection === 'Fitness' ?\n                                  <FitnessDetails\n                                    gyms1={gyms1}\n                                    setGyms1={setGyms1}\n                                    listType={'short list'}\n                                    postcodeData={postcodeData}\n                                    tableMapView={tableMapView}\n\n                                  />\n\n                                  : sliderSelection === 'EVs' ?\n                                    <EVDetails\n                                      ev1={ev1}\n                                      setEv1={setEv1}\n                                      listType={'short list'}\n                                      postcodeData={postcodeData}\n                                      tableMapView={tableMapView}\n\n                                    />\n                                    :\n                                    ''}\n                  </div>\n\n\n\n                </div>\n\n\n\n              </>\n\n              : ''}\n        </section>\n\n      </section>\n\n    </>\n\n  )\n}\n\n\nexport default SinglePropertyInsights","import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Loading from '../../helpers/Loading'\nimport KYCInput from '../b2bModals/KYCInput'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport { set } from 'react-ga'\nimport SinglePropertyInsights from './SinglePropertyInsights'\n\nconst TopProperties = ({ setListingSelection, fetchData, agentFavourites, loadUserData, addAgentFavourite, deleteAgentFavourite,\n  propertyFilters, setPropertyFilters, addAgentSearch, properties, setProperties, loadProperties, loading,\n  propertyInputShow, handlePropertyInputShow, handlePropertyInputClose, toggleStatus, loadPrimaryData, primarySearchDetails, setPrimarySearchDetails,\n  selectedPrimary, setSelectedPrimary, singleProperty, setSingleProperty }) => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set view for the table\n  const [propertyViewFormat, setPropertyViewFormat] = useState('Table')\n\n  const [selectedProperties, setSelectedProperties] = useState(null)\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // state for detail view on property\n  const [propertyDetails, setPropertyDetails] = useState('Details')\n\n  const imageRefs = useRef(new Map())\n\n\n\n\n  // creat\n  useEffect(() => {\n    const filters = JSON.parse(localStorage.getItem('top-property-filters'))\n    const propertyData = JSON.parse(localStorage.getItem('top-properties'))\n    if (filters && propertyData) {\n      setPropertyFilters(filters)\n      setProperties(propertyData)\n    }\n  }, [])\n\n\n\n  const handleVisitUrl = (url) => {\n    // Create a new anchor element\n    const link = document.createElement('a')\n\n    // Set the URL\n    link.href = url\n\n    // Set the target\n    link.target = '_blank'\n\n    // Set rel to noreferrer to prevent sending the referrer\n    link.rel = 'noreferrer'\n\n    // Set window features\n    link.windowFeatures = 'width=1200,height=800,resizable=yes,scrollbars=yes,status=yes'\n\n    // Append the link to the body\n    document.body.appendChild(link)\n\n    // Simulate a click on the link\n    link.click()\n\n    // Remove the link from the body\n    document.body.removeChild(link)\n  }\n\n  // function to move to the listings\n  const goToListing = (item) => {\n    console.log('postcode ->', item.property_data.postcode)\n    window.localStorage.setItem('listing-postcode', JSON.stringify(item.property_data.postcode))\n    setSingleProperty(true)\n  }\n\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 10.5,\n  })\n\n\n  // set current page when you click icon\n  const handlePropertyClick = (property) => {\n    console.log('selectd property ->', property)\n    setSelectedProperties(property)\n  }\n\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  const mapNumberToWord = (number) => {\n    // const value = number * 10s\n    if (number > 0.9) return 'Outstanding'\n    if (number > 0.8) return 'Excellent'\n    if (number > 0.7) return 'Very good'\n    if (number > 0.6) return 'Good'\n    if (number > 0.5) return 'Quite good'\n    if (number > 0.4) return 'Average'\n    if (number > 0.3) return 'Below average'\n    if (number > 0.2) return 'Bad'\n    if (number > 0.1) return 'Poor'\n    return 'Terrible'\n  }\n\n\n\n\n  return (\n\n    <>\n      <section className={`top-properties ${singleProperty ? 'single' : ''}`}>\n\n        <section className='top-properties-filters'>\n          <div className='filter-block mobile'>\n            <button onClick={handlePropertyInputShow}>Edit search</button>\n          </div>\n\n        </section>\n\n        {!loading && !singleProperty ?\n          <section className='top-property-results'>\n            <div className='top-property-title'>\n              <h3>\n                {properties ?\n                  `${properties.length} matching properties${properties[0] && properties[0].school ? ` near to ${properties[0].school.school_name}` : ''}`\n                  : ''\n                }\n              </h3>\n              <div className='view-selectors'>\n                <button className='edit-search' onClick={handlePropertyInputShow}>Edit search</button>\n                <div className={`icon-box ${propertyViewFormat === 'Table' ? 'active' : 'inactive'}`} onClick={() => setPropertyViewFormat('Table')}>\n                  <div className='icon' id='table'></div>\n                </div>\n                <div className={`icon-box ${propertyViewFormat === 'Map' ? 'active' : 'inactive'}`} onClick={() => setPropertyViewFormat('Map')}>\n                  <div className='icon' id='map'></div>\n                </div>\n                <div className={`icon-box ${propertyViewFormat === 'Grid' ? 'active' : 'inactive'}`} onClick={() => setPropertyViewFormat('Grid')}>\n                  <div className='icon' id='grid'></div>\n                </div>\n              </div>\n            </div>\n\n\n            {propertyViewFormat === 'Table' && properties ?\n              <div className='property-table-view'>\n                <div className='top-property-table'>\n                  <div className='table-headers'>\n                    <div id='column1' className='column'>\n                      <h5>#</h5>\n                    </div>\n                    <div id='column2' className='column' >\n                      <h5>Address</h5>\n                    </div>\n                    <div id='column3' className='column'>\n                      <h5>Postcode</h5>\n                      {/* <h5>⬇️</h5> */}\n                    </div>\n                    <div id='column4' className='column'>\n                      <h5>Area</h5>\n                    </div>\n                    <div id='column5' className='column'>\n                      <h5>Added</h5>\n                    </div>\n                    <div id='column6' className='column'>\n                      <h5>Price</h5>\n                      {/* <h5>⬇️</h5> */}\n                    </div>\n                    <div id='column7' className='column'>\n                      <h5>Bedrooms</h5>\n                    </div>\n                    <div id='column8' className='column'>\n                      <h5>Agent</h5>\n                    </div>\n                    {propertyFilters && propertyFilters.search_type === 'Wittle' ?\n                      <div id='column9' className='column'>\n                        <h5>Score</h5>\n                      </div>\n                      :\n                      <div id='column9' className='column'>\n                        <h5>Distance (m)</h5>\n                      </div>\n                    }\n                  </div>\n                  <hr className='property-divider' />\n                  <div className='table-detail'>\n                    {properties ? properties.map((item, index) => {\n                      return (\n                        <>\n                          <div className='table-content'>\n                            <div className='column' id='column1' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{index + 1}</h5>\n                            </div>\n                            <div className='column' id='column2' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{item.property_data.displayAddress}</h5>\n                            </div>\n                            <div className='column' id='column3' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{item.property_data.postcode}</h5>\n                            </div>\n                            <div className='column' id='column4' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{item.persona_data_list && !item.school ? item.persona_data_list[0].district : item.persona_data_list && item.school ? item.persona_data_list.district : ''}</h5>\n                            </div>\n                            <div className='column' id='column5' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{item.property_data.added_revised === null ? `Reduced ${item.property_data.reduced_revised}` : item.property_data.added_revised}</h5>\n                            </div>\n                            <div className='column' id='column6' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{item.property_data.price}</h5>\n                            </div>\n                            <div className='column' id='column7' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{item.property_data.bedrooms}</h5>\n                            </div>\n                            <div className='column' id='column8' onClick={() => handleVisitUrl(item.property_data.url)}>\n                              <h5>{item.property_data.agent}</h5>\n                            </div>\n                            {propertyFilters && propertyFilters.search_type === 'Wittle' ?\n                              <div className='column' id='column9' onClick={() => handleVisitUrl(item.property_data.url)}>\n                                <h5>{item.overall_lifestyle_score ? (item.overall_lifestyle_score / 10).toFixed(2) : ''}</h5>\n                              </div>\n                              :\n                              <div className='column' id='column9' onClick={() => handleVisitUrl(item.property_data.url)}>\n                                <h5>{item.school && item.distance_meters ? (item.distance_meters).toFixed(0) : ''}</h5>\n                              </div>}\n                            <div id='column10' className='column'>\n                              <button onClick={() => goToListing(item)}>Go</button>\n                              {agentFavourites && agentFavourites.some(fav => fav.rightmove_id === item.property_data.rightmove_id) ? <div className='favourite-heart' id='filled-heart' onClick={() => deleteAgentFavourite(item)}></div> : <div className='favourite-heart' id='empty-heart' onClick={() => addAgentFavourite(item)} ></div>}\n\n\n                            </div>\n                          </div>\n                          <hr className='property-divider' />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n                  </div>\n\n                </div>\n                {properties ?\n                  <ReactPaginate\n                    pageCount={Math.ceil(properties.length / 50)}\n                    onPageChange={handlePageClick}\n                    containerClassName={'pagination'}\n                    activeClassName={'active'}\n                    previousLabel={'<'}\n                    nextLabel={'>'}\n                    pageRangeDisplayed={0}\n                    breakLabel={'...'}\n                  />\n                  : ''}\n\n              </div>\n              : propertyViewFormat === 'Map' && properties ?\n                <div className='property-map-view'>\n                  <div className='map-block'>\n\n                    <div className='grid-list'>\n                      {properties ? properties.map((item, index) => {\n                        return (\n                          <>\n                            <div className='property-content'>\n                              <div className='grid-left'>\n                                <img className='property-image' alt='property-image' loading='lazy' onClick={() => handleVisitUrl(item.property_data.url)} src={item.property_data.images} />\n                              </div>\n                              <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                                <h5 className='title' onClick={() => handleVisitUrl(item.property_data.url)}>{index + 1}. {item.property_data.displayAddress}</h5>\n                                <h5 className='sub-title'>Bedrooms: {item.property_data.bedrooms}</h5>\n                                <h5 className='sub-title'>Price: {item.property_data.price}</h5>\n                                {propertyFilters && propertyFilters.search_type === 'Wittle' ?\n                                  <h5 className='sub-title'>Score: {item.overall_lifestyle_score ? (item.overall_lifestyle_score / 10).toFixed(2) : ''}</h5>\n                                  :\n                                  <h5 className='sub-title'>Distance: {item && item.distance_meters ? (item.distance_meters).toFixed(0) : ''}m</h5>\n                                }\n                                {agentFavourites && agentFavourites.some(fav => fav.rightmove_id === item.property_data.rightmove_id) ? <div className='favourite-heart' id='filled-heart' onClick={() => deleteAgentFavourite(item)}></div> : <div className='favourite-heart' id='empty-heart' onClick={() => addAgentFavourite(item)} ></div>}\n\n                              </div>\n                            </div>\n                            <hr className=\"dividing-line\" />\n                          </>\n                        )\n                      }).slice(startIndex, endIndex) : ''}\n                    </div>\n\n                    <div className=\"map-section\">\n                      <ReactMapGL\n                        {...viewport}\n                        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                        mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                        onViewportChange={viewport => {\n                          setViewport(viewport)\n                        }}\n                        center={viewport}\n                        onMove={evt => setViewport(evt.viewport)}\n                        className=\"profile-map\"\n                      >\n                        {properties &&\n                          properties.map((item, index) => (\n                            <Marker\n                              key={index}\n                              id={item.id}\n                              longitude={item.property_data.longitude}\n                              latitude={item.property_data.latitude}\n                              onClick={() => handlePropertyClick(item)}\n                            >\n                              <div className=\"poi-background\">{index + 1}</div>\n                            </Marker>\n                          )).slice(startIndex, endIndex)}\n\n                        {selectedProperties ?\n                          <Popup\n                            longitude={selectedProperties.property_data.longitude}\n                            latitude={selectedProperties.property_data.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedProperties(null)}\n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>{selectedProperties.property_data.displayAddress}</h5>\n                              </div>\n                            </div>\n                          </Popup>\n                          : ''\n                        }\n                      </ReactMapGL>\n                    </div>\n                  </div>\n                  {properties ?\n                    <ReactPaginate\n                      pageCount={Math.ceil(properties.length / 50)}\n                      onPageChange={handlePageClick}\n                      containerClassName={'pagination'}\n                      activeClassName={'active'}\n                      previousLabel={'<'}\n                      nextLabel={'>'}\n                      pageRangeDisplayed={0}\n                      breakLabel={'...'}\n                    />\n                    : ''}\n                </div>\n\n                : propertyViewFormat === 'Grid' && properties ?\n                  <div className='property-grid-view'>\n                    <div className='property-grid-items'>\n                      {properties ? properties.map((item, index) => {\n                        return (\n                          <>\n                            <div className='property-item'>\n                              <div className='property-item-left'>\n                                <img className='property-item-image' alt='property-image' loading='lazy' onClick={() => handleVisitUrl(item.property_data.url)} src={item.property_data.images} />\n                                <div className='property-core-info'>\n                                  {propertyFilters.channel === 'Sales' ?\n                                    <h3><NumericFormat value={item.property_data.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> </h3> :\n                                    <h3><NumericFormat value={item.property_data.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> pcm</h3>\n                                  }\n                                  {propertyFilters && propertyFilters.search_type === 'Wittle' && item.overall_lifestyle_score ?\n                                    <h3 className='match-score'>🔥 {item.overall_lifestyle_score ? (item.overall_lifestyle_score * 10).toFixed(0) : ''}% match</h3>\n                                    : <h3 className='match-score'>{item.school && item.distance_meters ? (item.distance_meters).toFixed(0) : ''}m away</h3>\n                                  }\n                                  {agentFavourites && agentFavourites.some(fav => fav.rightmove_id === item.property_data.rightmove_id) ? <div className='favourite-heart' id='filled-heart' onClick={() => deleteAgentFavourite(item)}></div> : <div className='favourite-heart' id='empty-heart' onClick={() => addAgentFavourite(item)} ></div>}\n                                </div>\n                              </div>\n                              <div className='property-item-right'>\n                                <div className='detail-selections'>\n                                  <div className='key-selectors'>\n                                    <h3 className='detail-selector' style={{ fontWeight: propertyDetails === 'Details' ? '700' : '500' }} onClick={() => setPropertyDetails('Details')}>Details</h3>\n                                    <h3 className='detail-selector' style={{ fontWeight: propertyDetails === 'Insights' ? '700' : '500' }} onClick={() => setPropertyDetails('Insights')}>Insights</h3>\n                                    <h3 className='detail-selector' style={{ fontWeight: propertyDetails === 'Floorplan' ? '700' : '500' }} onClick={() => setPropertyDetails('Floorplan')}>Floorplan</h3>\n                                    <button onClick={() => goToListing(item)}>Explore</button>\n\n\n                                  </div>\n                                  <div className='action'>\n                                  </div>\n                                </div>\n                                {propertyDetails === 'Details' ?\n\n                                  <div className='property-body'>\n                                    <h2 className='property-title'>{item.property_data.displayAddress}, {item.persona_data_list && !item.school ? item.persona_data_list[0].district : item.persona_data_list && !item.school ? item.persona_data_list.district : ''}</h2>\n                                    <h3 className='added-details'>{item.property_data.added_revised ? `Added on ${item.property_data.added_revised}` : `Reduced on ${item.property_data.reduced_revised}`}</h3>\n                                    <div className='key-elements'>\n                                      <div className='property-element-item'>\n                                        <div className='element-icon' id='bed'></div>\n                                        <h3>{item.property_data.bedrooms} bedrooms</h3>\n                                      </div>\n                                      <div className='property-element-item'>\n                                        <div className='element-icon' id='bath'></div>\n                                        <h3>{item.property_data.bathrooms} bathrooms</h3>\n                                      </div>\n                                      <div className='property-element-item'>\n                                        <div className='element-icon' id='size'></div>\n                                        <h3>{item.property_data.size} sq. ft</h3>\n                                      </div>\n                                      <div className='property-element-item'>\n                                        <div className='element-icon' id='type'></div>\n                                        <h3>{item.property_data.propertyType}</h3>\n                                      </div>\n                                      <div className='property-element-item'>\n                                        <div className='element-icon' id='size'></div>\n                                        <h3>{item.property_data.price_per_sqft}£/ sq. ft</h3>\n                                      </div>\n                                    </div>\n                                    <div className='property-features'>\n                                      <h3 className='features-title'>Features</h3>\n                                      <div className='feature-list'>\n                                        {item.property_data && item.property_data.features ? item.property_data.features.split(', ').map((feature, index) => (\n                                          <li key={index} className='feature-item'>{feature}</li>\n                                        )) : ''}\n                                      </div>\n                                    </div>\n                                  </div>\n                                  : propertyDetails === 'Insights' ?\n                                    <div className='property-body'>\n                                      {item.persona_data_list && !item.school ?\n                                        <div className='insights-body'>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='primaries'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].primary_percentile)} for primary schools</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='secondaries'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].secondary_percentile)} for secondary schools</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='parks'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].park_area_percentile)} for access to parks</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='gyms'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].gym_percentile)} for access to gyms</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='pubs'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].pub_percentile)} for access to pubs</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='restaurants'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].restaurant_percentile)} for restaurants</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='crime'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].crime_percentile)} for crime rates</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='tubes'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].tube_percentile)} for tube access</h3>\n                                          </div>\n                                          <div className='insight-row'>\n                                            <div className='insight-icon' id='evs'></div>\n                                            <h3 className='insight'>{mapNumberToWord(item.persona_data_list[0].ev_percentile)} for EV access</h3>\n                                          </div>\n                                        </div>\n                                        :\n                                        item.persona_data_list && item.school ?\n                                          <div className='insights-body'>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='primaries'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.primary_percentile)} for primary schools</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='secondaries'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.secondary_percentile)} for secondary schools</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='parks'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.park_area_percentile)} for access to parks</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='gyms'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.gym_percentile)} for access to gyms</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='pubs'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.pub_percentile)} for access to pubs</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='restaurants'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.restaurant_percentile)} for restaurants</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='crime'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.crime_percentile)} for crime rates</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='tubes'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.tube_percentile)} for tube access</h3>\n                                            </div>\n                                            <div className='insight-row'>\n                                              <div className='insight-icon' id='evs'></div>\n                                              <h3 className='insight'>{mapNumberToWord(item.persona_data_list.ev_percentile)} for EV access</h3>\n                                            </div>\n                                          </div>\n                                          :\n                                          <div className='insight-row'>\n                                            <div className='insight-icon'>😕</div>\n                                            <h3 className='insight'>No data to show</h3>\n                                          </div>\n                                      }\n                                    </div>\n                                    : propertyDetails === 'Floorplan' ?\n                                      <div className='property-body'>\n                                        <div className='floorplan-body' onClick={() => handleVisitUrl(item.property_data.floorplan_url)} style={{ backgroundImage: `url(${item.property_data.floorplan_url})` }}></div>\n                                      </div>\n                                      : ''}\n\n\n\n                              </div>\n                            </div>\n                          </>\n                        )\n                      }).slice(startIndex, endIndex)\n\n                        : ''}\n\n                    </div>\n                    {properties ?\n                      <ReactPaginate\n                        pageCount={Math.ceil(properties.length / 50)}\n                        onPageChange={handlePageClick}\n                        containerClassName={'pagination'}\n                        activeClassName={'active'}\n                        previousLabel={'<'}\n                        nextLabel={'>'}\n                        pageRangeDisplayed={0}\n                        breakLabel={'...'}\n                      />\n                      : ''}\n                  </div>\n\n                  : !properties ?\n                    <div className='no-properties'>\n                      <h1>🔎 Start a search to see some properties</h1>\n                      <button className='edit-search' onClick={handlePropertyInputShow}>Start search</button>\n                    </div>\n\n                    : ''}\n          </section>\n          : !loading && singleProperty ?\n            <SinglePropertyInsights\n              setSingleProperty={setSingleProperty}\n            />\n\n            : loading ?\n              <div className='property-table-loading'>\n                <Loading />\n              </div>\n              : ''}\n      </section>\n      <KYCInput\n        propertyInputShow={propertyInputShow}\n        handlePropertyInputClose={handlePropertyInputClose}\n        propertyFilters={propertyFilters}\n        setPropertyFilters={setPropertyFilters}\n        loadProperties={loadProperties}\n        toggleStatus={toggleStatus}\n        loadPrimaryData={loadPrimaryData}\n        primarySearchDetails={primarySearchDetails}\n        setPrimarySearchDetails={setPrimarySearchDetails}\n        selectedPrimary={selectedPrimary}\n        setSelectedPrimary={setSelectedPrimary}\n      />\n\n\n    </>\n\n  )\n}\n\nexport default TopProperties","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Loading from '../../helpers/Loading'\nimport { Modal } from 'react-bootstrap'\nimport ReactSwitch from 'react-switch'\nimport Select from 'react-select'\n\n\nconst KYCInput = ({ propertyInputShow, handlePropertyInputClose, propertyFilters, setPropertyFilters, adjustedFilters, loadProperties, toggleStatus, previousLocation, editAgentSearch,\n  primarySearchDetails, setPrimarySearchDetails, selectedPrimary, setSelectedPrimary }) => {\n\n  const formatSize = (size) => {\n    if (size === null) return ''\n\n    const num = parseFloat(size)\n    return num % 1 === 0 ? num.toString() : num.toFixed(1)\n  }\n\n\n  // sales prices\n  const salesPrices = [\n    '200000', '300000', '400000', '500000', '600000', '700000', '800000', '900000', '1000000', '1250000', '1500000', '1750000', '2000000', '2250000', '2500000',\n    '2750000', '3000000', '3500000', '4000000', '5000000', '7500000', '10000000', '12500000', '15000000', '20000000', '30000000', '40000000', '50000000', '2'\n  ]\n\n  // rental prices\n  const rentalPrices = [\n    '500', '600', '700', '800', '900', '1000', '1100', '1200', '1300', '1400', '1500', '1600', '1700', '1800', '1900', '2000', '2250', '2500', '2750', '3000', '3250', '3500',\n    '4000', '4500', '5000', '5500', '6000', '7000', '8000', '9000', '10000', '12500', '15000', '20000', '25000', '30000', '40000', '50000', '60000'\n  ]\n\n  // borough list\n  const boroughs = ['Barking and Dagenham', 'Barnet', 'Bexley', 'Brent', 'Camden', 'Croydon', 'Ealing', 'Enfield', 'Greenwich', 'Havering', 'Kensington and Chelsea',\n    'Hertfordshire', 'Hillingdon', 'Hounslow', 'Islington', 'Lambeth', 'Lewisham', 'Merton', 'Southwark', 'Sutton', 'Waltham Forest', 'Westminster',\n    'Hackney', 'City of London', 'Hammersmith and Fulham', 'Wandsworth', 'Tower Hamlets', 'Bromley', 'Haringey', 'Kingston upon Thames', 'Newham', 'Redbridge', 'Richmond upon Thames']\n\n  // property type list\n  const propertyTypeList = ['Flat', 'Apartment', 'Terraced', 'Semi-Detached', 'Detached', 'House', 'End of Terrace', 'Maisonette', 'Studio', 'Retirement Property', 'Ground Flat',\n    'Penthouse', 'Bungalow', 'Town House', 'Detached Bungalow', 'Duplex']\n\n\n  const schoolChange = selectedOption => {\n    setSelectedPrimary(selectedOption)\n    console.log('selected primary for search -> ', selectedOption)\n    // Additional actions on select, e.g., form updates, API calls, etc.\n  }\n\n  const schoolOptions = primarySearchDetails && Array.isArray(primarySearchDetails)\n    ? primarySearchDetails.map(school => ({\n      label: school.school_name,\n      value: school,\n    }))\n    : []\n\n\n\n  return (\n\n    <>\n      <Modal show={propertyInputShow} onHide={handlePropertyInputClose} backdrop='static' className='KYC-input-modal'>\n        <Modal.Body>\n          {propertyFilters ?\n\n            <section className='overall-body'>\n              <section className='input-header'>\n                <div className='input-title'>\n                  <h1>Find a property based on what matters to you</h1>\n                  <h1 className='close-modal' onClick={handlePropertyInputClose}>X</h1>\n                </div>\n              </section>\n              <section className='input-main'>\n                <div className='input-section'>\n                  <h2 className='section-sub-title'>Search details</h2>\n                  <div className='selection-block-single'>\n                    <h3>Channel</h3>\n                    <select className='dropdown' value={propertyFilters.channel || 'Sales'} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, channel: e.target.value }))}>\n                      <option>Sales</option>\n                      <option>Lettings</option>\n                    </select>\n                  </div>\n                  <div className='selection-block-single'>\n                    <h3>Area</h3>\n                    <select className='dropdown' value={propertyFilters.area || ''} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, area: e.target.value }))}>\n                      <option value=''>All</option>\n                      {boroughs.map((borough, index) => (\n                        <option key={index} value={borough}>{borough}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                </div>\n\n                <div className='input-section'>\n                  <h2 className='section-sub-title'>Property details</h2>\n                  <div className='selection-block-double'>\n                    <h3>Price</h3>\n                    {propertyFilters.channel === 'Lettings' ?\n                      <div className='double-dropdowns'>\n                        <select\n                          className='dropdown'\n                          value={propertyFilters.rental_price_min || ''}\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_min: e.target.value }))}\n                        >\n                          <option value={0}>No min</option>\n                          {rentalPrices.map((price, index) => (\n                            <option key={index} value={price}>\n                              <NumericFormat\n                                value={price}\n                                displayType={'text'}\n                                thousandSeparator={true}\n                                prefix={'£'}\n                              />\n                            </option>\n                          ))}\n                        </select>\n                        <select\n                          className='dropdown'\n                          value={propertyFilters.rental_price_max || ''}\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_max: e.target.value }))}\n                        >\n                          <option value={10000000}>No max</option>\n                          {rentalPrices.map((price, index) => (\n                            <option key={index} value={price}>\n                              <NumericFormat\n                                value={price}\n                                displayType={'text'}\n                                thousandSeparator={true}\n                                prefix={'£'}\n                              />\n                            </option>\n                          ))}\n                        </select>\n\n                      </div>\n                      : propertyFilters.channel === 'Sales' ?\n                        <div className='double-dropdowns'>\n                          <select\n                            className='dropdown'\n                            value={propertyFilters.rental_price_min || ''}\n                            onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_min: e.target.value }))}\n                          >\n                            <option value={0}>No min</option>\n                            {salesPrices.map((price, index) => (\n                              <option key={index} value={price}>\n                                <NumericFormat\n                                  value={price}\n                                  displayType={'text'}\n                                  thousandSeparator={true}\n                                  prefix={'£'}\n                                />\n                              </option>\n                            ))}\n                          </select>\n                          <select\n                            className='dropdown'\n                            value={propertyFilters.rental_price_max || ''}\n                            onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_max: e.target.value }))}\n                          >\n                            <option value={1000000000}>No max</option>\n                            {salesPrices.map((price, index) => (\n                              <option key={index} value={price}>\n                                <NumericFormat\n                                  value={price}\n                                  displayType={'text'}\n                                  thousandSeparator={true}\n                                  prefix={'£'}\n                                />\n                              </option>\n                            ))}\n                          </select>\n\n                        </div>\n                        : ''}\n                  </div>\n                  <div className='selection-block-double'>\n                    <h3>Bedrooms</h3>\n                    <div className='double-dropdowns'>\n                      <select\n                        className='dropdown'\n                        value={propertyFilters.bedrooms_min || null}\n                        onChange={(e) => setPropertyFilters(prevData => ({\n                          ...prevData,\n                          bedrooms_min: e.target.value ? parseInt(e.target.value, 10) : null,\n                        }))}\n                      >\n                        <option value={null}>No min</option>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option>\n                      </select>\n                      <select\n                        className='dropdown'\n                        value={propertyFilters.bedrooms_max || null}\n                        onChange={(e) => setPropertyFilters(prevData => ({\n                          ...prevData,\n                          bedrooms_max: e.target.value ? parseInt(e.target.value, 10) : null,\n                        }))}\n                      >\n                        <option value={null}>No max</option>\n                        <option value=\"1\">1</option>\n                        <option value=\"2\">2</option>\n                        <option value=\"3\">3</option>\n                        <option value=\"4\">4</option>\n                        <option value=\"5\">5</option>\n                        <option value=\"6\">6</option>\n                        <option value=\"7\">7</option>\n                      </select>\n                    </div>\n                  </div>\n                  <div className='selection-block-single'>\n                    <h3>Property type</h3>\n                    <select className='dropdown' value={propertyFilters.propertyType || ''} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, propertyType: e.target.value }))}>\n                      <option value=''>All</option>\n                      {propertyTypeList.map((property, index) => (\n                        <option key={index} value={property}>{property}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className='selection-block-single features'>\n                    <h3>Features</h3>\n                    <div className='feature-list'>\n                      <div className='select-box'>\n                        <input type=\"checkbox\" id=\"myCheckbox\" name=\"myCheckbox\" checked={propertyFilters.garden} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, garden: e.target.checked }))} />\n                        <label htmlFor=\"myCheckbox\">Garden</label>\n                      </div>\n                      <div className='select-box'>\n                        <input type=\"checkbox\" id=\"myCheckbox\" name=\"myCheckbox\" checked={propertyFilters.stpp} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, stpp: e.target.checked }))} />\n                        <label htmlFor=\"myCheckbox\">STPP</label>\n                      </div>\n                      <div className='select-box'>\n                        <input type=\"checkbox\" id=\"myCheckbox\" name=\"myCheckbox\" checked={propertyFilters.granted} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, granted: e.target.checked }))} />\n                        <label htmlFor=\"myCheckbox\">Planning permission granted</label>\n                      </div>\n                    </div>\n\n                  </div>\n                  <div className='selection-block-single'>\n                    <h3>Size</h3>\n                    <input placeholder='Input min size' className='dropdown' value={formatSize(propertyFilters.size)}\n                      onChange={(e) => {\n                        const value = e.target.value\n                        setPropertyFilters(prevData => ({\n                          ...prevData,\n                          size: value ? parseFloat(value) : null,\n                        }))\n                      }}></input>\n                  </div>\n                  <div className='selection-block-single'>\n                    <h3>Price per sq.ft</h3>\n                    <input placeholder='Input min size' className='dropdown' value={(propertyFilters.price_per_sqft ? propertyFilters.price_per_sqft : null)}\n                      onChange={(e) => {\n                        const value = e.target.value\n                        setPropertyFilters(prevData => ({\n                          ...prevData,\n                          price_per_sqft: value ? parseFloat(value) : null,\n                        }))\n                      }}></input>\n                  </div>\n                </div>\n                <div className='input-section'>\n                  <h2 className='section-sub-title'>Advanced search type</h2>\n                  <p className='explanation'>Choose how you want to tailor your search</p>\n                  <div className='section-search-buttons'>\n                    <button className='selector' value='Wittle' onClick={(e) => setPropertyFilters(prevData => ({ ...prevData, search_type: e.target.value }))}>Wittle</button>\n                    <button className='selector' value='Amenity' onClick={(e) => setPropertyFilters(prevData => ({ ...prevData, search_type: e.target.value }))}>Amenity</button>\n                  </div>\n                </div>\n                {propertyFilters.search_type === 'Wittle' ?\n                  <div className='input-section'>\n                    <h2 className='section-sub-title'>Lifestyle details</h2>\n                    <p className='explanation'>Select what you want to include as part of your search and how much they matter</p>\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Primary schools</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.primaries === true}\n                        onChange={() => toggleStatus('primaries')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.primaries === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, primaries_score: e.target.value }))}\n                          name={propertyFilters.primaries_score}\n                          className='slider'\n                          defaultValue={propertyFilters.primaries_score ? propertyFilters.primaries_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.primaries_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Secondary schools</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.secondaries === true}\n                        onChange={() => toggleStatus('secondaries')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.secondaries === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, secondaries_score: e.target.value }))}\n                          name={propertyFilters.secondaries_score}\n                          className='slider'\n                          defaultValue={propertyFilters.secondaries_score ? propertyFilters.secondaries_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.secondaries_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Parks</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.parks === true}\n                        onChange={() => toggleStatus('parks')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.parks === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, parks_score: e.target.value }))}\n                          name={propertyFilters.parks_score}\n                          className='slider'\n                          defaultValue={propertyFilters.parks_score ? propertyFilters.parks_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.parks_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Playgrounds</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.playgrounds === true}\n                        onChange={() => toggleStatus('playgrounds')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.playgrounds === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, playgrounds_score: e.target.value }))}\n                          name={propertyFilters.playgrounds_score}\n                          className='slider'\n                          defaultValue={propertyFilters.playgrounds_score ? propertyFilters.playgrounds_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.playgrounds_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Gyms</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.gyms === true}\n                        onChange={() => toggleStatus('gyms')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.gyms === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, gyms_score: e.target.value }))}\n                          name={propertyFilters.gyms_score}\n                          className='slider'\n                          defaultValue={propertyFilters.gyms_score ? propertyFilters.gyms_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.gyms_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Restaurants</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.restaurants === true}\n                        onChange={() => toggleStatus('restaurants')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.restaurants === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, restaurants_score: e.target.value }))}\n                          name={propertyFilters.restaurants_score}\n                          className='slider'\n                          defaultValue={propertyFilters.restaurants_score ? propertyFilters.restaurants_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.restaurants_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Pubs</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.pubs === true}\n                        onChange={() => toggleStatus('pubs')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.pubs === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, pubs_score: e.target.value }))}\n                          name={propertyFilters.pubs_score}\n                          className='slider'\n                          defaultValue={propertyFilters.pubs_score ? propertyFilters.pubs_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.pubs_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Tubes</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.tubes === true}\n                        onChange={() => toggleStatus('tubes')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.tubes === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, tubes_score: e.target.value }))}\n                          name={propertyFilters.tubes_score}\n                          className='slider'\n                          defaultValue={propertyFilters.tubes_score ? propertyFilters.tubes_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.tubes_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Supermarkets</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.supermarkets === true}\n                        onChange={() => toggleStatus('supermarkets')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.supermarkets === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, supermarkets_score: e.target.value }))}\n                          name={propertyFilters.supermarkets_score}\n                          className='slider'\n                          defaultValue={propertyFilters.supermarkets_score ? propertyFilters.supermarkets_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.supermarkets_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>EVs</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.ev === true}\n                        onChange={() => toggleStatus('ev')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.ev === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, ev_score: e.target.value }))}\n                          name={propertyFilters.ev_score}\n                          className='slider'\n                          defaultValue={propertyFilters.ev_score ? propertyFilters.ev_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.ev_score}</h3>\n                      </div> : ''}\n                    <div className='selection-block-single lifestyle'>\n                      <h3>Crime</h3>\n                      <ReactSwitch\n                        checked={propertyFilters.crime === true}\n                        onChange={() => toggleStatus('crime')}\n                        onColor='#ED6B86'\n                        offColor='#D5D5D5'\n                        uncheckedIcon={null}\n                        checkedIcon={null}\n                      />\n                    </div>\n                    {propertyFilters.crime === true ?\n                      <div className='slider-container'>\n                        <input\n                          type='range'\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, crime_score: e.target.value }))}\n                          name={propertyFilters.crime_score}\n                          className='slider'\n                          defaultValue={propertyFilters.crime_score ? propertyFilters.crime_score : 0}\n                          min='0'\n                          max='10'\n                          step='1'>\n                        </input>\n                        <h3>{propertyFilters.crime_score}</h3>\n                      </div> : ''}\n                  </div>\n                  : propertyFilters.search_type === 'Amenity' ?\n                    <div className='input-section'>\n                      <h2 className='section-sub-title'>Lifestyle details</h2>\n                      <p className='explanation'>Select what you want to include as part of your search and how much they matter</p>\n                      <div className='selection-block-single lifestyle'>\n                        <h3>Primary schools</h3>\n                        {primarySearchDetails ?\n                          <Select className='select-dropdown'\n                            options={schoolOptions}\n                            value={selectedPrimary}\n                            onChange={schoolChange}\n                            isSearchable={true}\n                            placeholder=\"Select a School\"\n                          >School</Select>\n                          : ''}\n                      </div>\n                    </div>\n\n                    : ''}\n\n              </section>\n              <section className='search-name-section'>\n                <h3>Give your search a name to save it</h3>\n                <input value={propertyFilters.search_name || ''} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, search_name: e.target.value }))}></input>\n              </section>\n\n              <section className='input-footer'>\n                {previousLocation === 'Edit' ? <button className='load-properties' onClick={editAgentSearch}>Load results</button> : <button className='load-properties' onClick={loadProperties}>Load results</button>}\n              </section>\n            </section>\n            : ''}\n\n\n        </Modal.Body>\n      </Modal >\n\n    </>\n\n  )\n}\n\nexport default KYCInput","import { u as useStateManager } from './useStateManager-7e1e8489.esm.js';\nexport { u as useStateManager } from './useStateManager-7e1e8489.esm.js';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { forwardRef, useMemo } from 'react';\nimport { S as Select } from './Select-49a62830.esm.js';\nexport { c as createFilter, d as defaultTheme, m as mergeStyles } from './Select-49a62830.esm.js';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nexport { c as components } from './index-a301f526.esm.js';\nimport '@babel/runtime/helpers/objectSpread2';\nimport '@babel/runtime/helpers/slicedToArray';\nimport '@babel/runtime/helpers/objectWithoutProperties';\nimport '@babel/runtime/helpers/classCallCheck';\nimport '@babel/runtime/helpers/createClass';\nimport '@babel/runtime/helpers/inherits';\nimport '@babel/runtime/helpers/createSuper';\nimport '@babel/runtime/helpers/toConsumableArray';\nimport 'memoize-one';\nimport '@babel/runtime/helpers/typeof';\nimport '@babel/runtime/helpers/taggedTemplateLiteral';\nimport '@babel/runtime/helpers/defineProperty';\nimport 'react-dom';\nimport '@floating-ui/dom';\nimport 'use-isomorphic-layout-effect';\n\nvar StateManagedSelect = /*#__PURE__*/forwardRef(function (props, ref) {\n  var baseSelectProps = useStateManager(props);\n  return /*#__PURE__*/React.createElement(Select, _extends({\n    ref: ref\n  }, baseSelectProps));\n});\nvar StateManagedSelect$1 = StateManagedSelect;\n\nvar NonceProvider = (function (_ref) {\n  var nonce = _ref.nonce,\n    children = _ref.children,\n    cacheKey = _ref.cacheKey;\n  var emotionCache = useMemo(function () {\n    return createCache({\n      key: cacheKey,\n      nonce: nonce\n    });\n  }, [cacheKey, nonce]);\n  return /*#__PURE__*/React.createElement(CacheProvider, {\n    value: emotionCache\n  }, children);\n});\n\nexport { NonceProvider, StateManagedSelect$1 as default };\n"],"names":["_ref","setSingleProperty","propertyView","setPropertyView","useState","errors","setErrors","neighbourhoodScore","setNeighbourhoodScore","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","sliderSelection","setSliderSelection","tableMapView","setTableMapView","postcodeData","setPostcodes","primaryData","setPrimaryData","primaryData1","setPrimaryData1","secondaryData","setSecondaryData","secondaryData1","setSecondaryData1","topPrimaries","setTopPrimaries","topSecondaries","setTopSecondaries","restaurants","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","ev","setEv","restaurants1","setRestaurants1","gyms1","setGyms1","pubs1","setPubs1","supermarkets1","setSupermarkets1","ev1","setEv1","cuisines","setCuisines","topRestaurants","setTopRestaurants","topPubs","setTopPubs","mainGyms","setMainGyms","mainSupermarkets","setMainSupermarkets","tubes","setTubes","trains","setTrains","tubes1","setTubes1","trains1","setTrains1","aiSearch","setAiSearch","aiReady","setAiReady","searchGo","setSearchGo","secondaryDetail","setSecondaryDetail","primaryDetail","setPrimaryDetail","useEffect","JSON","parse","localStorage","getItem","loadPostcodeData","async","data","axios","post","postcode","postcodeValue","console","log","error","loadPrimaryData","get","getPrimaries","walkDistanceKm20","R","toRad","value","Math","PI","kmPerMinute","getNearbyPrimaries","nearbyPrimaries","filter","item","dLat","parseFloat","latitude","longitude","dLon","a","sin","cos","c","atan2","sqrt","distanceKm","distance_between","walkTimeMin","round","distancePercent","max_distance","school_type","within_catchment","additional_status","sort","b","firstSchoolNames","slice","loadSecondaryData","getSecondaries","getNearbySecondaries","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","includes","loadRestaurantData","getData","walkDistanceKm15","getNearbyRestaurants","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","map","restaurant_name","Set","size","countUniqueCuisines","loadFitnessData","getNearbyStudios","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","length","gym","gym_group","toLowerCase","has","push","add","loadSupermarketData","getNearbySupermatkets","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","loadTubesData","getNearbyTubes","nearbyTubes","lat","loadEVdata","nearbyChargers","loadPubsData","getNearbyPubs","nearbyPubs","topThreePubs","pub","name","loadTrainsData","getNearbyTrains","nearbyTrains","calculateScore","calculation","ceil","crime","percentile","fitness","parks_lsoa","london_percentile","normal_percentile","_jsx","_Fragment","children","className","id","_jsxs","onClick","PropertySummary","SchoolHighlights","LifestyleHighlights","TransportHighlights","NeighbourhoodHighlights","PropertyDetailSlider","placeholder","PrimaryDetails","listType","SecondaryDetails","TubeDetails","RestaurantDetails","PubDetails","SupermarketDetails","FitnessDetails","EVDetails","setListingSelection","fetchData","agentFavourites","loadUserData","addAgentFavourite","deleteAgentFavourite","propertyFilters","setPropertyFilters","addAgentSearch","properties","setProperties","loadProperties","loading","propertyInputShow","handlePropertyInputShow","handlePropertyInputClose","toggleStatus","primarySearchDetails","setPrimarySearchDetails","selectedPrimary","setSelectedPrimary","singleProperty","useNavigate","propertyViewFormat","setPropertyViewFormat","selectedProperties","setSelectedProperties","showPopup","setShowPopup","iconId","setIconId","propertyDetails","setPropertyDetails","useRef","Map","filters","propertyData","handleVisitUrl","url","link","document","createElement","href","target","rel","windowFeatures","body","appendChild","click","removeChild","goToListing","property_data","window","setItem","stringify","currentPage","setCurrentPage","startIndex","endIndex","viewport","setViewport","zoom","iconSetting","e","parseInt","handlePageClick","selected","mapNumberToWord","number","SinglePropertyInsights","Loading","school","school_name","search_type","index","displayAddress","persona_data_list","district","added_revised","reduced_revised","price","bedrooms","agent","overall_lifestyle_score","toFixed","distance_meters","some","fav","rightmove_id","ReactPaginate","pageCount","onPageChange","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","alt","src","images","onMouseEnter","ReactMapGL","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","Marker","handlePropertyClick","property","Popup","closeOnClick","onClose","channel","NumericFormat","displayType","thousandSeparator","prefix","style","fontWeight","bathrooms","propertyType","price_per_sqft","features","split","feature","primary_percentile","secondary_percentile","park_area_percentile","gym_percentile","pub_percentile","restaurant_percentile","crime_percentile","tube_percentile","ev_percentile","floorplan_url","backgroundImage","KYCInput","adjustedFilters","previousLocation","editAgentSearch","salesPrices","rentalPrices","schoolOptions","Array","isArray","label","Modal","show","onHide","backdrop","Body","onChange","prevData","area","borough","rental_price_min","rental_price_max","bedrooms_min","bedrooms_max","type","checked","garden","htmlFor","stpp","granted","num","toString","formatSize","ReactSwitch","primaries","onColor","offColor","uncheckedIcon","checkedIcon","primaries_score","defaultValue","min","max","step","secondaries","secondaries_score","parks","parks_score","playgrounds","playgrounds_score","gyms_score","restaurants_score","pubs_score","tubes_score","supermarkets_score","ev_score","crime_score","Select","options","selectedOption","isSearchable","search_name","StateManagedSelect$1","forwardRef","props","ref","baseSelectProps","useStateManager","React","_extends"],"sourceRoot":""}