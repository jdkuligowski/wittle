{"version":3,"file":"static/js/212.a13c3a22.chunk.js","mappings":"8OAuEA,MA7D4B,IAAmH,IAAlH,aAAEA,EAAY,SAAEC,EAAQ,eAAEC,EAAc,MAAEC,EAAK,SAAEC,EAAQ,cAAEC,EAAa,iBAAEC,EAAgB,MAAEC,EAAK,QAAEC,GAAS,EAKvI,MAAOC,EAAQC,IAAaC,EAAAA,EAAAA,YAG5B,OAEE,+BACE,qBAASC,UAAU,iBAAgB,WACjC,iBAAKA,UAAU,MAAK,WAClB,iBAAKA,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,yBAC1BZ,GACC,iCACE,0CAAQA,EAAaa,OAAM,uCAC3B,oDAAkBZ,EAAQ,0BAC1B,0CAAQC,EAAe,GAAE,KAAIA,EAAe,GAAE,MAAKA,EAAe,GAAE,wBAEpE,OAGN,iBAAKU,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,kBAC1BL,GACC,iCACE,0CAAQA,EAAMM,OAAM,gCACpB,0CAAQL,EAAQ,GAAE,KAAIA,EAAQ,GAAE,MAAKA,EAAQ,GAAE,wBAE/C,UAGR,iBAAKI,UAAU,MAAK,WAClB,iBAAKA,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,qBAC1BT,GACC,iCACE,kEAAYA,EAAMU,OAAM,+BACH,IAApBT,EAASS,QAAe,2EAAqBT,EAAS,GAAE,KAAIA,EAAS,GAAE,MAAKA,EAAS,MAA+B,IAApBA,EAASS,QAAe,2EAAqBT,EAAS,GAAE,MAAKA,EAAS,GAAE,OAA8B,IAApBA,EAASS,QAAe,2EAAqBT,EAAS,MAAW,MAEpP,OAGN,iBAAKQ,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,0BAC1BP,GACC,iCACE,0CAAQA,EAAcQ,OAAM,uCACC,IAA5BP,EAAiBO,QAAe,mDAAiBP,EAAiB,GAAE,KAAIA,EAAiB,GAAE,MAAKA,EAAiB,MAAuC,IAA5BA,EAAiBO,QAAe,mDAAiBP,EAAiB,GAAE,MAAKA,EAAiB,GAAE,OAAsC,IAA5BA,EAAiBO,QAAe,mDAAiBP,EAAiB,MAAW,MAEhT,aAKT,ECmCP,MA7FyB,IAAuC,IAAtC,aAAEQ,EAAY,eAAEC,GAAgB,EAIxD,MAAMC,GAAWC,EAAAA,EAAAA,OAGVR,EAAQC,IAAaC,EAAAA,EAAAA,YAI5B,OAEE,+BACE,qBAASC,UAAU,oBAAmB,WACpC,iBAAKA,UAAU,eAAc,WAC3B,eAAIA,UAAU,cAAa,8BAC3B,iBAAKA,UAAU,uBAAsB,WACnC,eAAIM,GAAG,UAAS,gBAChB,eAAIA,GAAG,UAAS,0BAChB,eAAIA,GAAG,UAAS,qBAChB,eAAIA,GAAG,UAAS,wBAChB,eAAIA,GAAG,UAAS,0BAElB,gBAAKN,UAAU,uBAAsB,SAClCE,EAAeA,EAAaK,KAAI,CAACC,EAAMC,KAEpC,+BACE,iBAAKT,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,SAASM,GAAG,UAAS,UAClC,wBAAKG,EAAQ,OAEf,gBAAKT,UAAU,SAASM,GAAG,UAAS,UAClC,eAAII,QAAS,IAAMN,EAAU,2BAA0BI,EAAKF,MAAM,SAAGE,EAAKG,iBAE5E,gBAAKX,UAAU,SAASM,GAAG,UAAS,SACT,OAAxBE,EAAKI,gBAA0B,wBAAKJ,EAAKI,kBAAuB,mCAEnE,gBAAKZ,UAAU,SAASM,GAAG,UAAS,UAClC,wBAAKE,EAAKK,sBAEZ,gBAAKb,UAAU,SAASM,GAAG,UAAS,UAClC,0BAAKE,EAAKM,YAAW,oBAM1B,SAGT,iBAAKd,UAAU,eAAc,WAC3B,eAAIA,UAAU,cAAa,gCAC3B,iBAAKA,UAAU,uBAAsB,WACnC,eAAIM,GAAG,UAAS,gBAChB,eAAIA,GAAG,UAAS,0BAChB,eAAIA,GAAG,UAAS,qBAChB,eAAIA,GAAG,UAAS,wBAChB,eAAIA,GAAG,UAAS,0BAElB,gBAAKN,UAAU,uBAAsB,SAClCG,EAAiBA,EAAeI,KAAI,CAACC,EAAMC,KAExC,+BACE,iBAAKT,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,SAASM,GAAG,UAAS,UAClC,wBAAKG,EAAQ,OAEf,gBAAKT,UAAU,SAASM,GAAG,UAAS,UAClC,eAAII,QAAS,IAAMN,EAAU,6BAA4BI,EAAKF,MAAM,SAAGE,EAAKG,iBAE9E,gBAAKX,UAAU,SAASM,GAAG,UAAS,SACT,OAAxBE,EAAKI,gBAA0B,wBAAKJ,EAAKI,kBAAuB,mCAEnE,gBAAKZ,UAAU,SAASM,GAAG,UAAS,UAClC,wBAAKE,EAAKK,sBAEZ,gBAAKb,UAAU,SAASM,GAAG,UAAS,UAClC,0BAAKE,EAAKM,YAAW,oBAM1B,YAKV,ECpCP,MApD4B,IAAwC,IAAvC,aAAEC,EAAY,OAAEC,EAAM,QAAEC,GAAS,EAM5D,OACE,+BACE,qBAASjB,UAAU,iBAAgB,WACjC,iBAAKA,UAAU,MAAK,WAClB,iBAAKA,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,sCAC1BgB,GAAUA,EAAOf,OAAS,GACzB,iCACE,0CAAQe,EAAOf,OAAM,yCACrB,0CAAQe,EAAO,GAAGE,aAAY,OAAMF,EAAO,GAAGF,YAAW,gBACxDE,EAAOf,OAAS,GAAI,0CAAQe,EAAO,GAAGE,aAAY,QAAOF,EAAO,GAAGE,aAAY,sBAA2C,IAAlBF,EAAOf,QAAe,0CAAQe,EAAO,GAAGE,aAAY,qBAAwB,OAGvL,kGAGJ,iBAAKlB,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,+BAC1Be,GACC,iCACE,0CAAQA,EAAa,GAAGI,GAAGC,WAAU,2CACrC,qDAAmBC,KAAKC,MAA4C,KAArC,EAAIP,EAAa,GAAGI,GAAGI,aAAkB,oDAExE,UAGR,gBAAKvB,UAAU,MAAK,UAClB,iBAAKA,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,2BAC1BiB,GAAWA,EAAQhB,OAAS,GAC3B,iCACE,0CAAQgB,EAAQhB,OAAM,yCACtB,0CAAQgB,EAAQ,GAAGO,QAAO,OAAMP,EAAQ,GAAGH,YAAW,gBACrDG,EAAQhB,OAAS,GAAI,0CAAQgB,EAAQ,GAAGO,QAAO,QAAOP,EAAQ,GAAGO,QAAO,sBAA4C,IAAnBP,EAAQhB,QAAe,0CAAQgB,EAAQ,GAAGO,QAAO,qBAAwB,OAG7K,uGAMP,ECjBP,MApCgC,IAAuB,IAAtB,aAAET,GAAc,EAG/C,OAEE,+BACE,oBAASf,UAAU,iBAAgB,UACjC,iBAAKA,UAAU,MAAK,WAClB,iBAAKA,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,yBAC1Be,GACC,iCACE,qDAAmB,IAAMA,EAAa,GAAGU,WAAW,GAAGC,kBAAiB,oDACxE,0CAAQX,EAAa,GAAGY,eAAeC,WAAU,WAAUP,KAAKQ,KAAQd,EAAa,GAAGY,eAAeG,UAAa,IAAQ,EAAK,IAAG,mBAGpI,OAGN,iBAAK9B,UAAU,SAAQ,WACrB,eAAIA,UAAU,cAAa,mBAC1Be,GACC,iCACE,wDAAsBM,KAAKC,MAA8C,IAAvCP,EAAa,GAAGgB,MAAM,GAAGR,YAAkB,+CAC7E,wDAAsBF,KAAKC,MAA4D,IAArDP,EAAa,GAAGgB,MAAM,GAAGC,0BAAgC,iBAAgBjB,EAAa,GAAGgB,MAAM,GAAGE,QAAO,6BAG3I,YAKT,E,4CCkSP,MAnUwB,IAA2C,IAA1C,mBAAEC,EAAkB,aAAEnB,GAAc,EAG3D,MAAMoB,EAAO,CACX,CAAEC,KAAM,QAASC,MAAOH,GACxB,CAAEE,KAAM,YAAaC,MAAO,IAAMH,IAG9BI,EAAS,CAAC,UAAW,WAIrBC,EAAiB,CACrB,CAAEH,KAAM,QAASC,MAAOtB,EAAa,GAAGU,WAAW,GAAGC,mBACtD,CAAEU,KAAM,YAAaC,MAAO,IAAMtB,EAAa,GAAGU,WAAW,GAAGC,oBAI5Dc,EAAiB,CACrB,CAAEJ,KAAM,QAASC,MAAOhB,KAAKQ,KAAqD,IAAhDd,EAAa,GAAG0B,YAAYC,oBAC9D,CAAEN,KAAM,YAAaC,MAAOhB,KAAKQ,KAA2D,KAArD,EAAId,EAAa,GAAG0B,YAAYC,sBAInEC,EAAY,CAChB,CAAEP,KAAM,QAASC,MAAOhB,KAAKC,MAA4C,IAAtCP,EAAa,GAAGgB,MAAM,GAAGR,aAC5D,CAAEa,KAAM,YAAaC,MAAOhB,KAAKC,MAAkD,KAA3C,EAAIP,EAAa,GAAGgB,MAAM,GAAGR,eAKjEqB,EAAW,CACf,CAAER,KAAM,QAASC,MAAOhB,KAAKQ,KAAwC,IAAnCd,EAAa,GAAG8B,MAAMtB,aACxD,CAAEa,KAAM,YAAaC,MAAOhB,KAAKQ,KAA8C,KAAxC,EAAId,EAAa,GAAG8B,MAAMtB,eAG7DuB,EAAkB,CACtB,CAAEV,KAAM,QAASC,MAAOhB,KAAKQ,KAA0D,IAArDd,EAAa,GAAGgC,YAAYC,yBAC9D,CAAEZ,KAAM,YAAaC,MAAOhB,KAAKQ,KAAgE,KAA1D,EAAId,EAAa,GAAGgC,YAAYC,2BAKzE,OAEE,+BACE,oBAAShD,UAAU,kBAAiB,UAClC,iBAAKA,UAAU,MAAK,WAGlB,iBAAKA,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,YAAW,UACxB,SAACiD,EAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAI,UAChC,UAACC,EAAA,EAAG,CACFjB,KAAMA,EACNkB,GAAI,GACJC,GAAI,GACJC,YAAa,GACbC,YAAa,GACbC,KAAK,UACLC,aAAc,EACdC,QAAQ,QACRC,WAAY,EAAE,UAEbzB,EAAK5B,KAAI,CAACsD,EAAOpD,KAChB,SAACqD,EAAA,EAAI,CAEHL,KAAMnB,EAAO7B,EAAQ6B,EAAOrC,QAC5B2D,WAAsB,IAAVnD,EAAc,EAAK,IAAM0B,EAAK1B,EAAQ,GAAG4B,MAAS,IAC9D0B,SAAW,IAAMF,EAAMxB,MAAS,KAH1B,QAAO5B,QAMjB,SAACuD,EAAA,EAAK,CACJ3B,MAAQ,GAAEH,KACV+B,SAAS,SACTC,SAAU,GACVC,WAAW,OACXV,KAAK,oBAKb,gBAAKzD,UAAU,UAAS,UACtB,sDAKJ,iBAAKA,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,YAAW,UACxB,SAACiD,EAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAI,UAChC,UAACC,EAAA,EAAG,CACFjB,KAAMI,EACNc,GAAI,GACJC,GAAI,GACJC,YAAa,GACbC,YAAa,GACbC,KAAK,UACLC,aAAc,EACdC,QAAQ,QACRC,WAAY,EAAE,UAEbrB,EAAehC,KAAI,CAACsD,EAAOpD,KAC1B,SAACqD,EAAA,EAAI,CAEHL,KAAMnB,EAAO7B,EAAQ6B,EAAOrC,QAC5B2D,WAAsB,IAAVnD,EAAc,EAAK,IAAM0B,EAAK1B,EAAQ,GAAG4B,MAAS,IAC9D0B,SAAW,IAAMF,EAAMxB,MAAS,KAH1B,QAAO5B,QAMjB,SAACuD,EAAA,EAAK,CACJ3B,MAAQ,GAAEE,EAAe,GAAGF,MAAQ,GAAKE,EAAe,GAAGF,MAAQE,EAAe,GAAGF,SACrF4B,SAAS,SACTC,SAAU,GACVC,WAAW,OACXV,KAAK,oBAKb,gBAAKzD,UAAU,UAAS,SACrBuC,EAAe,GAAGF,MAAQ,IAAM,wCAAgBE,EAAe,GAAGF,MAAK,oDAAsD,2CAAmBE,EAAe,GAAGF,MAAK,yDAK5K,iBAAKrC,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,YAAW,UACxB,SAACiD,EAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAI,UAChC,UAACC,EAAA,EAAG,CACFjB,KAAMW,EACNO,GAAI,GACJC,GAAI,GACJC,YAAa,GACbC,YAAa,GACbC,KAAK,UACLC,aAAc,EACdC,QAAQ,QACRC,WAAY,EAAE,UAEbd,EAAgBvC,KAAI,CAACsD,EAAOpD,KAC3B,SAACqD,EAAA,EAAI,CAEHL,KAAMnB,EAAO7B,EAAQ6B,EAAOrC,QAC5B2D,WAAsB,IAAVnD,EAAc,EAAK,IAAM0B,EAAK1B,EAAQ,GAAG4B,MAAS,IAC9D0B,SAAW,IAAMF,EAAMxB,MAAS,KAH1B,QAAO5B,QAMjB,SAACuD,EAAA,EAAK,CACJ3B,MAAU,IAAMS,EAAgB,GAAGT,MAA3B,IACR4B,SAAS,SACTC,SAAU,GACVC,WAAW,OACXV,KAAK,oBAKb,gBAAKzD,UAAU,UAAS,UACtB,wCAAgB,IAAM8C,EAAgB,GAAGT,MAAK,sDAKlD,iBAAKrC,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,YAAW,UACxB,SAACiD,EAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAI,UAChC,UAACC,EAAA,EAAG,CACFjB,KAAMK,EACNa,GAAI,GACJC,GAAI,GACJC,YAAa,GACbC,YAAa,GACbC,KAAK,UACLC,aAAc,EACdC,QAAQ,QACRC,WAAY,EAAE,UAEbpB,EAAejC,KAAI,CAACsD,EAAOpD,KAC1B,SAACqD,EAAA,EAAI,CAEHL,KAAMnB,EAAO7B,EAAQ6B,EAAOrC,QAC5B2D,WAAsB,IAAVnD,EAAc,EAAK,IAAM0B,EAAK1B,EAAQ,GAAG4B,MAAS,IAC9D0B,SAAW,IAAMF,EAAMxB,MAAS,KAH1B,QAAO5B,QAMjB,SAACuD,EAAA,EAAK,CACJ3B,MAAU,IAAMG,EAAe,GAAGH,MAA1B,IACR4B,SAAS,SACTC,SAAU,GACVC,WAAW,OACXV,KAAK,oBAKb,gBAAKzD,UAAU,UAAS,UACtB,yCAAiB,IAAMwC,EAAe,GAAGH,MAAK,kEAOlD,iBAAKrC,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,YAAW,UACxB,SAACiD,EAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAI,UAChC,UAACC,EAAA,EAAG,CACFjB,KAAMQ,EAAUyB,UAChBf,GAAI,GACJC,GAAI,GACJC,YAAa,GACbC,YAAa,GACbC,KAAK,UACLC,aAAc,EACdC,QAAQ,QACRC,WAAY,EAAE,UAEbjB,EAAUpC,KAAI,CAACsD,EAAOpD,KACrB,SAACqD,EAAA,EAAI,CAEHL,KAAMnB,EAAO7B,EAAQ6B,EAAOrC,QAC5B2D,WAAsB,IAAVnD,EAAc,EAAK,IAAM0B,EAAK1B,EAAQ,GAAG4B,MAAS,IAC9D0B,SAAW,IAAMF,EAAMxB,MAAS,KAH1B,QAAO5B,QAMjB,SAACuD,EAAA,EAAK,CACJ3B,MAAQ,GAAEM,EAAU,GAAGN,MAAQ,GAAKM,EAAU,GAAGN,MAAQM,EAAU,GAAGN,SACtE4B,SAAS,SACTC,SAAU,GACVC,WAAW,OACXV,KAAK,oBAKb,gBAAKzD,UAAU,UAAS,SACpB2C,EAAU,GAAGN,MAAS,IAAK,4CAAoBM,EAAU,GAAGN,MAAK,+CAAiD,2CAAoBM,EAAU,GAAGN,MAAK,oDAK9J,iBAAKrC,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,YAAW,UACxB,SAACiD,EAAA,EAAQ,CAACC,MAAO,IAAKC,OAAQ,IAAI,UAChC,UAACC,EAAA,EAAG,CACFjB,KAAMS,EACNS,GAAI,GACJC,GAAI,GACJC,YAAa,GACbC,YAAa,GACbC,KAAK,UACLC,aAAc,EACdC,QAAQ,QACRC,WAAY,EAAE,UAEbhB,EAASrC,KAAI,CAACsD,EAAOpD,KACpB,SAACqD,EAAA,EAAI,CAEHL,KAAMnB,EAAO7B,EAAQ6B,EAAOrC,QAC5B2D,WAAsB,IAAVnD,EAAc,EAAK,IAAM0B,EAAK1B,EAAQ,GAAG4B,MAAS,IAC9D0B,SAAW,IAAMF,EAAMxB,MAAS,KAH1B,QAAO5B,QAMjB,SAACuD,EAAA,EAAK,CACJ3B,MAAU,IAAMO,EAAS,GAAGP,MAApB,IACR4B,SAAS,SACTC,SAAU,GACVC,WAAW,OACXV,KAAK,oBAKb,gBAAKzD,UAAU,UAAS,UACtB,wCAAgB,IAAM4C,EAAS,GAAGP,MAAK,yDA4C9C,E,gMC4BP,MArVoB,IAAkE,IAAjE,aAAEgC,EAAY,OAAErD,EAAM,SAAEsD,EAAQ,UAAEC,EAAS,aAAExD,GAAc,GAI7DV,EAAAA,EAAAA,MAAjB,MAGOmE,EAAUC,IAAe1E,EAAAA,EAAAA,UAAS,UAGlC2E,EAAQC,IAAa5E,EAAAA,EAAAA,UAAS,KAG9B6E,EAAeC,IAAoB9E,EAAAA,EAAAA,aAGnC+E,EAAWC,IAAgBhF,EAAAA,EAAAA,UAAS,OACpCiF,EAAeC,IAAoBlF,EAAAA,EAAAA,UAAS,OAG5CmF,EAAYC,IAAiBpF,EAAAA,EAAAA,UAAS,KAGtCqF,EAAUC,IAAetF,EAAAA,EAAAA,UAAS,CACvCuF,SAAU,UACVC,WAAY,QACZC,KAAM,QAIDC,EAAWC,IAAgB3F,EAAAA,EAAAA,WAAS,IACpC4F,EAAQC,IAAa7F,EAAAA,EAAAA,aAIrB8F,EAAaC,IAAkB/F,EAAAA,EAAAA,UAAS,GACzCgG,EAFiB,GAEJF,EACbG,EAAWD,EAHM,GAQjBE,EAAeC,IACnBR,GAAa,GACbS,QAAQC,IAAIX,GACZG,EAAUS,SAASH,EAAEI,OAAOhG,KAC5B6F,QAAQC,IAAIC,SAASH,EAAEI,OAAOhG,IAAI,GAUpCiG,EAAAA,EAAAA,YAAU,KACJxF,GACFsE,GAAamB,IAAY,IACpBA,EACHlB,SAAUvE,EAAa,GAAGwE,UAC1BA,UAAWxE,EAAa,GAAGuE,SAC3BE,KAAM,QAEV,GACC,CAACzE,IAGJ,MAQM0F,EAAcC,IAClB,IAAIC,EAAY,MAEZ7B,IAAc4B,GAA2B,QAAlB1B,IACzB2B,EAAY,QAGd5B,EAAa2B,GACbzB,EAAiB0B,GAEjB,MAAMC,EAAa,IAAI5F,GAAQ6F,MAAK,CAACC,EAAGC,IACjCC,MAAMF,EAAEJ,KAAYM,MAAMD,EAAEL,IAI7BI,EAAEJ,GAASK,EAAEL,GACM,QAAdC,GAAuB,EAAI,EAGhCG,EAAEJ,GAASK,EAAEL,GACM,QAAdC,EAAsB,GAAK,EAG7B,EAXgB,QAAdA,EAAsBG,EAAEJ,GAASK,EAAEL,GAASK,EAAEL,GAASI,EAAEJ,KAcpEnC,EAAUqC,EAAW,EAiCvB,OARAL,EAAAA,EAAAA,YAAU,KAjBYU,MAkBhBjG,GAfF2D,EAFW,MADOsC,EAmBL/B,GAhBH,IAAIlE,GAGZA,EAAOkG,QAAO1G,GAEVA,EAAK2G,cAAcC,cAAcC,SAASJ,EAAKG,gBAC/C5G,EAAK8G,KAAKF,cAAcC,SAASJ,EAAKG,gBACtC5G,EAAK+G,KAAKH,cAAcC,SAASJ,EAAKG,iBAU9C,GACC,CAAClC,EAAYlE,KAKd,8BACGA,GACC,qBAAShB,UAAU,0BAAyB,WAC1C,iBAAKA,UAAU,gBAAe,UAC3BqE,GAAe,gBAAIrE,UAAU,gBAAe,gCAAqBqE,EAAajC,KAAI,QAAU,oDAC7F,iBAAKpC,UAAU,wBAAuB,WACpC,gBAAKA,UAAU,gBAAe,UAC5B,gBAAKA,UAAU,aAAaU,QAAUwF,GAAMzB,EAAY,cAG1D,gBAAKzE,UAAU,gBAAe,UAC5B,gBAAKA,UAAU,WAAWU,QAAUwF,GAAMzB,EAAY,iBAS9C,UAAbD,GACC,iBAAKxE,UAAU,eAAc,WAC3B,iBAAKA,UAAU,uBAAsB,WACnC,eAAIM,GAAG,UAAS,gBAChB,iBAAKA,GAAG,UAAUN,UAAU,wBAAwBU,QAAS,IAAM+F,EAAW,gBAAgB,WAC5F,0CACA,eAAIzG,UAAU,cAAa,8BAE7B,iBAAKM,GAAG,UAAUN,UAAU,2BAA2BU,QAAS,IAAM+F,EAAW,QAAQ,WACvF,uCACA,eAAIzG,UAAU,cAAa,6BAMf,eAAbsE,GACC,iBAAKhE,GAAG,UAAUN,UAAU,eAAeU,QAAS,IAAM+F,EAAW,eAAe,WAClF,sCACA,eAAIzG,UAAU,cAAa,8BAG7B,eAAIM,GAAG,gBAIX,gBAAKN,UAAU,uBAAsB,SAClC0E,EAASA,EAAOnE,KAAI,CAACC,EAAMC,KAExB,iCACE,iBAAKT,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,SAASM,GAAG,UAAS,UAClC,wBAAKG,EAAQ,OAEf,gBAAKT,UAAU,kBAAkBM,GAAG,UAAS,UAC3C,wBAAKE,EAAKU,kBAEZ,gBAAKlB,UAAU,qBAAqBM,GAAG,UAAS,UAC9C,wBAAKE,EAAK8G,UAMZ,gBAAKtH,UAAU,SAASM,GAAG,UAAS,SACpB,eAAbgE,GACC,0BAAK9D,EAAKM,YAAW,YAErB,wBAMN,eAAId,UAAU,uBAIjBwH,MAAMzB,EAAYC,GAAY,QAQtB,QAAbxB,GAEA,gBAAKxE,UAAU,eAAc,UAC3B,iBAAKA,UAAU,gBAAe,WAG5B,gBAAKA,UAAU,YAAW,SACvB0E,EAASA,EAAOnE,KAAI,CAACC,EAAMC,KAExB,iCACE,iBAAKT,UAAU,iBAAgB,WAC7B,gBAAKA,UAAU,YAAW,UACxB,wBAAKS,EAAQ,OAGf,iBAAKT,UAAU,aAAaM,GAAIE,EAAKF,GAAImH,aAAcxB,EAAY,WACjE,eAAIjG,UAAU,QAAO,SAAEQ,EAAKU,gBAC5B,wBAAKV,EAAK8G,OACI,eAAbhD,GACC,oDAAkB9D,EAAKM,YAAW,WAChC,UAGR,eAAId,UAAU,uBAIjBwH,MAAMzB,EAAYC,GAAY,MAKnC,gBAAKhG,UAAU,cAAa,UAC1B,UAAC,KAAU,IACLoF,EACJsC,qBAAsBC,oGACtBC,SAAS,sCACTC,iBAAkBzC,IAChBC,EAAYD,EAAS,EAEvB0C,OAAQ1C,EACR2C,OAAQC,GAAO3C,EAAY2C,EAAI5C,UAC/BpF,UAAU,cAAa,UAEtB0E,GACHA,EAAOnE,KAAI,CAACC,EAAMC,KAChB,SAAC,KAAM,CAELH,GAAIE,EAAKF,GACTiF,UAAW/E,EAAKyH,KAChB3C,SAAU9E,EAAK0H,IACfxH,QAAS,KAAMyH,OA/NZtF,EA+N4BrC,EA9NnD2F,QAAQC,IAAI,mBAAoBvD,QAChCgC,EAAiBhC,GAFMA,KA+NkC,YAGrC,gBAAK7C,UAAU,iBAAgB,SAAES,EAAQ,KAPpCA,KASN+G,MAAMzB,EAAYC,GAClBjF,IACH,SAAC,KAAM,CACLT,GAAIS,EAAa,GAAGT,GACpBiF,UAAWxE,EAAa,GAAGuE,SAC3BA,SAAUvE,EAAa,GAAGwE,UAAU,UAGpC,eAAIvF,UAAU,gBAAe,4BAG5B4E,GACC,SAAC,KAAK,CACJW,UAAWX,EAAcqD,KACzB3C,SAAUV,EAAcsD,IACxBE,cAAc,EACdpI,UAAU,aACVqI,QAAS,IAAMxD,EAAiB,MAAM,UAGtC,gBAAK7E,UAAU,gBAAe,UAE5B,iBAAKA,UAAU,eAAc,WAC3B,eAAIA,UAAU,QAAO,SAAE4E,EAAc1D,gBACrC,uBAAI0D,EAAc0C,cAItB,aAUV,GACL5C,GACC,SAAC,IAAa,CACZ4D,UAAWjH,KAAKQ,KAAK6C,EAAOzE,OAAS,IACrCsI,aA5PapG,IACvB,MAAM,SAAEqG,GAAarG,EACrB2D,EAAe0C,EAAS,EA2PdC,mBAAoB,aACpBC,gBAAiB,SACjBC,cAAe,IACfC,UAAW,IACXC,mBAAoB,EACpBC,WAAY,QAEZ,OAKN,oBAAS9I,UAAU,iBAAgB,UACjC,SAAC+I,EAAA,EAAO,OAGX,ECy5BP,MAztC8B,KAI5B,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,MAGf7I,GAAWC,EAAAA,EAAAA,MAGX6I,GAAWC,EAAAA,EAAAA,OACVC,EAAcC,IAAmBtJ,EAAAA,EAAAA,UAAS,KAG1CuJ,EAAgBC,IAAqBxJ,EAAAA,EAAAA,UAAS,kBAC9CyJ,EAAeC,IAAoB1J,EAAAA,EAAAA,UAAS,kBAG5C2J,EAAcC,IAAmB5J,EAAAA,EAAAA,WAAS,IAG1CgB,EAAc6I,IAAgB7J,EAAAA,EAAAA,aAG9B8J,EAAUC,IAAe/J,EAAAA,EAAAA,aAGzBsE,EAAc0F,IAAmBhK,EAAAA,EAAAA,aAGjCiK,EAASC,IAAclK,EAAAA,EAAAA,aAGvBF,EAAQC,IAAaC,EAAAA,EAAAA,aAGrBmK,EAAiBC,IAAsBpK,EAAAA,EAAAA,UAAS,sBAGhDqK,EAAgBC,IAAqBtK,EAAAA,EAAAA,WAAS,IAC9CuK,EAAeC,IAAoBxK,EAAAA,EAAAA,WAAS,IAC5CyK,EAAkBC,IAAuB1K,EAAAA,EAAAA,WAAS,IAClD2K,GAAkBC,KAAuB5K,EAAAA,EAAAA,WAAS,IAClD6K,GAAsBC,KAA2B9K,EAAAA,EAAAA,WAAS,IAG1D+K,GAAaC,KAAkBhL,EAAAA,EAAAA,aAC/BiL,GAAcC,KAAmBlL,EAAAA,EAAAA,aACjCmL,GAAeC,KAAoBpL,EAAAA,EAAAA,aACnCqL,GAAgBC,KAAqBtL,EAAAA,EAAAA,aAGrCG,GAAcoL,KAAmBvL,EAAAA,EAAAA,aACjCI,GAAgBoL,KAAqBxL,EAAAA,EAAAA,aAGrC0C,GAAa+I,KAAkBzL,EAAAA,EAAAA,aAC/B0L,GAAMC,KAAW3L,EAAAA,EAAAA,aACjB4L,GAAMC,KAAW7L,EAAAA,EAAAA,aACjB8L,GAAcC,KAAmB/L,EAAAA,EAAAA,aACjCoB,GAAI4K,KAAShM,EAAAA,EAAAA,aAGbX,GAAc4M,KAAmBjM,EAAAA,EAAAA,aACjCR,GAAO0M,KAAYlM,EAAAA,EAAAA,aACnBJ,GAAOuM,KAAYnM,EAAAA,EAAAA,aACnBN,GAAe0M,KAAoBpM,EAAAA,EAAAA,aACnCqM,GAAKC,KAAUtM,EAAAA,EAAAA,aAGfV,GAAUiN,KAAevM,EAAAA,EAAAA,aACzBT,GAAgBiN,KAAsBxM,EAAAA,EAAAA,UAAS,KAC/CH,GAAS4M,KAAczM,EAAAA,EAAAA,UAAS,KAGhCP,GAAUiN,KAAe1M,EAAAA,EAAAA,UAAS,KAGlCL,GAAkBgN,KAAuB3M,EAAAA,EAAAA,UAAS,KAGlD8C,GAAO8J,KAAY5M,EAAAA,EAAAA,aACnB6M,GAAQC,KAAa9M,EAAAA,EAAAA,aAGrBiB,GAAQuD,KAAaxE,EAAAA,EAAAA,aACrBkB,GAAS6L,KAAc/M,EAAAA,EAAAA,aAGvBmC,GAAoB6K,KAAyBhN,EAAAA,EAAAA,aAG7CiN,GAAiBC,KAAsBlN,EAAAA,EAAAA,UAAS,oBAGhDmN,GAAcC,KAAmBpN,EAAAA,EAAAA,aAqBxCwG,EAAAA,EAAAA,YAAU,KAfe,MAEvB,IACsB6G,WAClB,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAW,kBAAiBrE,KACnD7C,QAAQC,IAAI,mBAAoBjE,GAChCyH,EAAazH,EAAK,EAEpBmL,EAIF,CAHE,MAAOC,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAIAC,EAAkB,GACjB,KAiCHjH,EAAAA,EAAAA,YAAU,KACJxF,GA5Be,MAEnB,IAAI0M,EAAAA,EAAAA,MACF,IACkBL,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAW,sBAAoBK,EAAAA,EAAAA,SAAmB,CACvEC,QAAS,CACPC,cAAgB,WAASC,EAAAA,EAAAA,WAG7B1H,QAAQC,IAAI,eAAgBjE,GAC5B2H,EAAY3H,GACZ8H,EAAW9H,EAAK6H,QAAQ,EAE1B8D,EAIF,CAHE,MAAOP,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,MAEAnN,EAAS,kBACT+F,QAAQC,IAAI,aACd,EAOE2H,EACF,GACC,CAAChN,KA0BJwF,EAAAA,EAAAA,YAAU,KACJsD,GAtBiB,MAErB,IACwBuD,WACpB,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAW,yBAAwBrD,IAAW,CACnE2D,QAAS,CACPC,cAAgB,WAASC,EAAAA,EAAAA,WAGvBG,EAAkB7L,EAAK8L,MAAKzN,GAAQA,EAAKwI,WAAaA,IAC5De,EAAgBiE,GAChB7H,QAAQC,IAAI,sBAAuB4H,EAAgB,EAErDE,EAIF,CAHE,MAAOX,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAMEY,EACF,GACC,CAACtE,KAqBJtD,EAAAA,EAAAA,YAAU,KACJxF,GAhBkB,MAEtB,IACuBqM,WACnB,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,mBAEjCtC,GAAe5I,EAAK,EAEtBiM,EAIF,CAHE,MAAOb,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKEc,EACF,GACC,CAACtN,IAGJ,MAAMuN,GAAwB,GAAK,GAAV,EAEnBC,GAAI,KACJC,GAASnM,GAAUA,EAAQhB,KAAKoN,GAAK,IACrCC,GAAc,EAAI,IAuGxBnI,EAAAA,EAAAA,YAAU,KACJuE,IArGqB,MAEzB,MAAM6D,EAAkB7D,GAAY5D,QAAO1G,IACzC,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK8E,UAAYuJ,WAAW9N,EAAa,GAAGwE,YACpEuJ,EAAON,GAAMK,WAAWrO,EAAK+E,WAAasJ,WAAW9N,EAAa,GAAGuE,WACrEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK8E,YACxFjE,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAEvBzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAG3C,MAAMY,EAAkBF,EAAa5O,EAAK+O,aAqE1C,MAlE0B,uBAAtB/O,EAAKgP,aAIuB,mBAArBhP,EAAKgP,aAEiB,eAAtBhP,EAAK+O,aALd/O,EAAKK,iBAAoB,MASW,iBAA3BL,EAAKiP,kBACdjP,EAAKK,iBAAmB,sBAGO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,GACpE7O,EAAKK,iBAAmB,uCACO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,GACpE7O,EAAKK,iBAAmB,kCACO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,EACpE7O,EAAKK,iBAAmB,oCACO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,IACpE7O,EAAKK,iBAAmB,0CACO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,IACpE7O,EAAKK,iBAAmB,+CAGO,kBAAtBL,EAAK+O,aAAmC/O,EAAK6O,iBAAmB,GACzE7O,EAAKK,iBAAmB,wCACO,kBAAtBL,EAAK+O,aAAmC/O,EAAK6O,iBAAmB,GACzE7O,EAAKK,iBAAmB,mCACO,kBAAtBL,EAAK+O,aAAmC/O,EAAK6O,iBAAmB,EACzE7O,EAAKK,iBAAmB,qCACO,kBAAtBL,EAAK+O,aAAmC/O,EAAK6O,iBAAmB,EACzE7O,EAAKK,iBAAmB,sCAGO,OAAtBL,EAAK+O,aAAwB/O,EAAK6O,iBAAmB,GAC9D7O,EAAKK,iBAAmB,8CACO,OAAtBL,EAAK+O,aAAwB/O,EAAK6O,iBAAmB,GAC9D7O,EAAKK,iBAAmB,yCACO,OAAtBL,EAAK+O,aAAwB/O,EAAK6O,iBAAmB,EAC9D7O,EAAKK,iBAAmB,2CACO,OAAtBL,EAAK+O,aAAwB/O,EAAK6O,iBAAmB,IAC9D7O,EAAKK,iBAAmB,2CACO,OAAtBL,EAAK+O,aAAwB/O,EAAK6O,iBAAmB,IAC9D7O,EAAKK,iBAAmB,gDAGfyO,GAAmB,GAC5B9O,EAAKK,iBAAmB,MACfyO,GAAmB,GAC5B9O,EAAKK,iBAAmB,cACfyO,GAAmB,EAC5B9O,EAAKK,iBAAmB,WACfyO,GAAmB,IAC5B9O,EAAKK,iBAAmB,eAGO,mBAAtBL,EAAK+O,aACd/O,EAAKK,iBAAmB,MAIxBL,EAAKK,iBAAmB,KAGnBuO,GAAcd,EAAgB,IAEpCzH,MAAK,CAACE,EAAGD,IAAMC,EAAEjG,YAAcgG,EAAEhG,cAE9B4O,EAAmBf,EAAgBnH,MAAM,EAAG,GAGlD8D,GAAgBoE,GAChBzE,GAAgB0D,GAEhBxI,QAAQC,IAAI,sBAAuBuI,EAAgB,EAOjDgB,EACF,GACC,CAAC7E,MAmBJvE,EAAAA,EAAAA,YAAU,KACJxF,GAhBoB,MAExB,IACyBqM,WACrB,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,qBAEjClC,GAAiBhJ,EAAK,EAExByN,EAIF,CAHE,MAAOrC,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKEsC,EACF,GACC,CAAC9O,KA2FJwF,EAAAA,EAAAA,YAAU,KACJ2E,IAtFuB,MAE3B,MAAM4E,EAAoB5E,GAAchE,QAAO1G,IAC7C,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK8E,UAAYuJ,WAAW9N,EAAa,GAAGwE,YACpEuJ,EAAON,GAAMK,WAAWrO,EAAK+E,WAAasJ,WAAW9N,EAAa,GAAGuE,WACrEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK8E,YACxFjE,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAEvBzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAG3C,MAAMqB,EAAqBX,EAAa5O,EAAK+O,aACvCS,EAAqBZ,EAAa5O,EAAKyP,aAqD7C,OAlDIzP,EAAKgP,YAAYnI,SAAS,gBAElB7G,EAAKgP,YAAYnI,SAAS,WADpC7G,EAAKK,iBAAmB,MAGO,SAAtBL,EAAK+O,cAAiD,eAAtB/O,EAAK+O,aAC9C/O,EAAKK,iBAAmB,4BACO,WAAtBL,EAAK+O,aACd/O,EAAKK,iBAAmB,wCACO,oBAAtBL,EAAK+O,aACd/O,EAAKK,iBAAmB,sCAGO,iBAAtBL,EAAK+O,aACd/O,EAAKK,iBAAmB,sBAGO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,GACpE7O,EAAKK,iBAAmB,uCACO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,GACpE7O,EAAKK,iBAAmB,kCACO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,IACpE7O,EAAKK,iBAAmB,oCACO,aAAtBL,EAAK+O,aAA8B/O,EAAK6O,iBAAmB,IACpE7O,EAAKK,iBAAmB,0CAGO,mBAAtBL,EAAK+O,cAIiB,OAAtB/O,EAAKyP,aAAwBD,GAAsB,EAH5DxP,EAAKK,iBAAmB,MAKO,OAAtBL,EAAKyP,aAAwBF,GAAsB,GAC5DvP,EAAKK,iBAAmB,cACO,OAAtBL,EAAKyP,aAAwBF,GAAsB,GAC5DvP,EAAKK,iBAAmB,WAIxBL,EAAKK,iBADIkP,GAAsB,GACP,MACfA,GAAsB,GACP,cACfA,GAAsB,EACP,WACfA,GAAsB,IACP,eAEA,KAGnBX,GAxEc,GAwEgB,IAEpCvI,MAAK,CAACE,EAAGD,IAAMC,EAAEjG,YAAcgG,EAAEhG,cAE9B4O,EAAmBI,EAAkBtI,MAAM,EAAG,GAGpD+D,GAAkBmE,GAClBrE,GAAkByE,GAElB3J,QAAQC,IAAI,wBAAyB0J,EAAkB,EAOrDI,EACF,GACC,CAAChF,MAoBJ3E,EAAAA,EAAAA,YAAU,KACJxF,GAhBqB,MAEzB,IACkBqM,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,qBAEjC7B,GAAerJ,EAAK,EAEtBgO,EAIF,CAHE,MAAO5C,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKE6C,EACF,GACC,CAACrP,IAIJ,MAAMsP,GAAmB,MA2CzB9J,EAAAA,EAAAA,YAAU,KACJ9D,IAzCuB,MAG3B,MAAM6N,EAAoB7N,GAAYyE,QAAO1G,IAC3C,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK8E,UAAYuJ,WAAW9N,EAAa,GAAGwE,YACpEuJ,EAAON,GAAMK,WAAWrO,EAAK+E,WAAasJ,WAAW9N,EAAa,GAAGuE,WACrEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK8E,YACxFjE,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAKvB,OAHAzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAEpCU,GAAciB,EAAgB,IACpCxJ,MAAK,CAACC,EAAGC,IAAMA,EAAEwJ,OAASzJ,EAAEyJ,SASzBC,EAAsBF,EACzBpJ,QAAOuJ,GAAqC,oBAAvBA,EAAWC,UAChClJ,MAAM,EAAG,GACTjH,KAAIkQ,GAAcA,EAAWE,kBAEhCrE,GAX6B7J,IACV,IAAImO,IAAInO,EAAYlC,KAAIkQ,GAAcA,EAAWC,WAClDnJ,KASNsJ,CAAoBP,IAChCtE,GAAgBsE,GAChB/D,GAAkBiE,GAElBrK,QAAQC,IAAI,wBAAyBkK,EAAkB,EAOrDQ,EACF,GACC,CAACrO,MAoBJ8D,EAAAA,EAAAA,YAAU,KACJxF,GAhBkB,MAEtB,IACkBqM,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,cACjClH,QAAQC,IAAI,eAAgBjE,GAC5BuJ,GAAQvJ,EAAK,EAEfgO,EAIF,CAHE,MAAO5C,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKEwD,EACF,GACC,CAAChQ,KAoDJwF,EAAAA,EAAAA,YAAU,KACJkF,IA/CmB,MAEvB,MAAMuF,EAAe,CAAC,cAAe,WAAY,UAAW,SAAU,UAAY,iBAC5EC,EAAa,IAAIL,IAKjBM,EAAgBzF,GAAKvE,QAAO1G,IAChC,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK2Q,KAAOtC,WAAW9N,EAAa,GAAGwE,YAC/DuJ,EAAON,GAAMK,WAAWrO,EAAKyH,MAAQ4G,WAAW9N,EAAa,GAAGuE,WAChEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK2Q,OACxF9P,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAKvB,OAHAzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAEpCU,GAAciB,EAAgB,IACpCxJ,MAAK,CAACC,EAAGC,IAAMD,EAAEhG,YAAciG,EAAEjG,cAG9BsQ,EAAkB,GAExB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAcjR,OAAQoR,IAAK,CAC7C,MAAMC,EAAMJ,EAAcG,GAC1B,GAAIC,EAAIC,WAAaP,EAAa3J,SAASiK,EAAIC,UAAUnK,iBAAmB6J,EAAWO,IAAIF,EAAIC,aAC7FH,EAAgBK,KAAKH,EAAIC,WACzBN,EAAWS,IAAIJ,EAAIC,WAEY,IAA3BH,EAAgBnR,QAClB,KAGN,CAEAgM,GAASiF,GACTzE,GAAY2E,EAAgB,EAQ1BO,EACF,GACC,CAAClG,MAsBJlF,EAAAA,EAAAA,YAAU,KACJxF,GAhBsB,MAE1B,IACkBqM,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,sBAEjCvB,GAAgB3J,EAAK,EAEvBgO,EAIF,CAHE,MAAO5C,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKEqE,EACF,GACC,CAAC7Q,KAuDJwF,EAAAA,EAAAA,YAAU,KACJsF,IAlDwB,MAE5B,MAAMgG,EAAuB,CAAC,MAAO,WAAY,OAAQ,OAAQ,aAAc,QAAS,QAClFC,EAAqB,IAAIlB,IAqBzBmB,EAhBkBlG,GAAatL,KAAIC,IACvC,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK8E,UAAYuJ,WAAW9N,EAAa,GAAGwE,YACpEuJ,EAAON,GAAMK,WAAWrO,EAAK+E,WAAasJ,WAAW9N,EAAa,GAAGuE,WACrEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK8E,YACxFjE,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAKvB,OAHAzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAEpC,IAAKlO,EAAMwR,SAAU5C,EAAY,IAIvClI,QAAO1G,GAAQA,EAAKwR,UAAY3B,KAG7B4B,EAAuB,GAE7B,IAAK,IAAIZ,EAAI,EAAGA,EAAIU,EAAmB9R,OAAQoR,IAAK,CAClD,MAAMa,EAAcH,EAAmBV,GACvC,GAAIQ,EAAqBxK,SAAS6K,EAAYC,kBAAkB/K,iBAAmB0K,EAAmBN,IAAIU,EAAYE,0BACpHH,EAAqBR,KAAKS,EAAYE,wBACtCN,EAAmBJ,IAAIQ,EAAYE,wBAEC,IAAhCH,EAAqBhS,QACvB,KAGN,CAEAkM,GAAiB4F,GACjBrF,GAAoBuF,GACpB9L,QAAQC,IAAI,yBAA0B2L,EAAmB,EAOvDM,EACF,GACC,CAACxG,MAoBJtF,EAAAA,EAAAA,YAAU,KACJxF,GAhBgB,MAEpB,IACkBqM,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,eAEjCV,GAASxK,EAAK,EAEhBgO,EAIF,CAHE,MAAO5C,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKE+E,EACF,GACC,CAACvR,KA6BJwF,EAAAA,EAAAA,YAAU,KACJ1D,IA1BiB,MAGrB,MAAM0P,EAAc1P,GAAMqE,QAAO1G,IAC/B,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK0H,KAAO2G,WAAW9N,EAAa,GAAGwE,YAC/DuJ,EAAON,GAAMK,WAAWrO,EAAKyH,MAAQ4G,WAAW9N,EAAa,GAAGuE,WAChEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK0H,OACxF7G,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAKvB,OAHAzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAEpCU,GAAcd,EAAgB,IACpCzH,MAAK,CAACE,EAAGD,IAAMC,EAAEjG,YAAcgG,EAAEhG,cAGpCyD,GAAUgO,GACVpM,QAAQC,IAAI,kBAAmBmM,EAAY,EAMzCC,EACF,GACC,CAAC3P,MAoBJ0D,EAAAA,EAAAA,YAAU,KACJxF,GAhBa,MAEjB,IACkBqM,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,aACjClH,QAAQC,IAAI,aAAcjE,GAC1B4J,GAAM5J,EAAK,EAEbgO,EAIF,CAHE,MAAO5C,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKEkF,EACF,GACC,CAAC1R,KAkCJwF,EAAAA,EAAAA,YAAU,KACJpF,IA9BoB,MAGxB,MAGMuR,EAAiBvR,GAAG+F,QAAO1G,IAC/B,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK8E,UAAYuJ,WAAW9N,EAAa,GAAGwE,YACpEuJ,EAAON,GAAMK,WAAWrO,EAAK+E,WAAasJ,WAAW9N,EAAa,GAAGuE,WACrEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK8E,YACxFjE,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAKvB,OAHAzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAEpCU,GAhBgB,iBAgBc,IACpCvI,MAAK,CAACC,EAAGC,IAAMD,EAAEhG,YAAciG,EAAEjG,cAGpCuL,GAAOqG,EAAe,EAQpBC,EACF,GACC,CAACxR,MAmBJoF,EAAAA,EAAAA,YAAU,KACJxF,GAhBe,MAEnB,IACkBqM,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,cACjClH,QAAQC,IAAI,cAAejE,GAC3ByJ,GAAQzJ,EAAK,EAEfgO,EAIF,CAHE,MAAO5C,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKEqF,EACF,GACC,CAAC7R,KAsCJwF,EAAAA,EAAAA,YAAU,KACJoF,IAlCgB,MAGpB,MAAMkH,EAAalH,GAAKzE,QAAO1G,IAC7B,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK8E,UAAYuJ,WAAW9N,EAAa,GAAGwE,YACpEuJ,EAAON,GAAMK,WAAWrO,EAAK+E,WAAasJ,WAAW9N,EAAa,GAAGuE,WACrEwB,EACJzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK8E,YACxFjE,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GACjCG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAKvB,OAHAzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAEpCU,GAAciB,EAAgB,IACpCxJ,MAAK,CAACC,EAAGC,IAAMD,EAAEhG,YAAciG,EAAEjG,cAI9BgS,EAAeD,EAClBrL,MAAM,EAAG,GACTjH,KAAIwS,GAAOA,EAAI3Q,OAElB8J,GAAS2G,GACTrG,GAAWsG,GAEX3M,QAAQC,IAAI,iBAAkByM,EAAW,EAOvCG,EACF,GACC,CAACrH,MAmBJpF,EAAAA,EAAAA,YAAU,KACJxF,GAdiB,MACrB,MAAMkS,EAAc5R,KAAKQ,MAAQ,EAAId,EAAa,GAAGgB,MAAM,GAAGR,WAClCR,EAAa,GAAGI,GAAGI,WACnBR,EAAa,GAAGmS,QAAQ3R,YACvB,EAAKR,EAAa,GAAGU,WAAW,GAAGC,kBAAoB,KACxDX,EAAa,GAAG0B,YAAYC,kBAC5B3B,EAAa,GAAG8K,aAAatK,WAC7BR,EAAa,GAAG8B,MAAMtB,YAAc,EAAK,KACrEwL,GAAsBkG,EAAY,EAOhCE,EACF,KAsBF5M,EAAAA,EAAAA,YAAU,KACJxF,GAhBiB,MAErB,IACkBqM,WACd,MAAM,KAAEjL,SAAekL,EAAAA,GAAAA,IAAU,gBACjClH,QAAQC,IAAI,iBAAkBjE,GAC9B0K,GAAU1K,EAAK,EAEjBgO,EAIF,CAHE,MAAO5C,GACPzN,GAAU,GACVqG,QAAQC,IAAImH,EACd,GAKE6F,EACF,GACC,CAACrS,KA6BJwF,EAAAA,EAAAA,YAAU,KACJqG,IA1BkB,MAGtB,MAAMyG,EAAezG,GAAO1F,QAAO1G,IACjC,MAAMoO,EAAOJ,GAAMK,WAAWrO,EAAK8E,UAAYuJ,WAAW9N,EAAa,GAAGwE,YACpEuJ,EAAON,GAAMK,WAAWrO,EAAK+E,WAAasJ,WAAW9N,EAAa,GAAGuE,WACrEwB,EACNzF,KAAK0N,IAAIH,EAAO,GAAKvN,KAAK0N,IAAIH,EAAO,GACrCvN,KAAK2N,IAAIR,GAAMK,WAAW9N,EAAa,GAAGwE,aAAelE,KAAK2N,IAAIR,GAAMK,WAAWrO,EAAK8E,YACxFjE,KAAK0N,IAAID,EAAO,GAAKzN,KAAK0N,IAAID,EAAO,GAC/BG,EAAI,EAAI5N,KAAK6N,MAAM7N,KAAK8N,KAAKrI,GAAIzF,KAAK8N,KAAK,EAAIrI,IAC/CsI,EAAab,GAAIU,EAKvB,OAHAzO,EAAK6O,iBAAmBD,EACxB5O,EAAKM,YAAcO,KAAKC,MAAM8N,EAAaV,IAEpCU,GAAcd,EAAgB,IACpCzH,MAAK,CAACE,EAAGD,IAAMC,EAAEjG,YAAcgG,EAAEhG,cAGpCgM,GAAWuG,GACXlN,QAAQC,IAAI,mBAAoBiN,EAAa,EAM3CC,EACF,GACC,CAAC1G,MAMJrG,EAAAA,EAAAA,YAAU,KACR8C,GAAiBkK,GAAc,IAAIA,EAAWrK,EAASsK,WAAU,GAChE,CAACtK,IAqBJ,OAJA3C,EAAAA,EAAAA,YAAU,KACRJ,QAAQC,IAAK,8BAA6BkD,IAAiB,GAC1D,CAACA,KAIF,+BACE,qBAAStJ,UAAU,0CAAyC,WAC1D,gBAAKA,UAAU,cAAa,UAC1B,SAACyT,EAAA,EAAW,CACVC,aAAa,eAGjB,gBAAK1T,UAAU,aAAY,UACzB,SAAC2T,EAAA,EAAa,CACZpK,kBAAmBA,EACnBD,eAAgBA,EAChBE,cAAeA,EACfC,iBAAkBA,OAGtB,SAACmK,EAAA,EAAY,CACXnK,iBAAkBA,EAClBC,aAAcA,EACdH,kBAAmBA,EACnBI,gBAAiBA,EACjBE,SAAUA,KAEZ,gBAAK7J,UAAU,wCAAuC,UACpD,eAAIU,QAAS,IAAON,EAAS,mBAAmB,mCAElD,iBAAKJ,UAAU,4BAA2B,WACxC,iBAAKA,UAAU,eAAc,WAC3B,eAAIA,UAAU,WAAWU,QAAS,IAAMyJ,EAAmB,qBAAsB0J,MAAO,CAAEC,eAAoC,sBAApB5J,EAA0C,wBAA0B,OAAQ6J,oBAAyC,sBAApB7J,EAA0C,QAAU,UAAW/F,WAAgC,sBAApB+F,EAA0C,MAAQ,OAAQ,gCAChV,eAAIlK,UAAU,WAAWU,QAAS,IAAMyJ,EAAmB,oBAAqB0J,MAAO,CAAEC,eAAoC,qBAApB5J,EAAyC,wBAA0B,OAAQ6J,oBAAyC,qBAApB7J,EAAyC,QAAU,UAAW/F,WAAgC,qBAApB+F,EAAyC,MAAQ,OAAS,kCAE/U,eAAIlK,UAAU,wBAAwBU,QAAS,IAAMsT,OAAOC,QAAQ,6BAGjD,sBAApB/J,GACC,qBAASlK,UAAU,mBAAkB,UAElCqE,GACC,qBAASrE,UAAU,iCAAgC,WACjD,gBAAKA,UAAU,iBAAiBkU,IAAK7P,EAAa8P,MAAOC,IAAI,oBAE7D,gBAAKpU,UAAU,mBAAkB,UAC/B,iBAAKA,UAAU,iBAAgB,WAC7B,iBAAKA,UAAU,kBAAiB,WAC9B,iBAAKA,UAAU,mBAAkB,WAC/B,wBAAKqE,EAAajC,QAClB,yBAAI,SAAC,KAAa,CAACC,MAAOgC,EAAagQ,MAAOC,YAAa,OAAQC,mBAAmB,EAAMC,OAAQ,eAEtG,wBAAKnQ,EAAaoQ,cAEpB,iBAAKzU,UAAU,kBAAiB,WAC9B,iBAAKA,UAAU,sBAAqB,WAClC,0CAAQqE,EAAaqQ,SACrB,0CAAQrQ,EAAakD,YAEvB,iBAAKvH,UAAU,yBAAwB,WACrC,4CAAUqE,EAAasQ,aACvB,4CAAUtQ,EAAauQ,cACvB,4CAAUvQ,EAAawQ,8BAU/B,IAEJ,qBAAS7U,UAAU,0CAAyC,WAC1D,iBAAKA,UAAU,qBAAqBU,QAAS,IAAM2J,GAAmBD,GAAgB,WACpF,8CACA,gBAAKpK,UAAU,cAAa,SACzBoK,GAAiB,+BAAa,mCAGjCrJ,GAAgBqJ,GAChB,SAAC,EAAe,CACdlI,mBAAoBA,GACpBnB,aAAcA,IAEd,IACJ,eAAIf,UAAU,yBACd,iBAAKA,UAAU,qBAAqBU,QAAS,IAAM6J,GAAkBD,GAAe,WAClF,+CACA,gBAAKtK,UAAU,cAAa,SACzBsK,GAAgB,+BAAa,mCAIjCA,GACC,SAAC,EAAgB,CACfpK,aAAcA,GACdC,eAAgBA,KAEhB,IACJ,eAAIH,UAAU,yBACd,iBAAKA,UAAU,qBAAqBU,QAAS,IAAM+J,GAAqBD,GAAkB,WACxF,kDACA,gBAAKxK,UAAU,cAAa,SACzBwK,GAAmB,+BAAa,mCAGpCA,GACC,SAAC,EAAmB,CAClBpL,aAAcA,GACdC,SAAUA,GACVC,eAAgBA,GAChBC,MAAOA,GACPC,SAAUA,GACVC,cAAeA,GACfC,iBAAkBA,GAClBC,MAAOA,GACPC,QAASA,KAET,IACJ,eAAII,UAAU,yBACd,iBAAKA,UAAU,qBAAqBU,QAAS,IAAMiK,IAAqBD,IAAkB,WACxF,kDACA,gBAAK1K,UAAU,cAAa,SACzB0K,IAAmB,+BAAa,mCAGpCA,IACC,SAAC,EAAmB,CAClB3J,aAAcA,EACdC,OAAQA,GACRC,QAASA,KAET,IAEJ,eAAIjB,UAAU,yBACd,iBAAKA,UAAU,qBAAqBU,QAAS,IAAMmK,IAAyBD,IAAsB,WAChG,sDACA,gBAAK5K,UAAU,cAAa,SACzB4K,IAAuB,+BAAa,mCAGxCA,IACC,SAAC,EAAuB,CACtB7J,aAAcA,IAEd,SAMc,qBAApBmJ,GACA,qBAASlK,UAAU,mBAAkB,WACnC,SAAC8U,EAAA,EAAoB,CACnB9H,gBAAiBA,GACjBC,mBAAoBA,KAGD,oBAApBD,IACC,SAAC+H,EAAA,EAAc,CACb/J,aAAcA,GACdC,gBAAiBA,GACjB5G,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAGM,sBAApBiM,IACA,SAACgI,EAAA,EAAgB,CACf5J,eAAgBA,GAChBC,kBAAmBA,GACnBhH,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAGM,gBAApBiM,IACA,SAACiI,EAAA,EAAiB,CAChB7V,aAAcA,GACd4M,gBAAiBA,GACjB3H,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAGM,YAApBiM,IACA,SAACkI,EAAA,EAAc,CACb3V,MAAOA,GACP0M,SAAUA,GACV5H,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAGM,iBAApBiM,IACA,SAACmI,EAAA,EAAkB,CACjB1V,cAAeA,GACf0M,iBAAkBA,GAClB9H,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAGM,QAApBiM,IACA,SAACoI,EAAA,EAAS,CACRhJ,IAAKA,GACLC,OAAQA,GACRhI,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAGM,SAApBiM,IACA,SAACqI,EAAA,EAAU,CACT1V,MAAOA,GACPuM,SAAUA,GACV7H,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAGM,UAApBiM,IACA,SAAC,EAAW,CACVhM,OAAQA,GACRuD,UAAWA,GACXF,aAAcA,EACdC,SAAU,aACVvD,aAAcA,IAEd,MAGE,cAApBmJ,GACA,+BACE,SAACoL,EAAA,QAAa,CACZ9L,cAAeA,EACfC,iBAAkBA,EAClBH,eAAgBA,MAMC,eAAnBA,GAEA,+BACE,SAACiM,EAAA,QAAe,CACd1L,SAAUA,EACVqD,aAAcA,OAMhB,OAMX,C","sources":["components/whiteLabel/propertyDetails/componentHighlights/LifestyleHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/SchoolHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/TransportHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/NeighbourhoodHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/PropertySummary.js","components/whiteLabel/propertyDetails/componentDetails/TubeDetails.js","components/whiteLabel/propertyDetails/SinglePropertySummary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\n\nconst LifestyleHighlights = ({ restaurants1, cuisines, topRestaurants, gyms1, mainGyms, supermarkets1, mainSupermarkets, pubs1, topPubs }) => {\n\n  // ? Section 1: Define states\n\n  // state for errors\n  const [errors, setErrors] = useState()\n\n\n  return (\n\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Restaurants</h5>\n            {restaurants1 ? \n              <>\n                <h5>🍽 {restaurants1.length} restaurants within 15 mins walk</h5>\n                <h5>🍽 more than {cuisines} cuisines available</h5>\n                <h5>🍽 {topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</h5>\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Pubs</h5>\n            {pubs1 ? \n              <>\n                <h5>🍺 {pubs1.length} pubs within 15 mins walk</h5>\n                <h5>🍺 {topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</h5>\n              </>\n              : '' }\n          </div>\n        </div>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Fitness</h5>\n            {gyms1 ? \n              <>\n                <h5>🏋️‍♂️ {gyms1.length} gyms within 15 mins walk</h5>\n                {mainGyms.length === 3 ? <h5>🏋️‍♂️ includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</h5> : mainGyms.length === 2 ? <h5>🏋️‍♂️ includes {mainGyms[0]} & {mainGyms[1]} </h5> : mainGyms.length === 1 ? <h5>🏋️‍♂️ includes {mainGyms[0]}</h5> : '' }\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Supermarkets</h5>\n            {supermarkets1 ? \n              <>\n                <h5>🛒 {supermarkets1.length} supermarkets within 15 mins walk</h5>\n                {mainSupermarkets.length === 3 ? <h5>🛒 includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</h5> : mainSupermarkets.length === 2 ? <h5>🛒 includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </h5> : mainSupermarkets.length === 1 ? <h5>🛒 includes {mainSupermarkets[0]}</h5> : '' }\n              </>\n              : '' }\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default LifestyleHighlights","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\nconst SchoolHighlights = ({ topPrimaries, topSecondaries }) => {\n\n  // ? Section 1: Define states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n\n\n  return (\n\n    <>\n      <section className='school-highlights'>\n        <div className='school-block'>\n          <h5 className='block-title'>Primary schools</h5>\n          <div className='school-table-headers'>\n            <h5 id='column1'>#</h5>\n            <h5 id='column2'>School name</h5>\n            <h5 id='column3'>Ofsted</h5>\n            <h5 id='column4'>Catchment</h5>\n            <h5 id='column5'>Distance</h5>\n          </div>\n          <div className='school-table-details'>\n            {topPrimaries ? topPrimaries.map((item, index) => {\n              return (\n                <>\n                  <div className='school-content'>\n                    <div className='column' id='column1'>\n                      <h5>{index + 1}</h5>\n                    </div>\n                    <div className='column' id='column2'>\n                      <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)} >{item.school_name}</h5>\n                    </div>\n                    <div className='column' id='column3'>\n                      {item.ofsted_results !== null ? <h5>{item.ofsted_results}</h5> : <h5>N/a</h5>}\n                    </div>\n                    <div className='column' id='column4'>\n                      <h5>{item.within_catchment}</h5>\n                    </div>\n                    <div className='column' id='column5'>\n                      <h5>{item.walkTimeMin} mins</h5>\n                    </div>\n                  </div>\n        \n                </>\n              )\n            }) : ''}\n          </div>\n        </div>\n        <div className='school-block'>\n          <h5 className='block-title'>Secondary schools</h5>\n          <div className='school-table-headers'>\n            <h5 id='column1'>#</h5>\n            <h5 id='column2'>School name</h5>\n            <h5 id='column3'>Ofsted</h5>\n            <h5 id='column4'>Catchment</h5>\n            <h5 id='column5'>Distance</h5>\n          </div>\n          <div className='school-table-details'>\n            {topSecondaries ? topSecondaries.map((item, index) => {\n              return (\n                <>\n                  <div className='school-content'>\n                    <div className='column' id='column1'>\n                      <h5>{index + 1}</h5>\n                    </div>\n                    <div className='column' id='column2'>\n                      <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)} >{item.school_name}</h5>\n                    </div>\n                    <div className='column' id='column3'>\n                      {item.ofsted_results !== null ? <h5>{item.ofsted_results}</h5> : <h5>N/a</h5>}\n                    </div>\n                    <div className='column' id='column4'>\n                      <h5>{item.within_catchment}</h5>\n                    </div>\n                    <div className='column' id='column5'>\n                      <h5>{item.walkTimeMin} mins</h5>\n                    </div>\n                  </div>\n        \n                </>\n              )\n            }) : ''}\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default SchoolHighlights","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\n\nconst TransportHighlights = ({ postcodeData, tubes1, trains1 }) => {\n\n\n\n\n\n  return (\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Underground & Overground</h5>\n            {tubes1 && tubes1.length > 0 ? \n              <>\n                <h5>🚇 {tubes1.length} tube stations within 20 mins walk</h5>\n                <h5>🚇 {tubes1[0].station_name} is {tubes1[0].walkTimeMin} mins away</h5>\n                {tubes1.length > 2 ? <h5>🚇 {tubes1[1].station_name} and {tubes1[2].station_name} are also nearby</h5> : tubes1.length === 1 ? <h5>🚇 {tubes1[1].station_name} is also nearby</h5> : '' }\n              </>\n              : \n              <h5>🚇 No tube stations within 20 min walk of this property</h5> }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Electric vehicles</h5>\n            {postcodeData ? \n              <>\n                <h5>🚇 {postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</h5>\n                <h5>🚇 in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</h5>\n              </>\n              : '' }\n          </div>\n        </div>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>National Rail</h5>\n            {trains1 && trains1.length > 0 ? \n              <>\n                <h5>🚊 {trains1.length} rail stations within 20 mins walk</h5>\n                <h5>🚊 {trains1[0].station} is {trains1[0].walkTimeMin} mins away</h5>\n                {trains1.length > 2 ? <h5>🚊 {trains1[1].station} and {trains1[2].station} are also nearby</h5> : trains1.length === 2 ? <h5>🚊 {trains1[1].station} is also nearby</h5> : '' }\n              </>\n              : \n              <h5>🚊 No rail stations within 20 min walk of this property</h5> }\n\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default TransportHighlights","\n\n\n\n\nconst NeighbourhoodHighlights = ({ postcodeData }) => {\n\n\n  return (\n\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Green space</h5>\n            {postcodeData ? \n              <>\n                <h5>🌳 within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</h5>\n                <h5>🌳 {postcodeData[0].parks_postcode.park_name0} within {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</h5>\n                {/* {tubes1.length > 2 ? <h5>🚇 {tubes1[1].station_name} and {tubes1[2].station_name} are also nearby</h5> : tubes1.length === 1 ? <h5>🚇 {tubes1[1].station_name} is also nearby</h5> : '' } */}\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Crime</h5>\n            {postcodeData ? \n              <>\n                <h5>🚓 in the lowest {Math.round((postcodeData[0].crime[0].percentile) * 100)}% of areas in London for reported crimes</h5>\n                <h5>🚓 in the lowest {Math.round((postcodeData[0].crime[0].area_specific_percentile) * 100)}% of areas in {postcodeData[0].crime[0].borough} for reported crimes</h5>\n\n              </>\n              : '' }\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default NeighbourhoodHighlights","import { PieChart, Pie, Cell, Label, ResponsiveContainer } from 'recharts'\n\n\n\nconst PropertySummary = ({ neighbourhoodScore, postcodeData }) => {\n\n  // neighbourhood data\n  const data = [\n    { name: 'Score', value: neighbourhoodScore },\n    { name: 'Remainder', value: 100 - neighbourhoodScore }\n  ]\n\n  const COLORS = ['#051885', '#FFA7E5']\n\n\n  // greenspace data\n  const greenspaceData = [\n    { name: 'Score', value: postcodeData[0].parks_lsoa[0].london_percentile },\n    { name: 'Remainder', value: 100 - postcodeData[0].parks_lsoa[0].london_percentile }\n  ]\n\n  // restaurant data\n  const restaurantData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].restaurants.normal_percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].restaurants.normal_percentile) * 100) }\n  ]\n\n  // crime data\n  const crimeData = [\n    { name: 'Score', value: Math.round(postcodeData[0].crime[0].percentile * 100) },\n    { name: 'Remainder', value: Math.round((1 - postcodeData[0].crime[0].percentile) * 100) }\n  ]\n\n\n  // tubes data\n  const tubeData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].tubes.percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].tubes.percentile) * 100) }\n  ]\n\n  const secondariesData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].secondaries.total_score_percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].secondaries.total_score_percentile) * 100) }\n  ]\n\n\n\n  return (\n\n    <>\n      <section className=\"summary-section\">\n        <div className=\"row\">\n\n          {/* Neighbourhood score */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={data}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {data.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${neighbourhoodScore}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>Neighbourhood score</h1>\n            </div> \n          </div>  \n\n          {/* Greenspace stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={greenspaceData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {greenspaceData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${greenspaceData[0].value > 50 ? greenspaceData[1].value : greenspaceData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              {greenspaceData[0].value > 50 ?  <h1>within top {greenspaceData[1].value}% of areas of London for access to greenspace</h1> : <h1>within bottom {greenspaceData[0].value}% of areas of London for access to greenspace</h1>}\n            </div> \n          </div>  \n\n          {/* Secondaries stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={secondariesData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {secondariesData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - secondariesData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {100 - secondariesData[0].value}% of areas of London for secondary schools</h1>\n            </div> \n          </div>  \n\n          {/* Restaurant stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={restaurantData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {restaurantData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - restaurantData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within best {100 - restaurantData[0].value}% of areas of London for number of quality restaurants</h1>\n            </div> \n          </div>  \n\n          {/* <div className=\"row\"> */}\n\n          {/* Crime score */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={crimeData.reverse()}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {crimeData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${crimeData[1].value > 50 ? crimeData[0].value : crimeData[1].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              {(crimeData[1].value) > 50 ? <h1>In the highest {crimeData[0].value}% of areas in London for reported crimes</h1> : <h1>In the lowest {(crimeData[1].value)}% of areas in London for reported crimes</h1>}\n            </div> \n          </div>  \n\n          {/* Tubes stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={tubeData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {tubeData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - tubeData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {100 - tubeData[0].value}% of areas of London for access to tubes</h1>\n            </div> \n          </div>  \n\n          {/* Restaurant stat */}\n          {/* <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={restaurantData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {restaurantData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${restaurantData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {restaurantData[0].value}% of areas of London for restaurants</h1>\n            </div> \n          </div>   */}\n        </div>    \n      </section>\n    \n    </>\n  )\n}\n\nexport default PropertySummary","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst TubeDetails = ({ propertyData, tubes1, listType, setTubes1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [tubeView, setTubeView] = useState('Table')\n\n  // state for storing new tubes data \n  const [tubes2, setTubes2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedTubes, setSelectedTubes] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleTubeClick = (tubes) => {\n    console.log('selectd tubes ->', tubes)\n    setSelectedTubes(tubes)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...tubes1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setTubes1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as tubes1\n      setTubes2([...tubes1])\n    } else {\n      setTubes2(\n        tubes1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.line.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase()) \n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (tubes1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, tubes1])\n\n  \n\n  return (\n    <>\n      {tubes1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Tube stations near {propertyData.name} </h1> : <h1>Tube station long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setTubeView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setTubeView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          {/* <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div> */}\n\n          {tubeView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('station_name')}>\n                  <h5>Station name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>             \n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('line')}>\n                  <h5>Tube line</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>  \n                {/* <div id='column4' className='sort-section' onClick={() => handleSort('line')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>  */}\n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                \n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {tubes2 ? tubes2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.station_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.line}</h5>\n                        </div>\n                        {/* <div className='column' id='column4'>\n                          <h5>{item.line}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n  \n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tubeView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {tubes2 ? tubes2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.station_name}</h5>\n                              <h5>{item.line}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {tubes2 &&\n                    tubes2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.long}\n                        latitude={item.lat}\n                        onClick={() => handleTubeClick(item)}\n\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n                      {selectedTubes ? \n                        <Popup\n                          longitude={selectedTubes.long}\n                          latitude={selectedTubes.lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedTubes(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedTubes.station_name}</h5>\n                              <p>{selectedTubes.line}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {tubes2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(tubes2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default TubeDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'\nimport NavBar from '../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Footer from '../../tools/Footer'\nimport LifestyleHighlights from './componentHighlights/LifestyleHighlights'\nimport SchoolHighlights from './componentHighlights/SchoolHighlights'\nimport TransportHighlights from './componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from './componentHighlights/NeighbourhoodHighlights'\nimport PropertySummary from './componentHighlights/PropertySummary'\nimport PropertyDetailSlider from './helpers/PropertyDetailSlider'\nimport PrimaryDetails from './componentDetails/PrimaryDetails'\nimport SecondaryDetails from './componentDetails/SecondaryDetails'\nimport WhiteSidebar from '../WhiteSidebar'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport RestaurantDetails from './componentDetails/RestaurantDetails'\nimport FitnessDetails from './componentDetails/FitnessDetails'\nimport SupermarketDetails from './componentDetails/SupermarketDetails'\nimport VariablesPage from '../variableSummaries/VariablesPage'\nimport WhiteComparison from '../comparisonSection/WhiteComparison'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from './componentDetails/EVDetails'\nimport PubDetails from './componentDetails/PubDetails'\nimport TubeDetails from './componentDetails/TubeDetails'\n\nconst SinglePropertySummary = () => {\n\n  // ? Section 1: Define states\n  // state for switching page\n  const { postcode } = useParams()\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n  \n  // state for handling moving back between pages\n  const location = useLocation()\n  const [historyStack, setHistoryStack] = useState([])\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('My properties')\n  const [profileDetail, setProfileDetail] = useState('My properties')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for company data\n  const [company, setCompany] = useState()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for what information is shown\n  const [propertyContent, setPropertyContent] = useState('Property overview')\n\n  // states for opening and closing the sections\n  const [summarySection, setSummarySection] = useState(true)\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants]  = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  // neghbourhood score\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  // slider selection\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  // set state for lisrt of properties\n  const [propertyList, setPropertyList] = useState()\n\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${postcode}`)\n        console.log('postcode data ->', data)\n        setPostcodes(data)\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPostcodeData()\n  }, [])\n\n\n\n\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    if (postcodeData) {\n      loadUserData()\n    }\n  }, [postcodeData])\n\n\n\n  // load current property based on the company and postcode\n  const loadProperties = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getProperties = async () => {\n        const { data } = await axios.get(`/api/white_properties/${company}`, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        const matchedProperty = data.find(item => item.postcode === postcode)\n        setPropertyData(matchedProperty)\n        console.log('current-property ->', matchedProperty)\n      }\n      getProperties()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    if (userData) {\n      loadProperties()\n    }\n  }, [userData])\n\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n  \n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n\n      // handle independent schools\n      if (item.school_type ===  'Independent school') {\n        item.within_catchment =  'N/a'\n\n      // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n\n      // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n      // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n\n      // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n      \n      // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n\n      // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n\n      // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n      \n      // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n  \n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      }  else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n      // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n      // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n      // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n      // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n      // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n  \n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n  \n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n    \n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n    // extract the key studios\n    const topThreeStudios = []\n  \n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n        \n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n    \n    // extract the key studios\n    const topThreeSupermarkets = []\n  \n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_store_name)) {\n        topThreeSupermarkets.push(supermarket.supermarket_store_name)\n        uniqueSupermarkets.add(supermarket.supermarket_store_name)\n        \n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    console.log('Nearby supermarkets ->', nearbySupermarkets)\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n  \n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n    \n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n  \n  // function for restaurants with least walking distance\n  const getNearbyChargers = () => {\n\n    // Average walking speed is 5km/h. \n    const walkDistanceKm10 = 5 * (10 / 60)\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyChargers = ev.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm10\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n\n    setEv1(nearbyChargers)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (ev) {\n      getNearbyChargers()\n    }\n  }, [ev])\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  \n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n  \n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Calculate a neighbourhood score\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n                                postcodeData[0].ev.percentile +\n                                postcodeData[0].fitness.percentile +\n                                (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n                                postcodeData[0].restaurants.normal_percentile +\n                                postcodeData[0].supermarkets.percentile +\n                                postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n  \n\n\n  // ? Section 12: Load and sort tubes data\n  const loadTrainsData = () => {\n  // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n  \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n      Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n  \n\n    setTrains1(nearbyTrains)\n    console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n  // ?Section 13: Other helpful functions\n  // handle moving to the oprevious page\n  // When location changes, add the new location to the history stack\n  useEffect(() => {\n    setHistoryStack((prevStack) => [...prevStack, location.pathname])\n  }, [location])\n\n\n  // To navigate back:\n  const goBack = () => {\n    // Remove the current location from the stack\n    const newStack = [...historyStack]\n    newStack.pop()\n    setHistoryStack(newStack)\n\n    // Get the last location from the new stack\n    const lastLocation = newStack[newStack.length - 1]\n\n    // Navigate to the last location, or to a default location if the stack is empty\n    navigate(lastLocation || '/')\n  }\n\n  useEffect(() => {\n    console.log(`profileContent updated to: ${profileContent}`)\n  }, [profileContent])\n\n  return (\n\n    <>\n      <section className='agent-specific-property print-container' >\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />\n        <div className='go-back-button no-print remove-margin'>\n          <h5 onClick={() =>  navigate('/agents/profile')}>&lt;- back to profile</h5>\n        </div>\n        <div className='property-options no-print'>\n          <div className='left-section'>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property overview')} style={{ textDecoration: propertyContent === 'Property overview' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property overview' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property overview' ? '700' : '400' }}>Property overview</h5>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property details')} style={{ textDecoration: propertyContent === 'Property details' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property details' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property details' ? '700' : '400'  }}>Property details</h5>\n          </div>\n          <h1 className='print-button no-print' onClick={() => window.print()}>🖨</h1>\n        </div>\n\n        {propertyContent === 'Property overview' ?\n          <section className='property-wrapper'>\n\n            {propertyData ?\n              <section className='property-details remove-margin'>\n                <img className='property-image' src={propertyData.image} alt='property-image' />\n\n                <div className='property-content'>\n                  <div className='content-blocks'>\n                    <div className='content-summary'>\n                      <div className='content-top-line'>\n                        <h1>{propertyData.name}</h1>\n                        <h1><NumericFormat value={propertyData.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /></h1>\n                      </div>\n                      <h3>{propertyData.address}</h3>\n                    </div>\n                    <div className='content-details'>\n                      <div className='content-details-top'>\n                        <h4>🏠 {propertyData.type}</h4>\n                        <h4>📦 {propertyData.size}</h4>\n                      </div>\n                      <div className='content-details-bottom'>\n                        <h4>🛌 x {propertyData.bedrooms}</h4>\n                        <h4>🛁 x {propertyData.bathrooms}</h4>\n                        <h4>🛋 x {propertyData.living_rooms}</h4>\n                      </div>\n                    </div>\n\n\n                  </div>\n\n\n                </div>\n              </section>\n              : '' }\n\n            <section className='property-summary-sections remove-margin'>\n              <div className='property-highlight' onClick={() => setSummarySection(!summarySection)}>\n                <h3>Property Summary</h3>\n                <div className='click-downs'>\n                  {summarySection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              { postcodeData && summarySection ?\n                <PropertySummary \n                  neighbourhoodScore={neighbourhoodScore}\n                  postcodeData={postcodeData}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School Highlights</h3>\n                <div className='click-downs'>\n                  {schoolSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n\n              {schoolSection ? \n                <SchoolHighlights \n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle Highlights</h3>\n                <div className='click-downs'>\n                  {lifestyleSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {lifestyleSection ? \n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport Highlights</h3>\n                <div className='click-downs'>\n                  {transportSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {transportSection ? \n                <TransportHighlights \n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                  trains1={trains1}\n                />\n                : '' }\n\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhood Highlights</h3>\n                <div className='click-downs'>\n                  {neighbourhoodSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {neighbourhoodSection ? \n                <NeighbourhoodHighlights \n                  postcodeData={postcodeData}\n                />\n                : '' }\n\n            </section>\n\n          </section>\n\n          : propertyContent === 'Property details' ?\n            <section className='property-wrapper'>\n              <PropertyDetailSlider \n                sliderSelection={sliderSelection}\n                setSliderSelection={setSliderSelection}\n              />\n\n              {sliderSelection === 'Primary schools' ? \n                <PrimaryDetails\n                  primaryData1={primaryData1}\n                  setPrimaryData1={setPrimaryData1}\n                  propertyData={propertyData}\n                  listType={'short list'}\n                  postcodeData={postcodeData}\n                />\n\n                : sliderSelection === 'Secondary schools' ?\n                  <SecondaryDetails\n                    secondaryData1={secondaryData1}\n                    setSecondaryData1={setSecondaryData1}\n                    propertyData={propertyData}\n                    listType={'short list'}\n                    postcodeData={postcodeData}\n                  />\n              \n                  : sliderSelection === 'Restaurants' ?\n                    <RestaurantDetails\n                      restaurants1={restaurants1}\n                      setRestaurants1={setRestaurants1}\n                      propertyData={propertyData}\n                      listType={'short list'}\n                      postcodeData={postcodeData}\n                    />\n              \n                    : sliderSelection === 'Fitness' ?\n                      <FitnessDetails\n                        gyms1={gyms1}\n                        setGyms1={setGyms1}\n                        propertyData={propertyData}\n                        listType={'short list'}\n                        postcodeData={postcodeData}\n                      />\n              \n                      : sliderSelection === 'Supermarkets' ?\n                        <SupermarketDetails\n                          supermarkets1={supermarkets1}\n                          setSupermarkets1={setSupermarkets1}\n                          propertyData={propertyData}\n                          listType={'short list'}\n                          postcodeData={postcodeData}\n                        />\n              \n                        : sliderSelection === 'EVs' ?\n                          <EVDetails\n                            ev1={ev1}\n                            setEv1={setEv1}\n                            propertyData={propertyData}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                          />\n              \n                          : sliderSelection === 'Pubs' ?\n                            <PubDetails\n                              pubs1={pubs1}\n                              setPubs1={setPubs1}\n                              propertyData={propertyData}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                            />\n              \n                            : sliderSelection === 'Tubes' ?\n                              <TubeDetails\n                                tubes1={tubes1}\n                                setTubes1={setTubes1}\n                                propertyData={propertyData}\n                                listType={'short list'}\n                                postcodeData={postcodeData}\n                              />\n                              : '' }\n                \n            </section>\n            : propertyContent === 'Variables' ?\n              <>\n                <VariablesPage \n                  profileDetail={profileDetail}  \n                  setProfileDetail={setProfileDetail}\n                  profileContent={profileContent}\n                />\n    \n  \n          \n              </>\n              : profileContent === 'Comparison' ?\n\n                <>\n                  <WhiteComparison\n                    userData={userData}\n                    propertyList={propertyList}\n\n                  />\n             \n                </>\n\n                : '' \n\n        }\n\n\n      </section>\n    </>\n  )\n\n\n}\n\nexport default SinglePropertySummary"],"names":["restaurants1","cuisines","topRestaurants","gyms1","mainGyms","supermarkets1","mainSupermarkets","pubs1","topPubs","errors","setErrors","useState","className","length","topPrimaries","topSecondaries","navigate","useNavigate","id","map","item","index","onClick","school_name","ofsted_results","within_catchment","walkTimeMin","postcodeData","tubes1","trains1","station_name","ev","ev_10_mins","Math","round","percentile","station","parks_lsoa","london_percentile","parks_postcode","park_name0","ceil","distance0","crime","area_specific_percentile","borough","neighbourhoodScore","data","name","value","COLORS","greenspaceData","restaurantData","restaurants","normal_percentile","crimeData","tubeData","tubes","secondariesData","secondaries","total_score_percentile","PieChart","width","height","Pie","cx","cy","innerRadius","outerRadius","fill","paddingAngle","dataKey","startAngle","entry","Cell","endAngle","Label","position","fontSize","fontWeight","reverse","propertyData","listType","setTubes1","tubeView","setTubeView","tubes2","setTubes2","selectedTubes","setSelectedTubes","sortField","setSortField","sortDirection","setSortDirection","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","console","log","parseInt","target","useEffect","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","cleansed_name","toLowerCase","includes","line","size","slice","onMouseEnter","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","long","lat","handleTubeClick","closeOnClick","onClose","pageCount","onPageChange","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","Loading","postcode","useParams","location","useLocation","historyStack","setHistoryStack","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","setPostcodes","userData","setUserData","setPropertyData","company","setCompany","propertyContent","setPropertyContent","summarySection","setSummarySection","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","primaryData","setPrimaryData","primaryData1","setPrimaryData1","secondaryData","setSecondaryData","secondaryData1","setSecondaryData1","setTopPrimaries","setTopSecondaries","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","setEv","setRestaurants1","setGyms1","setPubs1","setSupermarkets1","ev1","setEv1","setCuisines","setTopRestaurants","setTopPubs","setMainGyms","setMainSupermarkets","setTubes","trains","setTrains","setTrains1","setNeighbourhoodScore","sliderSelection","setSliderSelection","propertyList","setPropertyList","async","axios","getPostcode","error","loadPostcodeData","isUserAuth","getUserToken","headers","Authorization","getAccessToken","getUser","loadUserData","matchedProperty","find","getProperties","loadProperties","getPrimaries","loadPrimaryData","walkDistanceKm20","R","toRad","PI","kmPerMinute","nearbyPrimaries","dLat","parseFloat","dLon","sin","cos","c","atan2","sqrt","distanceKm","distance_between","distancePercent","max_distance","school_type","additional_status","firstSchoolNames","getNearbyPrimaries","getSecondaries","loadSecondaryData","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","getNearbySecondaries","getData","loadRestaurantData","walkDistanceKm15","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","restaurant_name","Set","countUniqueCuisines","getNearbyRestaurants","loadFitnessData","specificGyms","uniqueGyms","nearbyStudios","Lat","topThreeStudios","i","gym","gym_group","has","push","add","getNearbyStudios","loadSupermarketData","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","supermarket_store_name","getNearbySupermatkets","loadTubesData","nearbyTubes","getNearbyTubes","loadEVdata","nearbyChargers","getNearbyChargers","loadPubsData","nearbyPubs","topThreePubs","pub","getNearbyPubs","calculation","fitness","calculateScore","loadTrainsData","nearbyTrains","getNearbyTrains","prevStack","pathname","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","style","textDecoration","textUnderlineOffset","window","print","src","image","alt","price","displayType","thousandSeparator","prefix","address","type","bedrooms","bathrooms","living_rooms","PropertyDetailSlider","PrimaryDetails","SecondaryDetails","RestaurantDetails","FitnessDetails","SupermarketDetails","EVDetails","PubDetails","VariablesPage","WhiteComparison"],"sourceRoot":""}