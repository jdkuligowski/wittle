{"version":3,"file":"static/js/84.bb38c56a.chunk.js","mappings":"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","sources":["components/tools/NavBar.js","components/tools/Timeline3.js","components/tools/WhiteNavbar.js","components/wittleSearch/Lifestyle.js"],"sourcesContent":["import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst NavBar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  const responseMessage = (response) => {\n    console.log(response)\n  }\n\n  const errorMessage = (error) => {\n    console.log(error)\n  }\n\n\n  // post google information for authentication\n  const googleLogin = async (response) => {\n    try {\n      // await axios.post('/api/auth/google/', registerData)\n      const auth = { 'auth_token': response.credential }\n      console.log(auth)\n      const { data } = await axios.post('/api/auth/google/', {\n        body: JSON.stringify(auth),\n      })\n      console.log(data)\n    } catch (err) {\n      setErrors(err)\n      console.log(err)\n      console.log(err.response.data)\n    }\n  }\n\n  return (\n    <>\n      <section className='nav-section' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n          <h4 onClick={() => navigate('/agents')} className='agent-button'>For agents</h4>\n          <h4 onClick={() => navigate('/blogs/school-search-simplified')} className='agent-button'>Insights</h4>\n        </div>\n        <div className='menu-container' onClick={handleMenuShow}>\n          <div className=\"menu-trigger\">\n            <span>\n              <div className='burger-icon'>\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n              </div>\n            </span>\n          </div>\n        </div>\n        <button className='agent-login'>Agent login</button>\n      </section>\n      <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      />\n    </>\n  )\n\n}\n\nexport default NavBar","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\n\n\n\nconst Timeline3 = () => {\n\n\n\n\n  return (\n    <section className='property-search-wrapper'>\n      <div className='timeline-bar-3'>\n        <div className='progress-circles-3'>\n          <div className='milestone-1'>\n            <h1></h1>\n          </div>\n          <div className='milestone-2'>\n            <h1></h1>\n          </div>\n          <div className='milestone-3'>\n            <h1></h1>\n          </div>\n          <div className='milestone-4'>\n            <h1></h1>\n          </div>\n          <div className='milestone-5'>\n            <h1></h1>\n          </div>\n        </div>\n      </div>\n      <div className='timeline-background-3'>\n        {/* <h1>.</h1> */}\n      </div>\n    </section>\n  )\n\n}\n\nexport default Timeline3","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst WhiteNavbar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='nav-section no-print' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n        </div>\n    \n        {isUserAuth() ?\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={removeItemFromStorage}><a>Sign out</a></h3>\n          </div>\n\n          :\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={() => navigate('/login')}><a>Sign in</a></h3>\n          </div>\n\n        }\n      </section>\n\n    </>\n  )\n\n}\n\nexport default WhiteNavbar","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport Modal from 'react-modal'\n\nimport Timeline3 from '../tools/Timeline3'\nimport NavBar from '../tools/NavBar'\nimport WhiteNavbar from '../tools/WhiteNavbar'\n\n\n\nconst Lifestyle = () => {\n\n  // set states for buttons being activated \n  const [anySupermarket, setAnySupermarket] = useState(true)\n  const [specificSupermarket, setSpecificSupermarket] = useState(false)\n\n  // set state for the number of true values in hospitality\n  const [truths, setTruths] = useState()\n\n\n  // states for filling out the form\n  const [formData, setFormData] = useState({\n    start_search: true,\n    search_name: '',\n    search_type: 'Wittle',\n    search_channel: 'Buying',\n    restaurant_selection: false,\n    restaurant_decision: '',\n    restaurant_distance: 10,\n    restaurant_cuisine_1: '',\n    restaurant_cuisine_2: '',\n    takeaway_selection: false,\n    takeaway_decision: '',\n    takeaway_distance: 10,\n    takeaway_cuisine_1: '',\n    takeaway_cuisine_2: '',\n    pubs_selection: false,\n    pubs_distance: 10,\n    cafes_selection: '',\n    cafes_decision: '',\n    cafes_detail: '',\n    cafes_distance: 10,\n    tube_selection: false,\n    tube_decision: '',\n    tube_detail: '',\n    tube_distance: 10,\n    train_selection: false,\n    train_decision: '',\n    train_detail: '',\n    train_distance: 10,\n    primary_selection: false,\n    primary_religion: '',\n    primary_mode: '',\n    primary_distance: 10,\n    college_selection: false,\n    college_religion: '',\n    college_mode: '',\n    college_distance: 10,\n    secondary_selection: false,\n    secondary_religion: '',\n    secondary_mode: '',\n    secondary_distance: 10,\n    supermarket_selection: false,\n    supermarket_decision: '',\n    supermarket_segment: '',\n    supermarket_size: '',\n    supermarket_distance: 10,\n    gym_selection: false,\n    gym_studio_name: '',\n    gym_class_type: '',\n    gym_distance: 10,\n    park_selection: false,\n    park_type: '',\n    park_distance: 10,\n    workplace_selection: false,\n    workplace_detail: '',\n    workplace_transport: '',\n    workplace_distance: 10,\n    family_selection: false,\n    family_detail_1: '',\n    family_distance_1: 10,\n    family_detail_2: '',\n    family_distance_2: 0,\n    family_detail_3: '',\n    family_distance_3: 0,\n    family_mode_1: '',\n    family_mode_2: '',\n    family_mode_3: '',\n    property_price_min: '0',\n    property_price_max: '10000000',\n    property_bed_min: '0',\n    property_bed_max: '5',\n    property_type: 'Any',\n    owner: 31,\n  })\n\n  // get form data from storage\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem('wittle-form-input'))\n    if (data) setFormData(data)\n  }, [])\n\n  // check the number of elements populated - to be used in the logic to fill the page\n  const checkingState = () => {\n    const array = [formData.supermarket_selection, formData.gym_selection, formData.park_selection, formData.workplace_selection]\n    const count = array.filter(Boolean).length\n    setTruths(count)\n  }\n\n  // carry out the calculation for checking the number of true elements populated\n  useEffect(() => {\n    checkingState()\n  })\n\n  // general update for drop down menus and text fields\n  const handleChange = e => {\n    if (e.target.name === 'workplace_detail') {\n      const removeSpace = e.target.value.replace(/\\s+/g, '')\n      setFormData({ ...formData, [e.target.name]: removeSpace })\n    } else {\n      setFormData({ ...formData, [e.target.name]: e.target.value })\n    }\n  }\n\n  // define function to set state to storage\n  const setStateToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-form-input', JSON.stringify(formData))\n  }\n\n  // execute setting state to local storage\n  useEffect(() => {\n    // if (formData) {\n    setStateToLocalStorage()\n    // }\n  }, [formData])\n\n\n  return (\n    <section className='main-form-pages'>\n      <WhiteNavbar />\n      <section className='form-input-page'>\n        {/* Top section of the page with header and timeline bar */}\n        <section className='title-section'>\n          <h1>Now for the detail</h1>\n          <Timeline3 />\n          <div className='form-selections-large'>\n            {formData.restaurant_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Restaurants</button> : ''}\n            {formData.cafes_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Cafes</button> : ''}\n            {formData.takeaway_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Takeaways</button> : ''}\n            {formData.pubs_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Pubs & Bars</button> : ''}\n            {formData.tube_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Tubes</button> : ''}\n            {formData.train_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Trains</button> : ''}\n            {formData.supermarket_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Supermarkets</button> : ''}\n            {formData.gym_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Gyms</button> : ''}\n            {formData.park_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Parks</button> : ''}\n            {formData.workplace_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Workplace</button> : ''}\n            {formData.primary_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Primary Schools</button> : ''}\n            {formData.secondary_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Secondary Schools</button> : ''}\n            {formData.college_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>6th Forms</button> : ''}\n            {formData.family_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Friends & Family</button> : ''}\n          </div>\n          <div className='form-selections-small'>\n            {formData.restaurant_selection || formData.cafes_selection || formData.takeaway_selection || formData.pubs_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Hospitality</button> : ''}\n            {formData.train_selection || formData.tube_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Travel</button> : ''}\n            {formData.supermarket_selection || formData.gym_selection || formData.park_selection || formData.workplace_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Lifestyle</button> : ''}\n            {formData.primary_selection || formData.secondary_selection || formData.college_selection || formData.family_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Family</button> : ''}\n\n          </div>\n        </section>\n        <section className='main-content-detail'>\n          <div className='form-selection'>\n            <h1>Lifestyle</h1>\n\n            {/* Split out logic for when different lifestyle options are selected */}\n            {/* Supermarkets selected or not */}\n            {formData.supermarket_selection ?\n              <div className='form-filling-section-1' id='supermarket-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left'>\n                    <h3>Supermarkets</h3>\n                    <p>Do you care where you do your shopping, or just want to get it done asap?</p>\n                    <div className='button-selectors' name='supermarket_decision' onClick={() => {\n                      setAnySupermarket(!anySupermarket); setSpecificSupermarket(!specificSupermarket)\n                    }}>\n                      <button id='any' style={{ backgroundColor: !anySupermarket ? 'rgba(255, 167, 229, 0.2)' : 'rgba(255, 167, 229, 1)' }}>Any supermarket</button>\n                      <button id='specific' style={{ backgroundColor: !specificSupermarket ? 'rgba(255, 167, 229, 0.2)' : 'rgba(255, 167, 229, 1)' }}>Specific supermarket</button>\n                    </div>\n                    {specificSupermarket ?\n                      <>\n                        <p className='cuisine-choice'>Choose the type of supermarket</p><div className='cuisine-dropdowns'>\n                          <select className='form-control' id='cuisine-drop-1' placeholder='Pick cuisine' name='supermarket_segment' onChange={handleChange}>Pick supermarket\n                            <option>Pick supermarket</option>\n                            <option>Budget</option>\n                            <option>Convenience</option>\n                            <option>Mainstream</option>\n                            <option>Premium</option>\n                          </select>\n                        </div>\n                      </>\n                      : ''}\n                    <p className='distance-text'>Do you mind how big the store is?</p>\n                    <select className='form-control' id='cuisine-drop-2' placeholder='Pick cuisine' name='supermarket_size' onChange={handleChange}>Pick supermarket\n                      <option>Select option</option>\n                      <option>Don&apos;t mind</option>\n                      <option>Small </option>\n                      <option>Medium</option>\n                      <option>Large</option>\n                    </select>\n                    <p className='distance-text'>How far do you want to walk to get to it?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, supermarket_distance: e.target.value })}\n                        name={formData.supermarket_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.supermarket_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='supermarket-image'>\n\n                  </div>\n                </div>\n              </div>\n\n              : ''}\n\n            {/* Gyms selected or not */}\n            {/* Gyms and supermarkets selected - gym needs to sit on right */}\n            {formData.gym_selection & formData.supermarket_selection ?\n              <div className='form-filling-section-2' id='gym-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-right'>\n                    <h3>Gyms</h3>\n                    <p>Where do you like to train?</p>\n                    {/* <p className='cuisine-choice'>Select a gym/studio</p> */}\n                    <div className='cuisine-dropdowns'>\n                      <select className='form-control' id='cuisine-drop-1' placeholder='Pick cafe' name='gym_studio_name' onChange={handleChange}>Pick gym/ studio\n                        <option>Select option</option>\n                        <option>No preference</option>\n                        <option>1Rebel</option>\n                        <option>Barry&apos;s</option>\n                        <option>Fitness First</option>\n                        <option>Gymbox</option>\n                        <option>MoreYoga</option>\n                        <option>Nuffield Health</option>\n                        <option>Pure Gym</option>\n                        <option>The Gym Group</option>\n                        <option>Third Space</option>\n                        <option>Virgin</option>\n                      </select>\n                    </div>\n                    <p className='distance-text'>There&apos;s nothing worse than missing your class. How close do you want to be to the gym?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, gym_distance: e.target.value })}\n                        name={formData.gym_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.gym_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='gyms-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n            {/* Otherwise gyms should sit on the left */}\n            {(formData.gym_selection & !formData.supermarket_selection) ?\n              <div className='form-filling-section-1' id='gym-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left'>\n                    <h3>Gyms</h3>\n                    <p>Where do you like to train?</p>\n                    {/* <p className='cuisine-choice'>Select a gym/studio</p> */}\n                    <div className='cuisine-dropdowns'>\n                      <select className='form-control' id='cuisine-drop-1' placeholder='Pick cafe' name='gym_studio_name' onChange={handleChange}>Pick gym/ studio\n                        <option>Select option</option>\n                        <option>No preference</option>\n                        <option>1Rebel</option>\n                        <option>Barry&apos;s</option>\n                        <option>Fitness First</option>\n                        <option>Gymbox</option>\n                        <option>MoreYoga</option>\n                        <option>Nuffield Health</option>\n                        <option>Pure Gym</option>\n                        <option>The Gym Group</option>\n                        <option>Third Space</option>\n                        <option>Virgin</option>\n                      </select>\n                    </div>\n                    <p className='distance-text'>What is the furthest distance you would like to walk to get there?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, gym_distance: e.target.value })}\n                        name={formData.gym_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.gym_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='gyms-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n\n            {/* Are parks selected or not */}\n            {/* Either two things selected or none - parks sits on the left */}\n            {(formData.park_selection & (truths === 1 || truths === 4 || (formData.supermarket_selection & formData.gym_selection) || (formData.workplace_selection & truths === 2))) ?\n              <div className='form-filling-section-1' id='park-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left'>\n                    <h3>Parks</h3>\n                    <p>We&apos;ve listed three types of park depending on your needs. Which one&apos;s the best for you?</p>\n                    <div className='cuisine-dropdowns'>\n                      <select className='form-control' id='cuisine-drop-1' placeholder='Select park type' name='park_type' onChange={handleChange}>Choose green space\n                        <option>Pick green space</option>\n                        <option>Large park &#40;long walks or runs&#41;</option>\n                        <option>Medium sized park &#40;big enough for activities&#41;</option>\n                        <option>Small square &#40;read a book&#41;</option>\n                      </select>\n\n                    </div>\n                    <p className='distance-text'>How far do you want to walk to get there?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, park_distance: e.target.value })}\n                        name={formData.park_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.park_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='park-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n            {/* Otherwise parks sit on the right */}\n            {(formData.park_selection & (((!formData.gym_selection) & truths === 3) || (formData.gym_selection & formData.workplace_selection & truths === 3) || (!formData.gym_selection & formData.supermarket_selection & truths === 2) || (formData.gym_selection & truths === 2))) ?\n              <div className='form-filling-section-2' id='park-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-right'>\n                    <h3>Parks</h3>\n                    <p>What kind of green space do you want to be near?</p>\n                    <div className='cuisine-dropdowns'>\n                      <select className='form-control' id='cuisine-drop-1' placeholder='Select park type' name='park_type' onChange={handleChange}>Choose green space\n                        <option>Pick green space</option>\n                        <option>Large park &#40;long walks or runs&#41;</option>\n                        <option>Medium sized park &#40;big enough for activities&#41;</option>\n                        <option>Small square &#40;read a book&#41;</option>\n                      </select>\n\n                    </div>\n                    <p className='distance-text'>What is the furthest distance you would like to walk to a parkl?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, park_distance: e.target.value })}\n                        name={formData.park_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.park_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='park-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n\n            {/* Is workplace selected or not */}\n            {/* Either 3 things selected or one - workplace will sit on the right */}\n            {(formData.workplace_selection & (truths === 2 || truths === 4)) ?\n              <div className='form-filling-section-2' id='work-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-right' id='work'>\n                    <h3>Workplace</h3>\n                    <p className='distance-text'>What&apos;s the postcode of your work? (don&apos;t worry, we&apos;ll only use this to search for properties for you)</p>\n                    <div className='form-detail-address'>\n                      <input type=\"text\" name='workplace_detail' onChange={handleChange} style={{ textTransform: 'uppercase' }} />\n                    </div>\n                    <p className='distance-text'>How would you like to travel to get there?</p>\n                    <div className='cuisine-dropdowns'>\n                      <select className='form-control' id='cuisine-drop-1' placeholder='Select transport' name='workplace_transport' onChange={handleChange}>Choose mode of transport\n                        <option>Choose mode of transport</option>\n                        <option>Walking</option>\n                        <option>Cycling</option>\n                        <option>Driving/ transport</option>\n                      </select>\n\n                    </div>\n                    <p className='distance-text'>What is the maximum time you want to spend on your journey?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, workplace_distance: e.target.value })}\n                        name={formData.workplace_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='40'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.workplace_distance} minutes</p>\n\n                  </div>\n                  <div className='form-filling-image-right' id='work-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n            {(formData.workplace_selection & (truths === 1 || truths === 3)) ?\n\n              // Only 2 things or no things selected\n              <div className='form-filling-section-1' id='work-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left' id='work'>\n                    <h3>Workplace</h3>\n                    <p className='distance-text'>What&apos;s the postcode of your work? (don&apos;t worry, we&apos;ll only use this to search for properties for you)</p>\n                    <div className='form-detail-address'>\n                      <input type=\"text\" name='workplace_detail' onChange={handleChange} style={{ textTransform: 'uppercase' }} />\n                    </div>\n                    <p className='distance-text'>How would you like to travel to get there?</p>\n                    <div className='cuisine-dropdowns'>\n                      <select className='form-control' id='cuisine-drop-1' placeholder='Select transport' name='workplace_transport' onChange={handleChange}>Choose mode of transport\n                        <option>Choose mode of transport</option>\n                        <option>Walking</option>\n                        <option>Cycling</option>\n                        <option>Driving/ transport</option>\n                      </select>\n\n                    </div>\n                    <p className='distance-text'>What is the maximum time you want to spend on your journey?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, workplace_distance: e.target.value })}\n                        name={formData.workplace_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='40'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.workplace_distance} minutes</p>\n\n                  </div>\n                  <div className='form-filling-image-right' id='work-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n            {formData.primary_selection || formData.secondary_selection || formData.college_selection || formData.family_selection ?\n              <Link to={'/wittle-search/family'}><button className='next' >Next</button></Link>\n              :\n              <Link to={'/wittle-search/property'}><button className='next' >Next</button></Link>\n            }          </div>\n\n\n        </section>\n      </section>\n    </section>\n  )\n\n}\n\nexport default Lifestyle"],"names":["navbarColour","navigate","useNavigate","isActive","setIsActive","useRef","useState","errors","setErrors","email","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","className","style","backgroundColor","onClick","handleMenuClose","removeItemFromStorage","token","localStorage","removeItem","window","location","reload","isUserAuth","anySupermarket","setAnySupermarket","specificSupermarket","setSpecificSupermarket","truths","setTruths","formData","setFormData","start_search","search_name","search_type","search_channel","restaurant_selection","restaurant_decision","restaurant_distance","restaurant_cuisine_1","restaurant_cuisine_2","takeaway_selection","takeaway_decision","takeaway_distance","takeaway_cuisine_1","takeaway_cuisine_2","pubs_selection","pubs_distance","cafes_selection","cafes_decision","cafes_detail","cafes_distance","tube_selection","tube_decision","tube_detail","tube_distance","train_selection","train_decision","train_detail","train_distance","primary_selection","primary_religion","primary_mode","primary_distance","college_selection","college_religion","college_mode","college_distance","secondary_selection","secondary_religion","secondary_mode","secondary_distance","supermarket_selection","supermarket_decision","supermarket_segment","supermarket_size","supermarket_distance","gym_selection","gym_studio_name","gym_class_type","gym_distance","park_selection","park_type","park_distance","workplace_selection","workplace_detail","workplace_transport","workplace_distance","family_selection","family_detail_1","family_distance_1","family_detail_2","family_distance_2","family_detail_3","family_distance_3","family_mode_1","family_mode_2","family_mode_3","property_price_min","property_price_max","property_bed_min","property_bed_max","property_type","owner","useEffect","data","JSON","parse","getItem","count","filter","Boolean","length","checkingState","handleChange","e","target","name","removeSpace","value","replace","setItem","stringify","id","placeholder","onChange","type","defaultValue","min","max","step","textTransform","to"],"sourceRoot":""}