{"version":3,"file":"static/js/663.a4a0bc86.chunk.js","mappings":"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","sources":["components/helpers/Loading.js","components/tools/Footer.js","components/tools/NavBarRevised.js","components/tools/WhiteNavbar.js","components/whiteLabel/WhiteSidebar.js","components/whiteLabel/propertyDetails/componentDetails/EVDetails.js","components/whiteLabel/propertyDetails/componentDetails/FitnessDetails.js","components/whiteLabel/propertyDetails/componentDetails/PrimaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/PubDetails.js","components/whiteLabel/propertyDetails/componentDetails/RestaurantDetails.js","components/whiteLabel/propertyDetails/componentDetails/SecondaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/SupermarketDetails.js","components/whiteLabel/variableSummaries/VariablesPage.js"],"sourcesContent":["import React from 'react'\n\nconst Loading = () => (\n  <div className=\"loading-gif\">\n    <img src={require('../../styles/loading-gif-2.gif')} alt=\"loading gif\"/>\n  </div>\n)\n\nexport default Loading","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { useDetectOutsideClick } from './ClickDropdown'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\n\nconst NavBarRevised = ({ setProfileContent, profileContent, profileDetail, setProfileDetail }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  // ? Section 3: controlling the state and functions for the nav bar changing color and section\n  // state for colour of navbar\n  const [navColour, setNavColour] = useState('#051885')\n  const [titleColour, setTitleColour] = useState('#FFA7E5')\n  const [textColour, setTextColour] = useState('#FFA7E5')\n\n  // function for selecting home page\n  const homeSelect = () => {\n    setProfileContent('My properties')\n    setProfileDetail('My properties')\n    navigate('/agents/profile')\n  }\n\n  // function for selecting wittle search\n  const searchSelect = () => {\n    setProfileContent('Variables')\n    setProfileDetail('Variables')\n    navigate('/agents/explore')\n\n  }\n\n  // function for selecting wittle lifestyle\n  const lifestyleSelect = () => {\n    setProfileContent('Comparison')\n    setProfileDetail('Comparison')\n    navigate('/agents/compare')\n  }\n\n  // function for selecting wittle lifestyle\n  // const adminSelect = () => {\n  //   setProfileContent('My household')\n  //   setProfileDetail('Admin dashboard')\n  // }\n\n  // function for selecting wittle lifestyle\n  const accountSelect = () => {\n    setProfileContent('Account')\n    setProfileDetail('Account')\n\n  }\n\n  return (\n    <>\n      <section className='centered-nav-bar' style={{ backgroundColor: navColour }}>\n        <section className='top-section'>\n\n          <div className='logo'>\n            <h2 style={{ color: titleColour }} onClick={() => navigate('/')}>Wittle</h2>\n            {/* {profileContent === 'Home' ? <h3 style={{ color: titleColour }}>Home</h3> :\n              profileContent === 'Variables' ? <h3 style={{ color: titleColour }}>Variables</h3> :\n                profileContent === 'Lifestyle' ? <h3 style={{ color: titleColour }}>Lifestyle</h3> :\n                  profileContent === 'Admin' ? <h3 style={{ color: titleColour }}>Admin</h3> :\n                    profileContent === 'Account' ? <h3 style={{ color: titleColour }}>Account</h3> : ''} */}\n          </div>\n        </section>\n        <section className='nav-slider'>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'My properties' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'My properties' ? '5px' : '' }} onClick={homeSelect}>MY PROPERTIES</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Variables' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Variables' ? '5px' : '' }} onClick={searchSelect}>EXPLORE</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Comparison' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Comparison' ? '5px' : '' }} onClick={lifestyleSelect}>COMPARISON</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Account' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Account' ? '5px' : '' }} onClick={accountSelect}>ACCOUNT</h4>\n        </section>\n      </section>\n      {/* <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      /> */}\n    </>\n  )\n}\n\nexport default NavBarRevised\n\n\n\n     \n// {isUserAuth() ?\n//   <div className=\"menu-container\" onClick={handleMenuShow} >\n//     <div className=\"menu-trigger\" >\n//       <span>\n//         <div className='burger-icon'>\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//         </div>\n//       </span>\n//     </div>\n//     <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//       <ul>\n//         <li className='dropdowns'><a href=\"/property-search\">New property search</a></li>\n//         <li className='dropdowns'><a href=\"/wittle-search\">New Wittle search</a></li>\n//         <li className='dropdowns'><a onClick={() => navigate(`/profile/${getUserToken()}`)}>My properties</a></li>\n//         <li className='dropdowns' onClick={removeItemFromStorage}><a>Sign out</a></li>\n//       </ul>\n//     </nav>\n//   </div>\n//   :\n//   <>\n//     <div className='menu-container' onClick={handleMenuShow} >\n//       <div className=\"menu-trigger\" >\n//         <span>\n//           <div className='burger-icon'>\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//           </div>\n//         </span>\n//       </div>\n//       <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//         <form className='form-detail' onSubmit={handleSubmit}>\n//           <p>Log in to your account</p>\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={handleChange} />\n//           <div className='login-input'>\n//             <input type={loginPasswordType} name='password' className='password-input' placeholder='Password' value={registerData.password} onChange={handleChange} />\n//             <div className='password-icon-container' onClick={passwordReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           <button onClick={openDropdown} className='sign-up' type='submit'>\n//             <span>\n//               <div className='burger-icon'>\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//               </div>\n//             </span>\n//           </button>\n//           {/* <GoogleLogin onSuccess={googleLogin} onError={errorMessage} /> */}\n\n//           <h5>New to Wittle?\n//             <span onClick={handleRegisterShow}> Join us</span>\n//           </h5>\n//         </form>\n//       </nav>\n//     </div>\n//     {/* <div className='register-modal-container'> */}\n//     <Modal show={registerShow} onHide={handleRegisterClose} backdrop='static' className='register-modal'>\n//       <Modal.Body>\n//         <form className='form-detail' onSubmit={registerSubmit} >\n//           <div className='register-title'>\n//             <h1>Unlock the benefits of Wittle</h1>\n//             <h1 className='x-close' onClick={handleRegisterClose}>x</h1>\n//           </div>\n//           <p className='form-overview'>Set up an account to help you find the perfect home</p>\n//           <hr />\n//           {/* First name */}\n//           <input type='text' name='first_name' className='input' placeholder='First name' value={registerData.first_name} onChange={registerChange} />\n//           {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n//           {/* Last namee */}\n//           <input type='text' name='last_name' className='input' placeholder='Last name' value={registerData.last_name} onChange={registerChange} />\n//           {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n//           {/* Email */}\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={registerChange} />\n//           {registerError.email && <p className=\"error\">* {registerError.email}</p>}\n//           {/* Username */}\n//           <input type='text' name='username' className='input' placeholder='Username' value={registerData.username} onChange={registerChange} />\n//           {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n//           {/* Password */}\n//           <div className='login-input'>\n//             <input type={registerPasswordType} name='password' className='password-input-register' placeholder='Password' value={registerData.password} onChange={registerChange} />\n//             <div className='password-icon-container' onClick={passwordRegisterReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n//           {/* Password confirmation */}\n//           <input type='password' name='password_confirmation' className='input' placeholder='Password confirmation' value={registerData.password_confirmation} onChange={registerChange} />\n//           {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n\n//           <button type='submit'>Register</button>\n//           {registerError.post && <p className=\"error\">* {registerError.post}</p>}\n\n//         </form>\n//         <div className='register-bottom'>\n//           <button className='register-close' onClick={handleRegisterClose}>Close</button>\n//         </div>\n//       </Modal.Body>\n//     </Modal>\n//     {/* </div> */}\n\n//   </>\n// }\n\n","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst WhiteNavbar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='nav-section no-print' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n        </div>\n    \n        {isUserAuth() ?\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={removeItemFromStorage}><a>Sign out</a></h3>\n          </div>\n\n          :\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={() => navigate('/login')}><a>Sign in</a></h3>\n          </div>\n\n        }\n      </section>\n\n    </>\n  )\n\n}\n\nexport default WhiteNavbar","import { useParams, useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { getAccessToken, getUserToken, isUserAuth } from '../auth/Auth'\nimport axios from 'axios'\n\n\nconst WhiteSidebar = ({ setProfileDetail, variableSide, setProfileContent, setVariableSide }) => {\n\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // userdata state\n  const [userData, setUserData] = useState()\n\n  // errors\n  const [errors, setErrors] = useState()\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n  \n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n  return (\n    <>\n      <section className='profile-sidebar-open no-print remove-margin'>\n        <div className='logo'>\n          <h2 onClick={() => navigate('/')}>Wittle</h2>\n        </div>\n        <div className='profile-buttons'>\n          <div className='profile-button-title' >\n            <h2 onClick={() => {\n              setProfileDetail('Home')\n              setProfileContent('Home')\n              navigate('/agents/profile')\n            }}>🧘‍♂️ Wittle home</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileDetail('Saved items')\n              setProfileContent('Saved items')\n              navigate('/agents/favourites')\n            }}>🏡 Saved items</h2>\n          </div>\n          {/* <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileDetail('My properties')\n              setProfileContent('My properties')\n              navigate('/agents/properties')\n            }}>🏡 My property list</h2>\n          </div> */}\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileDetail('Listing generator')\n              setProfileContent('Listing generator')\n              navigate('/agents/listing-generator')\n            }}>🧠 Listing generator</h2>\n          </div>\n          {userData && (userData.id === 1 || userData.id === 55) ?\n            <div className='profile-button-title' id='second-title'>\n              <h2 onClick={() => {\n                setProfileDetail('AI listing generator')\n                setProfileContent('AI listing generator')\n                navigate('/agents/ai-listing-generator')\n              }}>🧠 AI Listing generator</h2>\n            </div>\n            : ''\n          }\n          {/* <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Variables')\n              setProfileDetail('Variables')\n              setVariableSide(!variableSide)\n              navigate('/agents/explore')\n            }\n            }>🔎 Explore</h2>\n            {variableSide ? <h4>v</h4> : <h4>^</h4>}\n          </div> */}\n\n          {/* <div className='profile-button-sub'>\n            <h3 onClick={() => setProfileDetail('Primary schools')}>🏫 Primary schools</h3>\n            <h3 onClick={() => setProfileDetail('Secondary schools')}>👨‍🏫 Secondary schools</h3>\n            <h3 onClick={() => setProfileDetail('Restaurants')}>🍽 Restaurants </h3>\n            <h3 onClick={() => setProfileDetail('Pubs')}>🍺 Pubs </h3>\n            <h3 onClick={() => setProfileDetail('Fitness')}>🏋️‍♂️ Fitness </h3>\n            <h3 onClick={() => setProfileDetail('Supermarkets')}>🛒 Supermarkets </h3>\n            <h3 onClick={() => setProfileDetail('EVs')}>⛽️ EVs </h3>\n\n          </div> */}\n          {/* <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Comparison')\n              setProfileDetail('Comparison')\n              navigate('/agents/compare')\n            }}>↔️ Comparison</h2>\n          </div> */}\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Property finder')\n              setProfileDetail('Property finder')\n              navigate('/agents/finder')\n            }}>🔎 Property finder</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Account')\n              setProfileDetail('Account')\n              navigate('/agents/account')\n\n            }}>🖥 Account details</h2>\n          </div>\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default WhiteSidebar","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst EVDetails = ({ propertyData, ev1, listType, setEv1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [evView, setEvView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [ev2, setEv2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedEvs, setSelectedEvs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleEvClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedEvs(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...ev1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setEv1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as ev2\n      setEv2([...ev1])\n    } else {\n      setEv2(\n        ev1.filter(item => {\n          return (\n            item.location.toLowerCase().includes(term.toLowerCase()) ||\n            // item.power.toLowerCase().includes(term.toLowerCase()) ||\n            item.fast_charging.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (ev1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, ev1])\n\n  \n\n  return (\n    <>\n      {ev1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">EV charging point details near {propertyData.name} </h1> : <h1>EV charging point long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setEvView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setEvView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {evView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('location')}>\n                  <h5>Charger location</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('power')}>\n                  <h5>Power</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Fast Charging</h5>\n              </div>\n              <div className='school-table-details'>\n                {ev2 ? ev2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.location}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.power} kW</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.fast_charging}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : evView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {ev2 ? ev2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.location}</h5>\n                              <h5>⛽️ Power: {item.power} kW</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {ev2 &&\n                    ev2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleEvClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedEvs ? \n                        <Popup\n                          longitude={selectedEvs.longitude}\n                          latitude={selectedEvs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedEvs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedEvs.location}</h5>\n                              <p>⛽️ Power:{selectedEvs.power} kW</p>\n                              <p>⛽️ Fast charging: {selectedEvs.fast_charging}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {ev2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(ev2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default EVDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst FitnessDetails = ({ propertyData, gyms1, listType, setGyms1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [fitnessView, setFitnessView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [gyms2, setGyms2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedGyms, setSelectedGyms] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleGymClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedGyms(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...gyms1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setGyms1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as gyms2\n      setGyms2([...gyms1])\n    } else {\n      setGyms2(\n        gyms1.filter(item => {\n          return (\n            item.gym_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.gym_group.toLowerCase().includes(term.toLowerCase()) ||\n            item.class_type.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (gyms1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, gyms1])\n\n  \n\n  return (\n    <>\n      {gyms1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Fitness details near {propertyData.name} </h1> : <h1>Fitness long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setFitnessView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setFitnessView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {fitnessView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('gym_name')}>\n                  <h5>Studio name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('gym_group')}>\n                  <h5>Studio group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Class types</h5>\n              </div>\n              <div className='school-table-details'>\n                {gyms2 ? gyms2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.gym_name}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.gym_group}</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.class_type}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : fitnessView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {gyms2 ? gyms2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.gym_name}</h5>\n                              <h5>{item.gym_group}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {gyms2 &&\n                    gyms2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.long}\n                        latitude={item.Lat}\n                        onClick={() => handleGymClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedGyms ? \n                        <Popup\n                          longitude={selectedGyms.long}\n                          latitude={selectedGyms.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedGyms(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedGyms.gym_name}</h5>\n                              <p>{selectedGyms.gym_group}</p>\n                              <p>{selectedGyms.class_type}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {gyms2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(gyms2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default FitnessDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PrimaryDetails = ({ propertyData, primaryData1, listType, setPrimaryData1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [primaryView, setPrimaryView] = useState('Table')\n\n  // state for storing new primary data \n  const [primaryData2, setPrimaryData2] = useState([])\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n    console.log(school.longitude)\n    console.log(school.latitude)\n    console.log(school.max_distance)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...primaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPrimaryData1(sortedData)\n  }\n  \n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as primaryData1\n      setPrimaryData2([...primaryData1])\n    } else {\n      setPrimaryData2(\n        primaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (primaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, primaryData1])\n\n\n  return (\n    <>\n      {primaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Primary school details near {propertyData.name} </h1> : <h1>Primary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPrimaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPrimaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {primaryView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('pupils_at_standard')}>\n                  <h5>At standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('pupils_exceeding_standard')}>\n                  <h5>Exceeding standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {primaryData2 ? primaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_at_standard * 100)}%</h5>}\n                        </div>\n                        <div className='column' id='column7'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_exceeding_standard * 100)}%</h5>}\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              {item.max_distance !== null ? <h5>{item.max_distance}</h5> : <h5>Not specified</h5>}\n                            </div>\n                            : ''\n                        }\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : primaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {primaryData2 ? primaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              {listType === 'short list' ?\n                                <>\n                                  <h5>🌍 {item.within_catchment}</h5>\n                                  <h5>⏰ {item.walkTimeMin} mins</h5>\n                                </>\n                                : listType === 'long list' ?\n                                  <h5>🌍 {item.max_distance}</h5>\n                                  : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {primaryData2 &&\n                    primaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', 'On request', 'N/a' , null].includes(selectedSchool.max_distance) ? \n                        <>\n                          { \n                            typeof parseFloat(selectedSchool.longitude) === 'number' && \n                            typeof parseFloat(selectedSchool.latitude) === 'number' &&\n                            typeof parseFloat(selectedSchool.max_distance) === 'number' \n                              ?\n                              <>\n                                <Source\n                                  id=\"catchment-area\"\n                                  type=\"geojson\"\n                                  data={turf.circle([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"catchment-area-ring\"\n                                    type=\"fill\"\n                                    paint={{\n                                      'fill-color': '#FFA7E5',\n                                      'fill-opacity': 0.3,\n                                    }} />\n                                  <Layer\n                                    id=\"catchment-area-outline\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#FFA7E5',\n                                      'line-width': 2,\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-line\"\n                                  type=\"geojson\"\n                                  data={turf.lineString([[parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)],\n                                    turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), 90, { units: 'kilometers' }).geometry.coordinates])}\n                                >\n                                  <Layer\n                                    id=\"radius\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#051885',\n                                      'line-width': 2,\n                                      'line-dasharray': [2, 1],\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-label\"\n                                  type=\"geojson\"\n                                  data={turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance) / 2, 90, { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"radius-label\"\n                                    type=\"symbol\"\n                                    layout={{\n                                      'text-field': `${selectedSchool.max_distance} km`,\n                                      'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                      'text-size': 12,\n                                      'text-offset': [0, -1],\n                                    }} \n                                    paint={{\n                                      'text-color': '#051885',\n                              \n                                    }}\n                                  />\n                                </Source>\n                              </>\n                              : \n                              <p>Invalid coordinates or distance.</p> \n                          }\n                        </>\n\n\n                        : selectedSchool ?\n                          <Popup\n                            longitude={parseFloat(selectedSchool.longitude)}\n                            latitude={parseFloat(selectedSchool.latitude)}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {primaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(primaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n\n    </>\n  )\n}\n\nexport default PrimaryDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PubDetails = ({ propertyData, pubs1, listType, setPubs1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [pubView, setPubView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [pub2, setPub2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedPubs, setSelectedPubs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handlePubClick = (pub) => {\n    console.log('selected pub ->', pub)\n    setSelectedPubs(pub)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...pubs1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPubs1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as pub2\n      setPub2([...pubs1])\n    } else {\n      setPub2(\n        pubs1.filter(item => {\n          return (\n            item.name.toLowerCase().includes(term.toLowerCase()) ||\n            item.operator.toLowerCase().includes(term.toLowerCase()) ||\n            item.walkTimeMin.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (pubs1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, pubs1])\n\n  \n\n  return (\n    <>\n      {pubs1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Pub details near {propertyData.name} </h1> : <h1>Pub long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPubView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPubView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {pubView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('name')}>\n                  <h5>Pub name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                {/* <div id='column3' className='pub-group sort-section' onClick={() => handleSort('operator')}>\n                  <h5>Pub group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>            */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {pub2 ? pub2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.name}</h5>\n                        </div>\n                        {/* <div className='column pub-group' id='column3'>\n                          <h5>{item.operator}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : pubView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {pub2 ? pub2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.name}</h5>\n                              <h5>🍺 Pub group: {item.operator}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {pub2 &&\n                    pub2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handlePubClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedPubs ? \n                        <Popup\n                          longitude={selectedPubs.longitude}\n                          latitude={selectedPubs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedPubs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedPubs.name}</h5>\n                              <p>🍺 {selectedPubs.operator} pub group</p>\n                              <p>🍺 Distance: {selectedPubs.walkTimeMin} mins</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {pub2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(pub2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default PubDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst RestaurantDetails = ({ propertyData, restaurants1, listType, setRestaurants1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [restaurantView, setRestaurantView] = useState('Table')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedRestaurants, setSelectdRestaurant] = useState(null)\n\n\n  // state for storing new supermarket data \n  const [restaurants2, setRestaurants2] = useState([])\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSchoolClick = (restaurant) => {\n    console.log('selectd restaurant ->', restaurant)\n    setSelectdRestaurant(restaurant)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...restaurants1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setRestaurants1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as restaurants2\n      setRestaurants2([...restaurants1])\n    } else {\n      setRestaurants2(\n        restaurants1.filter(item => {\n          return (\n            item.restaurant_name.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (restaurants1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, restaurants1])\n\n  \n\n  return (\n    <>\n      {restaurants1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Restaurant details near {propertyData.name} </h1> : <h1>Restaurants long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setRestaurantView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setRestaurantView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {restaurantView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('restaurant_name')}>\n                  <h5>Restaurant name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {/* <div id='column3' className='sort-section' onClick={() => handleSort('rating')}>\n                  <h5>Rating (/5)</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>              */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5'>Website</h5>\n              </div>\n              <div className='school-table-details'>\n                {restaurants2 ? restaurants2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.restaurant_name}</h5>\n                        </div>\n                        {/* <div className='column' id='column3'>\n                          <h5>{item.rating}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins </h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column' id='column5'>\n                          <a href={item.url}>Visit website</a>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : restaurantView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {restaurants2 ? restaurants2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.restaurant_name}</h5>\n                              {/* <h5>📈 Rating: {item.rating} /5</h5> */}\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {restaurants2 &&\n                    restaurants2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedRestaurants ? \n                        <Popup\n                          longitude={selectedRestaurants.longitude}\n                          latitude={selectedRestaurants.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectdRestaurant(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedRestaurants.restaurant_name}</h5>\n                              <p>{selectedRestaurants.master_cuisine}</p>\n                              {/* <p>{selectedRestaurants.rating} /5</p> */}\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {restaurants2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(restaurants2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default RestaurantDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\nconst SecondaryDetails = ({ propertyData, secondaryData1, listType, setSecondaryData1, postcodeData }) => {\n\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new primary data \n  const [secondaryData2, setSecondaryData2] = useState([])\n\n\n  // states for handling the view type\n  const [secondaryView, setSecondaryView] = useState('Table')\n\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // trigger icon pop up\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n\n  // ? Section3: Ability to sort data by different column names\n  // function to sort data by column name\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...secondaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSecondaryData1(sortedData)\n  }\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as secondaryData1\n      setSecondaryData2([...secondaryData1])\n    } else {\n      setSecondaryData2(\n        secondaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (secondaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, secondaryData1])\n\n  \n\n  return (\n\n    <>\n      {secondaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Secondary school details near {propertyData.name} </h1> : <h1>Secondary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSecondaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSecondaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n          {secondaryView === 'Table' ? \n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('total_pass_rate')}>\n                  <h5>GCSE pass rate</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('total_top_rate')}>\n                  <h5>GCSE A/A*</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {secondaryData2 ? secondaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          <h5>{(item.total_pass_rate === null ? 'N/a' : item.total_pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column7'>\n                          <h5>{(item.total_top_rate === null ? 'N/a' : item.total_top_rate)}</h5>\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.school_type === 'Independent school' ? 'N/a' : item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n            </div>\n\n            : secondaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {secondaryData2 ? secondaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title' onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              <h5>🌍 {item.within_catchment}</h5>\n                              <h5>⏰ {item.walkTimeMin} mins</h5>\n                            </div>\n\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {secondaryData2 &&\n                    secondaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ? \n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }} \n                              paint={{\n                                'text-color': '#051885',\n                              \n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n              </div>\n\n              : '' }\n          {secondaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(secondaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SecondaryDetails","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst SupermarketDetails = ({ propertyData, supermarkets1, listType, setSupermarkets1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [supermarketsView, setSupermarketsView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [supermarkets2, setSupermarkets2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedSupermarkets, setSelectedSupermarkts] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSupermarketClick = (supermarket) => {\n    console.log('selectd supermarket ->', supermarket)\n    setSelectedSupermarkts(supermarket)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...supermarkets1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSupermarkets1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as supermarkets1\n      setSupermarkets2([...supermarkets1])\n    } else {\n      setSupermarkets2(\n        supermarkets1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.segment.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase()) \n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (supermarkets1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, supermarkets1])\n\n  \n\n  return (\n    <>\n      {supermarkets1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Supermarkets near {propertyData.name} </h1> : <h1>Supermarkets long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSupermarketsView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSupermarketsView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {supermarketsView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('supermarket_store_name')}>\n                  <h5>Supermarket name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>             \n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('segment')}>\n                  <h5>Segment</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>  \n                <div id='column4' className='sort-section' onClick={() => handleSort('store_size')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                \n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {supermarkets2 ? supermarkets2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.supermarket_store_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.segment}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.store_size}</h5>\n                        </div>\n                      \n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n  \n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : supermarketsView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {supermarkets2 ? supermarkets2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.supermarket_store_name}</h5>\n                              <h5>{item.store_size}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {supermarkets2 &&\n                    supermarkets2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSupermarketClick(item)}\n\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n                      {selectedSupermarkets ? \n                        <Popup\n                          longitude={selectedSupermarkets.longitude}\n                          latitude={selectedSupermarkets.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedSupermarkts(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedSupermarkets.supermarket_store_name}</h5>\n                              <p>{selectedSupermarkets.store_size}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {supermarkets2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(supermarkets2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SupermarketDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\n\nimport PrimaryDetails from '../propertyDetails/componentDetails/PrimaryDetails'\nimport SecondaryDetails from '../propertyDetails/componentDetails/SecondaryDetails'\nimport RestaurantDetails from '../propertyDetails/componentDetails/RestaurantDetails'\nimport FitnessDetails from '../propertyDetails/componentDetails/FitnessDetails'\nimport SupermarketDetails from '../propertyDetails/componentDetails/SupermarketDetails'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from '../propertyDetails/componentDetails/EVDetails'\nimport PubDetails from '../propertyDetails/componentDetails/PubDetails'\n\n\n\n\nconst VariablesPage = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for company data\n  const [company, setCompany] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [ev, setEv] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Variables')\n  const [profileDetail, setProfileDetail] = useState('Variables')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(true)\n\n\n\n  // ? Section 2: load user data\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        const sortedData = data.sort((a, b) => b.pupils_at_standard - a.pupils_at_standard)\n        setPrimaryData(sortedData)\n        console.log('all primaries ->', sortedData)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    loadPrimaryData()\n  }, [])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        const sortedData = data.sort((a, b) => b.total_pass_rate - a.total_pass_rate)\n        setSecondaryData(sortedData)\n        console.log('all secondaries ->', sortedData)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadSecondaryData()\n  }, [])\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        const sortedData = data.sort((a, b) => b.rating - a.rating)\n        setRestaurants(sortedData)\n        console.log('all restaurants ->', sortedData)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadRestaurantData()\n  }, [])\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadFitnessData()\n  }, [])\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadSupermarketData()\n  }, [])\n\n\n  // ? Section 8: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadEVdata()\n  }, [])\n\n\n  \n\n  // ? Section 8: Load and sort Pubs data\n  const loadPubs = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pubs data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPubs()\n  }, [])\n\n\n\n\n\n\n  return (\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />    \n        {profileDetail === 'Variables' ?  \n          <section className='variables-section'>\n\n            <h1>Explore the different variables</h1>\n            <div className='variables-list'>\n              <div className='variable' onClick={() => setProfileDetail('Primary schools')}>\n                <h1>🏫</h1>\n                <h3>Primary schools</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Secondary schools')}>\n                <h1>👨‍🏫</h1>\n                <h3>Secondary schools</h3>\n              </div>\n              <div className='variable'>\n                <h1>🎓</h1>\n                <h3>6th form colleges</h3>\n              </div>\n              <div className='variable'>\n                <h1>🌳</h1>\n                <h3>Green space</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Restaurants')}>\n                <h1>🍽</h1>\n                <h3>Restaurants</h3>\n              </div>\n              <div className='variable'>\n                <h1>🚇</h1>\n                <h3>Tube stations</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('EVs')}>\n                <h1>⛽️</h1>\n                <h3>Electric vehicles</h3>\n              </div>\n              <div className='variable'onClick={() => setProfileDetail('Pubs')}>\n                <h1>🍻</h1>\n                <h3>Pubs</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Fitness')}>\n                <h1>🏋️‍♂️</h1>\n                <h3>Fitness</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Supermarkets')}>\n                <h1>🛒</h1>\n                <h3>Supermarkets</h3>\n              </div>\n            </div>\n\n          </section>\n          : profileDetail === 'Primary schools' ?\n            <section  className='variables-single-section'>\n              <PrimaryDetails\n                primaryData1={primaryData}\n                setPrimaryData1={setPrimaryData}\n                listType={'long list'}\n                setProfileDetail={setProfileDetail}\n              />\n\n            </section>\n\n            : profileDetail === 'Secondary schools' ?\n              <section  className='variables-single-section'>\n                <SecondaryDetails\n                  secondaryData1={secondaryData}\n                  setSecondaryData1={setSecondaryData}\n                  listType={'long list'}\n                />\n\n              </section>\n\n              : profileDetail === 'Restaurants' ?\n                <section  className='variables-single-section'>\n                  <RestaurantDetails\n                    restaurants1={restaurants}\n                    setRestaurants1={setRestaurants}\n                    listType={'long list'}\n                  />\n\n                </section>\n\n                : profileDetail === 'Fitness' ?\n                  <section  className='variables-single-section'>\n                    <FitnessDetails\n                      gyms1={gyms}\n                      setGyms1={setGyms}\n                      listType={'long list'}\n                    />\n\n                  </section>\n\n                  : profileDetail === 'Supermarkets' ?\n                    <section className='variables-single-section'>\n                      <SupermarketDetails\n                        supermarkets1={supermarkets}\n                        setSupermarkets1={setSupermarkets}\n                        listType={'long list'}\n                      />\n\n                    </section>\n\n                    : profileDetail === 'EVs' ?\n                      <section className='variables-single-section'>\n                        <EVDetails\n                          ev1={ev}\n                          setEv1={setEv}\n                          listType={'long list'}\n                        />\n\n                      </section>\n\n                      : profileDetail === 'Pubs' ?\n                        <section className='variables-single-section'>\n                          <PubDetails\n                            pubs1={pubs}\n                            setPubs1={setPubs}\n                            listType={'long list'}\n                          />\n\n                        </section>\n\n\n\n                        : ''}\n    \n\n      </section>\n    </>\n  )\n}\n\nexport default VariablesPage"],"names":["className","src","require","alt","textColour","pageType","id","style","color","setProfileContent","profileContent","profileDetail","setProfileDetail","navigate","useNavigate","isActive","setIsActive","useRef","useState","errors","setErrors","email","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","navColour","setNavColour","titleColour","setTitleColour","setTextColour","backgroundColor","onClick","textDecoration","textUnderlineOffset","navbarColour","isUserAuth","token","localStorage","removeItem","window","location","reload","variableSide","setVariableSide","userData","setUserData","useEffect","async","data","axios","getUserToken","headers","Authorization","getAccessToken","console","log","error","getUser","propertyData","ev1","listType","setEv1","postcodeData","evView","setEvView","ev2","setEv2","sortField","setSortField","sortDirection","setSortDirection","selectedEvs","setSelectedEvs","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","parseInt","target","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","item","toLowerCase","includes","fast_charging","name","type","value","onChange","placeholder","map","index","power","walkTimeMin","slice","onMouseEnter","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","handleEvClick","gym","closeOnClick","onClose","pageCount","Math","ceil","length","onPageChange","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","gyms1","setGyms1","fitnessView","setFitnessView","gyms2","setGyms2","selectedGyms","setSelectedGyms","gym_name","gym_group","class_type","long","Lat","handleGymClick","primaryData1","setPrimaryData1","primaryView","setPrimaryView","primaryData2","setPrimaryData2","selectedSchool","setSelectedSchool","school_name","local_authority","school_type","ofsted_results","toString","total_pass_rate","total_top_rate","within_catchment","max_distance","round","pupils_at_standard","pupils_exceeding_standard","handleSchoolClick","school","parseFloat","turf","units","paint","geometry","coordinates","layout","pubs1","setPubs1","pubView","setPubView","pub2","setPub2","selectedPubs","setSelectedPubs","operator","handlePubClick","pub","restaurants1","setRestaurants1","restaurantView","setRestaurantView","selectedRestaurants","setSelectdRestaurant","restaurants2","setRestaurants2","restaurant_name","href","url","restaurant","master_cuisine","secondaryData1","setSecondaryData1","secondaryData2","setSecondaryData2","secondaryView","setSecondaryView","supermarkets1","setSupermarkets1","supermarketsView","setSupermarketsView","supermarkets2","setSupermarkets2","selectedSupermarkets","setSelectedSupermarkts","cleansed_name","segment","size","supermarket_store_name","store_size","handleSupermarketClick","supermarket","setPropertyData","company","setCompany","primaryData","setPrimaryData","secondaryData","setSecondaryData","restaurants","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","tubes","setTubes","ev","setEv","loadUserData","getPrimaries","loadPrimaryData","getSecondaries","loadSecondaryData","rating","getData","loadRestaurantData","loadFitnessData","loadSupermarketData","loadEVdata","loadPubs"],"sourceRoot":""}