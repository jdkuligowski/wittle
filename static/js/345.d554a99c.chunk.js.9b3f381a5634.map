{"version":3,"file":"static/js/345.d554a99c.chunk.js","mappings":"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","sources":["components/auth/Login.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link, useLocation } from 'react-router-dom'\nimport { isEmail, isLength, matches } from 'validator'\nimport NavBar from '../tools/NavBar'\nimport { getAccessToken, isUserAuth } from './Auth'\nimport Swal from 'sweetalert2'\n\n\n\n\n\nconst Login = () => {\n\n  const navigate = useNavigate()\n  const location = useLocation() // This hook returns the location object that represents the current URL.\n\n  useEffect(() => {\n    console.log('Checking URL:', window.location.search) // Log the current search part of the URL.\n    const params = new URLSearchParams(window.location.search)\n    const registerSuccess = params.get('success')\n    console.log('Register Success:', registerSuccess) // Log the parameter value.\n\n    if (registerSuccess) {\n      Swal.fire({\n        title: 'Registration Successful!',\n        text: 'You\\'ve successfully registered your account - log in to start Wittling',\n        icon: 'success',\n        confirmButtonColor: '#ED6B86',\n        confirmButtonText: 'Log In',\n        customClass: {\n          title: 'popup-swal-title',\n          popup: 'popup-swal-body',\n          confirmButton: 'popup-swal-confirm',\n          cancelButton: 'popup-swal-cancel',\n        },\n      }).then((result) => {\n        if (result.isConfirmed) {\n          navigate('/login') // Redirect to the login page\n        }\n      })\n    }\n  }, [location, navigate]) // React to changes in location\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    password: '',\n    account: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (errors.email || errors.password) {\n      return\n    }\n\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      console.log('token ->', data)\n      window.localStorage.setItem('wittle-username', data.email)\n      navigate('/agents/profile')\n      increaseUsageCount()\n    } catch (error) {\n      // Here you should handle the error returned by your API when account does not exist\n      // Assuming your API returns a response with error details in error.response.data\n      const errorData = error.response.data.detail\n      if (errorData && errorData === 'Invalid credentials') { // change this condition based on your API response\n        setErrors({ ...errors, account: 'Account not found' })\n      }\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    let error = ''\n\n    if (name === 'email' && !isEmail(value)) {\n      error = 'Invalid email address'\n    } else if (name === 'password') {\n      error = validatePassword(value)\n    }\n\n    setRegisterData({ ...registerData, [name]: value })\n    setErrors({ ...errors, [name]: error })\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // increase value in db based on successful response\n  const increaseUsageCount = async () => {\n    if (isUserAuth()) {\n      console.log('trying to increase')\n      try {\n        const { data } = await axios.post('/api/usage/overall/', {}, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        console.log(data)\n        if (data.status === 'success') {\n          console.log('Usage count increased successfully')\n        } else {\n          console.error('Failed to increase usage count:', data.message)\n        }\n      } catch (error) {\n        console.error('Error:', error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('logged out')\n    }\n  }\n\n\n  return (\n    <>\n\n\n      <section className='login-page'>\n        <section className='login-content'>\n          <div className='logo-section'>\n\n            <div className='wittle-logo' onClick={() => navigate('/')}></div>\n\n\n          </div>\n          <h1>Sign in</h1>\n          <div className='input-section'>\n            <div className='login-input'>\n              <h3>Email address</h3>\n              <input placeholder='Enter email address' type='email' name='email' className='input' value={registerData.email} onChange={handleChange}></input>\n              {errors.email && <p className=\"error\">* {errors.email}</p>}\n\n            </div>\n            <div className='login-input'>\n              <h3>Password</h3>\n              <input placeholder='Enter password' type={loginPasswordType} name='password' className='password-input' value={registerData.password} onChange={handleChange}></input>\n              {errors.password && <p className=\"error\">* {errors.password}</p>}\n\n            </div>\n          </div>\n          <button onClick={handleSubmit} type='submit'>Sign in</button>\n          {errors.account && <p className=\"error\" id='account'>* {errors.account}</p>}\n\n          <p>Forgotten your login details? <Link to={'/password-reset-request/'}><span>Request reset</span></Link></p>\n\n        </section>\n\n\n      </section>\n    </>\n  )\n}\n\nexport default Login\n\n"],"names":["Login","navigate","useNavigate","location","useLocation","useEffect","console","log","window","search","registerSuccess","URLSearchParams","get","Swal","title","text","icon","confirmButtonColor","confirmButtonText","customClass","popup","confirmButton","cancelButton","then","result","isConfirmed","errors","setErrors","useState","email","password","account","handleChange","e","name","value","target","error","isEmail","validatePassword","setRegisterData","registerData","loginPasswordType","setLoginPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","hasUppercase","matches","hasLowercase","hasDigit","hasSpecialChar","isLength","min","increaseUsageCount","async","isUserAuth","data","axios","headers","Authorization","getAccessToken","status","message","_jsx","_Fragment","children","className","_jsxs","onClick","placeholder","type","onChange","token","preventDefault","localStorage","setItem","errorData","response","detail","id","Link","to"],"sourceRoot":""}