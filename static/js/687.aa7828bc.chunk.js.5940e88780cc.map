{"version":3,"file":"static/js/687.aa7828bc.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyDetails/PropertyInsightsOverview.js","components/whiteLabel/propertyList.js/ListingGenerator.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport PropertySummary from './componentHighlights/PropertySummary'\nimport SchoolHighlights from './componentHighlights/SchoolHighlights'\nimport LifestyleHighlights from './componentHighlights/LifestyleHighlights'\nimport TransportHighlights from './componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from './componentHighlights/NeighbourhoodHighlights'\nimport PropertyDetailSlider from './helpers/PropertyDetailSlider'\nimport PrimaryDetails from './componentDetails/PrimaryDetails'\nimport SecondaryDetails from './componentDetails/SecondaryDetails'\nimport TubeDetails from './componentDetails/TubeDetails'\nimport RestaurantDetails from './componentDetails/RestaurantDetails'\nimport PubDetails from './componentDetails/PubDetails'\nimport SupermarketDetails from './componentDetails/SupermarketDetails'\nimport FitnessDetails from './componentDetails/FitnessDetails'\nimport EVDetails from './componentDetails/EVDetails'\n\n\n\n\nconst PropertyInsightsOverview = ({ addressSubstring, postcodeSubstring, listingFields, postcodeData, topPrimaries, topSecondaries,\n  restaurants1, cuisines, topRestaurants, gyms1, mainGyms, supermarkets1, mainSupermarkets, pubs1, topPubs, tubes1, trains1, setInsightView,\n  primaryData1, setPrimaryData1, secondaryData1, setSecondaryData1, setTubes1, setRestaurants1, setPubs1, setSupermarkets1, setGyms1,\n  ev1, setEv1 }) => {\n\n  const [propertyView, setPropertyView] = useState('Overview')\n\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  const [tableMapView, setTableMapView] = useState('Table')\n\n\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n      postcodeData[0].ev.percentile +\n      postcodeData[0].fitness.percentile +\n      (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n      postcodeData[0].restaurants.normal_percentile +\n      postcodeData[0].supermarkets.percentile +\n      postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n  return (\n    <>\n      <section className=\"insights-results-wrapper\">\n        <section className=\"insights-navigation\">\n          <div className=\"direction-arrow\" onClick={() => setInsightView('Search')}></div>\n          <div className=\"navigation-input\">\n            <h3 className=\"title\">Postcode</h3>\n            <h3 className=\"result\">{postcodeSubstring}</h3>\n          </div>\n          <div className=\"navigation-input\">\n            <h3 className=\"title\">Address</h3>\n            <h3 className=\"result\">{addressSubstring}</h3>\n          </div>\n          <div className=\"navigation-input\">\n            <h3 className=\"title\">Channel</h3>\n            <h3 className=\"result\">{listingFields.channel}</h3>\n          </div>\n        </section>\n\n        <section className=\"property-insights-wrapper\">\n          <div className=\"property-insight-nav\">\n            <div className=\"property-insight-buttons\">\n              <h3 className={`insight-button ${propertyView === 'Overview' ? 'active' : 'inactive'}`} id='left' onClick={() => setPropertyView('Overview')}>Property overview</h3>\n              <h3 className={`insight-button ${propertyView === 'Details' ? 'active' : 'inactive'}`} id='right' onClick={() => setPropertyView('Details')}>Property details</h3>\n            </div>\n            <div className='print-section'>\n              <div className=\"print-icon\"></div>\n              <h3>Print</h3>\n\n            </div>\n          </div>\n          {propertyView === 'Overview' ?\n            <div className='insight-dropdowns'>\n              <div className='summary-header'>\n                <h3>Property Summary</h3>\n                <hr className='header-line' />\n              </div>\n              <PropertySummary\n                neighbourhoodScore={neighbourhoodScore}\n                postcodeData={postcodeData}\n              />\n              <div className='summary-header' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {schoolSection ?\n                <SchoolHighlights\n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {lifestyleSection ?\n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {transportSection ?\n                <TransportHighlights\n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                  trains1={trains1}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhoood highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {neighbourhoodSection ?\n                <NeighbourhoodHighlights\n                  postcodeData={postcodeData}\n                />\n                : ''\n              }\n            </div>\n\n            : propertyView === 'Details' ?\n              <>\n\n                <div className='property-details-wrapper'>\n                  <PropertyDetailSlider\n                    sliderSelection={sliderSelection}\n                    setSliderSelection={setSliderSelection}\n                  />\n                  <div className='detail-table-title'>\n                    <h3>{sliderSelection} list</h3>\n                    <hr className='table-title-line' />\n                    <input placeholder='Explore the data'></input>\n                    <div className={`icon-box ${tableMapView === 'Table' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Table')}>\n                      <div className='icon' id='table'></div>\n                    </div>\n                    <div className={`icon-box ${tableMapView === 'Map' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Map')}>\n                      <div className='icon' id='map'></div>\n                    </div>\n\n                  </div>\n                  <div className='insight-tables'>\n                    {sliderSelection === 'Primary schools' ?\n                      <PrimaryDetails\n                        primaryData1={primaryData1}\n                        setPrimaryData1={setPrimaryData1}\n                        postcodeData={postcodeData}\n                        tableMapView={tableMapView}\n                        listType={'short list'}\n                      />\n\n                      : sliderSelection === 'Secondary schools' ?\n                        <SecondaryDetails\n                          secondaryData1={secondaryData1}\n                          setSecondaryData1={setSecondaryData1}\n                          postcodeData={postcodeData}\n                          tableMapView={tableMapView}\n                          listType={'short list'}\n                        />\n\n                        : sliderSelection === 'Tubes' ?\n                          <TubeDetails\n                            tubes1={tubes1}\n                            setTubes1={setTubes1}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                            tableMapView={tableMapView}\n                          />\n\n                          : sliderSelection === 'Restaurants' ?\n                            <RestaurantDetails\n                              restaurants1={restaurants1}\n                              setRestaurants1={setRestaurants1}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                              tableMapView={tableMapView}\n                            />\n\n                            : sliderSelection === 'Pubs' ?\n                              <PubDetails\n                                pubs1={pubs1}\n                                setPubs1={setPubs1}\n                                listType={'short list'}\n                                postcodeData={postcodeData}\n                                tableMapView={tableMapView}\n\n                              />\n\n                              : sliderSelection === 'Supermarkets' ?\n                                <SupermarketDetails\n                                  supermarkets1={supermarkets1}\n                                  setSupermarkets1={setSupermarkets1}\n                                  listType={'short list'}\n                                  postcodeData={postcodeData}\n                                  tableMapView={tableMapView}\n\n                                />\n\n                                : sliderSelection === 'Fitness' ?\n                                  <FitnessDetails\n                                    gyms1={gyms1}\n                                    setGyms1={setGyms1}\n                                    listType={'short list'}\n                                    postcodeData={postcodeData}\n                                    tableMapView={tableMapView}\n\n                                  />\n\n                                  : sliderSelection === 'EVs' ?\n                                    <EVDetails\n                                      ev1={ev1}\n                                      setEv1={setEv1}\n                                      listType={'short list'}\n                                      postcodeData={postcodeData}\n                                      tableMapView={tableMapView}\n\n                                    />\n                                    :\n                                    ''}\n                  </div>\n\n\n\n                </div>\n\n\n\n              </>\n\n              : ''}\n        </section>\n\n      </section>\n\n    </>\n\n  )\n}\n\n\nexport default PropertyInsightsOverview","import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport { NumericFormat } from 'react-number-format'\nimport NavBar from '../../tools/NavBar'\nimport ProfileMobileSlider from '../../tools/ProfileMobileSlider'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport ReactSwitch from 'react-switch'\nimport AIListingGenrator from './AIListingGenrator'\nimport PropertyInsightsOverview from '../propertyDetails/PropertyInsightsOverview'\n\n\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nconst ListingGenerator = () => {\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for loading\n  const [loading, setLoading] = useState()\n\n  // Create a reference to the div\n  const textDivRef = useRef(null)\n\n  // set state for completing a search\n  const [search, setSearch] = useState(false)\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Listing generator')\n  const [profileDetail, setProfileDetail] = useState('Listing generator')\n\n  // state for changing the view to insights results\n  const [insightView, setInsightView] = useState('Search')\n\n  // lisrting options\n  const [listingSelection, setListingSelection] = useState('Property insights')\n\n  const [postcodeSubstring, setPostcodeSubstring] = useState('')\n\n  const [addressSubstring, setAddressSubstring] = useState('')\n\n\n  // listing generator form\n  const [listingFields, setListingFields] = useState({\n    postcode: '',\n    address: '',\n    description: '',\n    channel: '',\n    bedrooms: '',\n    bathrooms: '',\n    property_type: '',\n    tenure: '',\n    size: '',\n    on_road_parking: '',\n    off_road_parking: '',\n    balcony: '',\n    primary_schools: 0,\n    secondary_schools: 0,\n    tubes: 0,\n    trains: 0,\n    restaurants: 0,\n    pubs: 0,\n    supermarkets: 0,\n    gyms: 0,\n    parks: 0,\n    evs: 0,\n    crime: 0,\n  })\n\n\n  // ai listing fields\n  const [aiFields, setAiFields] = useState({\n    'location': '',\n    'size': '',\n    'property_type': '',\n    'bedrooms': '',\n    'bathrooms': '',\n    'en_suites': '',\n    'amenities': [],\n    'channel': '',\n    'additional_info': '',\n    'price': '',\n    'restaurants': '',\n    'pubs': '',\n    'supermarkets': '',\n    'tube': '',\n    'trains': '',\n    'parks': '',\n    'evs': '',\n    'primary_schools': '',\n    'secondary_schools': '',\n    'gyms': '',\n  })\n\n  // features to include in checkbox: \n  const features = [\n    'balcony', 'on-road parking', 'off-road parking',\n    'private gated', 'private garage', 'shared garage',\n    'lift', 'open-plan', 'concierge', 'gym',\n    'pool & spa', 'penthouse', 'duplex', 'garden'\n  ]\n\n\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants] = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  const [aiSearch, setAiSearch] = useState()\n\n  const [aiReady, setAiReady] = useState(false)\n\n  // start ai seearch\n  const [searchGo, setSearchGo] = useState(false)\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          // console.log('user data ->', data)\n          setUserData(data)\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = async (listingType) => {\n    try {\n\n      // if its an ai load, then we need to set a state to organise the loading of the dataset\n      if (listingType === 'listing_ai_total') {\n        setAiReady(false) // Before loading the data for AI\n      }\n\n      // we need to access the postcode data in all eventualities\n      const { data } = await axios.post('/api/postcodes/', { postcode: postcodeSubstring })\n      console.log('postcode data ->', data)\n      setPostcodes(data)\n\n      increaseUsageCount(listingType) // Pass the listing type to the increaseUsageCount function\n\n      // if the postcode data arrives and its an ai search, we want to load the rest of the data\n      if (listingType === 'listing_ai_total') {\n        setSearchGo(true)\n      }\n\n      // if its just an insights load, wee want to add this to th db then navigate to the insights page\n      if (listingType === 'listing_insight_total') {\n        // const { data } = await axios.get(`/api/postcodes/${postcodeSubstring}`)\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Insights',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        setResultsToLocalStorage()\n        // navigate('/agents/property')\n        // navigate(`/agents/property/${postcodeSubstring}`)\n      }\n\n      // if its a normal listing build, then we want to run the code for that\n      if (listingType === 'listing_normal_total') {\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Listing',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n      }\n\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n\n  // define function for setting results to storage\n  const setResultsToLocalStorage = (token) => {\n    window.localStorage.setItem('listing-postcode', JSON.stringify(postcodeSubstring))\n  }\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n\n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n\n      // handle independent schools\n      if (item.school_type === 'Independent school') {\n        item.within_catchment = 'N/a'\n\n        // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n\n        // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n\n        // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n\n        // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n\n        // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n\n        // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n\n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      } else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n        // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n        // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n        // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    // console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n\n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n\n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    // console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n    if (listingFields.restaurants === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        restaurants: `${nearbyRestaurants.length} restaurants within 15 min walk, with more than ${cuisines} cuisines available`,\n      }))\n    }\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n    // extract the key studios\n    const topThreeStudios = []\n\n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n\n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n    if (listingFields.gyms === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        gyms: `${nearbyStudios.length} gyms within 15 min walk, including ${topThreeStudios[0]} and  ${topThreeStudios[1]}`,\n      }))\n    }\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n\n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n\n    // extract the key studios\n    const topThreeSupermarkets = []\n\n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_brand)) {\n        topThreeSupermarkets.push(supermarket.supermarket_brand)\n        uniqueSupermarkets.add(supermarket.supermarket_brand)\n\n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    // console.log('Nearby supermarkets ->', nearbySupermarkets)\n    if (listingFields.supermarkets === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        supermarkets: `${nearbySupermarkets.length} supermarkets within 15 min walk, including ${topThreeSupermarkets[0]} and ${topThreeSupermarkets[1]}`,\n      }))\n    }\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n\n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n\n    if (listingFields.tubes === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        tubes: `${nearbyTubes.length} within 15 min walk, including ${nearbyTubes[0].station_name} and ${nearbyTubes[1].station_name}`,\n      }))\n    }\n\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        // console.log('ev data ->', data)\n        setEv(data)\n        // Average walking speed is 5km/h. \n        const walkDistanceKm10 = 5 * (10 / 60)\n\n        // filter out restaurants firther than 15 mins walk away\n        const nearbyChargers = data.filter(item => {\n          const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n          const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n          const a =\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2)\n          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n          const distanceKm = R * c\n\n          item.distance_between = distanceKm\n          item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n          return distanceKm <= walkDistanceKm10\n        }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n        setEv1(nearbyChargers)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        // console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n\n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    // console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Load and sort tubes data\n  const loadTrainsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        // console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTrains1(nearbyTrains)\n    // console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n\n  // calculation to determine the inputs on the form and the toggle\n  const toggleStatus = (key) => {\n    setListingFields(prevData => ({\n      ...prevData,\n      [key]: prevData[key] === 1 ? 0 : 1,\n    }))\n  }\n\n\n  // Copy function\n  const handleCopyText = () => {\n    const text = textDivRef.current.innerText\n\n    // Copy text to clipboard\n    const textarea = document.createElement('textarea')\n    textarea.value = text\n    document.body.appendChild(textarea)\n    textarea.select()\n    document.execCommand('copy')\n    document.body.removeChild(textarea)\n  }\n\n\n\n  // Increase value in db based on successful response\n  const increaseUsageCount = async (listingType) => {\n    // console.log('trying to increase')\n    try {\n      const { data } = await axios.post('/api/usage/listing/', { column: listingType }, {\n        headers: {\n          Authorization: `Bearer ${getAccessToken()}`,\n        },\n      })\n      console.log(data)\n      if (data.status === 'success') {\n        // console.log('Usage count increased successfully')\n      } else {\n        // console.error('Failed to increase usage count:', data.message)\n      }\n    } catch (error) {\n      console.error('Error:', error)\n    }\n  }\n\n\n\n  const handleCheckboxChange = (feature) => {\n    setAiFields(prev => {\n      // Check if the feature is already in the amenities array\n      if (prev.amenities.includes(feature)) {\n        // If it is, remove it\n        return {\n          ...prev,\n          amenities: prev.amenities.filter(a => a !== feature),\n        }\n      } else {\n        // If it isn’t, add it\n        return {\n          ...prev,\n          amenities: [...prev.amenities, feature],\n        }\n      }\n    })\n  }\n\n\n  const handleInsightClick = () => {\n    loadPostcodeData('listing_insight_total')\n    setListingFields(prevState => ({ ...prevState, request_type: 'insights' }))\n    setInsightView('Results')\n  }\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    // window.location.reload()\n\n    navigate('/login')\n  }\n\n\n\n  return (\n\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar\n          setProfileDetail={setProfileDetail}\n          setProfileContent={setProfileContent}\n          userData={userData}\n        />\n        <section className='main-body' style={{ height: insightView === 'Results' ? 'auto' : 'none', marginTop: insightView === 'Results' ? '3%' : 'none' }}>\n          <section className='main-body-details'  >\n            <section className='listing-generator'>\n              {/* <h1>Wittle listing generator</h1> */}\n              {/* <h1>Insert your property details to build a listing or explore insights</h1> */}\n\n              <div className='listing-options'>\n                <div className='listing-buttons'>\n                  <h5 className='no-print' onClick={() => setListingSelection('Property insights')} style={{ borderBottom: listingSelection === 'Property insights' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Property insights' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Property insights' ? '700' : '400' }}>Property insights</h5>\n                  <h5 className='no-print' onClick={() => setListingSelection('Listing generator')} style={{ borderBottom: listingSelection === 'Listing generator' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Listing generator' ? '700' : '400' }}>Listing generator</h5>\n                  <h5 className='no-print' onClick={() => setListingSelection('AI listing generator')} style={{ borderBottom: listingSelection === 'AI listing generator' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'AI listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'AI listing generator' ? '700' : '400' }}>AI listing generator</h5>\n                </div>\n                <div className='logout-button' onClick={removeItemFromStorage}>\n                  <div className='logout-icon'></div>\n                </div>\n\n\n              </div>\n              <hr className='title-line' />\n\n              {listingSelection === 'Property insights' && userData &&\n                ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                  (userData.usage_stats[0].package === 'Unlimited') ||\n                  (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n                <>\n                  {insightView === 'Search' ?\n                    <div className='basic-listing-wrapper'>\n\n                      <div className='property-insight-inputs'>\n                        <h3 className='insight-title'>Insert full postcode to extract details about property</h3>\n                        <div className='double-input-block'>\n                          <div className='input-block small'>\n                            <h3>Postcode</h3>\n                            <input\n                              type=\"text\"\n                              value={postcodeSubstring}\n                              onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                              placeholder=\"Enter postcode\"></input>\n                          </div>\n                          <div className='input-block medium'>\n                            <h3>Address</h3>\n                            <input\n                              type=\"text\"\n                              value={addressSubstring}\n                              onChange={e => {\n                                const value = e.target.value\n                                setAddressSubstring(value)\n                                setListingFields(prevData => ({ ...prevData, address: value }))\n                              }}\n                              placeholder=\"Enter address\"></input>\n                          </div>\n                        </div>\n\n                        <div className='input-block large'>\n                          <h3>Channel</h3>\n\n                          <select className='listing-dropdown' onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                            <option>--- Select ---</option>\n                            <option>Sales</option>\n                            <option>Rental</option>\n                          </select>\n                        </div>\n                        <div className='search-section'>\n                          <button className='load-insights' onClick={handleInsightClick}>See insights</button>\n\n                        </div>\n                      </div>\n                    </div>\n                    : insightView === 'Results' ?\n                      <PropertyInsightsOverview\n                        postcodeSubstring={postcodeSubstring}\n                        addressSubstring={addressSubstring}\n                        listingFields={listingFields}\n                        postcodeData={postcodeData}\n                        topPrimaries={topPrimaries}\n                        topSecondaries={topSecondaries}\n                        restaurants1={restaurants1}\n                        cuisines={cuisines}\n                        topRestaurants={topRestaurants}\n                        setRestaurants1={setRestaurants1}\n                        gyms1={gyms1}\n                        setGyms1={setGyms1}\n                        mainGyms={mainGyms}\n                        supermarkets1={supermarkets1}\n                        setSupermarkets1={setSupermarkets1}\n                        mainSupermarkets={mainSupermarkets}\n                        pubs1={pubs1}\n                        topPubs={topPubs}\n                        tubes1={tubes1}\n                        setTubes1={setTubes1}\n                        trains1={trains1}\n                        insightView={insightView}\n                        setInsightView={setInsightView}\n                        primaryData1={primaryData1}\n                        setPrimaryData1={setPrimaryData1}\n                        secondaryData1={secondaryData1}\n                        setSecondaryData1={setSecondaryData1}\n                        ev1={ev1}\n                        setEv1={setEv1}\n                      />\n                      : ''}\n                </>\n\n\n                : listingSelection === 'Listing generator' && userData &&\n                  ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                    (userData.usage_stats[0].package === 'Unlimited') ||\n                    (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n                  <>\n                    <div className='full-listing-wrapper'>\n                      <div className='full-listing-inputs'>\n\n                        <div className='property-insight-inputs'>\n                          <h3 className='insight-title'>Input details and select features you want to include in your listing</h3>\n                          <div className='double-input-block'>\n                            <div className='input-block small'>\n                              <h3>Postcode</h3>\n                              <input\n                                type=\"text\"\n                                value={postcodeSubstring}\n                                onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                                placeholder=\"Enter postcode...\"></input>\n                            </div>\n                            <div className='input-block medium'>\n                              <h3>Address</h3>\n                              <input\n                                type=\"text\"\n                                value={addressSubstring}\n                                onChange={e => {\n                                  const value = e.target.value\n                                  setAddressSubstring(value)\n                                  setListingFields(prevData => ({ ...prevData, address: value }))\n                                }}\n                                placeholder=\"Enter address\"></input>\n                            </div>\n                          </div>\n                          <div className='single-input-block'>\n\n                            <div className='input-block large'>\n                              <h3>Channel</h3>\n\n                              <select className='listing-dropdown' onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                                <option>--- Select ---</option>\n                                <option>Sales</option>\n                                <option>Rental</option>\n                              </select>\n                            </div>\n                          </div>\n                          <div className='single-input-block'>\n\n                            <div className='input-block large'>\n                              <h3>Description</h3>\n                              <textarea id=\"description\" value={listingFields.description} rows=\"4\" placeholder='Enter description' onChange={e => setListingFields(prevState => ({ ...prevState, description: e.target.value }))}></textarea>\n                            </div>\n                          </div>\n                          <div className='lifestyle-input-block'>\n                            <h3 className='insight-title'>Lifestyle elements to include</h3>\n\n                            <div className='lifestyle-input-wrap'>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='primaries'></div>\n                                <h3>Primary schools</h3>\n                                <ReactSwitch\n                                  checked={listingFields.primary_schools === 1}\n                                  onChange={() => toggleStatus('primary_schools')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='secondaries'></div>\n                                <h3>Secondary schools</h3>\n                                <ReactSwitch\n                                  checked={listingFields.secondary_schools === 1}\n                                  onChange={() => toggleStatus('secondary_schools')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='tubes'></div>\n                                <h3>Tubes</h3>\n                                <ReactSwitch\n                                  checked={listingFields.tubes === 1}\n                                  onChange={() => toggleStatus('tubes')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='trains'></div>\n                                <h3>Trains</h3>\n                                <ReactSwitch\n                                  checked={listingFields.trains === 1}\n                                  onChange={() => toggleStatus('trains')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='evs'></div>\n                                <h3>Electric vehicles</h3>\n                                <ReactSwitch\n                                  checked={listingFields.evs === 1}\n                                  onChange={() => toggleStatus('evs')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n\n\n                                <div className='lifestyle-icon' id='restaurants'></div>\n                                <h3>Restaurants</h3>\n                                <ReactSwitch\n                                  checked={listingFields.restaurants === 1}\n                                  onChange={() => toggleStatus('restaurants')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n\n                                <div className='lifestyle-icon' id='pubs'></div>\n                                <h3>Pubs</h3>\n                                <ReactSwitch\n                                  checked={listingFields.pubs === 1}\n                                  onChange={() => toggleStatus('pubs')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='parks'></div>\n                                <h3>Parks</h3>\n                                <ReactSwitch\n                                  checked={listingFields.parks === 1}\n                                  onChange={() => toggleStatus('parks')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='gyms'></div>\n                                <h3>Gyms</h3>\n                                <ReactSwitch\n                                  checked={listingFields.gyms === 1}\n                                  onChange={() => toggleStatus('gyms')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='supermarkets'></div>\n                                <h3>Supermarkets</h3>\n                                <ReactSwitch\n                                  checked={listingFields.supermarkets === 1}\n                                  onChange={() => toggleStatus('supermarkets')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='crime'></div>\n                                <h3>Crime</h3>\n                                <ReactSwitch\n                                  checked={listingFields.crime === 1}\n                                  onChange={() => toggleStatus('crime')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                            </div>\n\n                          </div>\n                          <div className='listing-search-section'>\n                            <button className='load-insights' onClick={() => loadPostcodeData('listing_normal_total')}>Load description</button>\n                          </div>\n                        </div>\n                      </div>\n                      <section className='full-listing-outputs'>\n                        <div className='results-header'>\n                          <div className='header-text'>\n                            <h3 className='results-title'>Your listing</h3>                          \n                          </div>\n                          <div className='header-cta'>\n                            <div className='copy-button' onClick={handleCopyText}>\n                              <div className='copy-icon'></div>\n                              <h3>Copy</h3>\n                            </div>\n                          </div>\n\n                        </div>\n\n                        <div className='results-section' ref={textDivRef}>\n                          <div className='results-description'>\n                            {postcodeData && listingFields.description !== '' ? <h3>{listingFields.description}</h3> : ''}\n\n                          </div>\n                          {postcodeData ? <h3 className='results-sub-title'>What you should know about this area</h3> : ''}\n\n                          {restaurants1 && listingFields.restaurants === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='restaurants'></div>\n                                  <h3>Restaurants</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{restaurants1.length} restaurants within 15 mins walk</li>\n                                    <li>more than {cuisines} cuisines available</li>\n                                    <li>{topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</li>\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {pubs1 && listingFields.pubs === 1 ?\n\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='pubs'></div>\n                                  <h3>Pubs</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{pubs1.length} pubs within 15 mins walk</li>\n                                    <li>{topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</li>\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {primaryData1 && listingFields.primary_schools === 1 ?\n\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='primaries'></div>\n                                  <h3>Primary schools</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    {primaryData1.slice(0, 5).map((school, index) => (\n                                      <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                    ))}\n                                  </ul>\n\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n\n                          {secondaryData1 && listingFields.secondary_schools === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='secondaries'></div>\n                                  <h3>Secondary schools</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    {secondaryData1.slice(0, 5).map((school, index) => (\n                                      <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                    ))}\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {gyms1 && listingFields.gyms === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='gyms'></div>\n                                  <h3>Gyms</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{gyms1.length} gyms within 15 mins walk</li>\n                                    {mainGyms.length === 3 ? <li>includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</li> : mainGyms.length === 2 ? <li>includes {mainGyms[0]} & {mainGyms[1]} </li> : mainGyms.length === 1 ? <li>includes {mainGyms[0]}</li> : ''}\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {supermarkets1 && listingFields.supermarkets === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='supermarkets'></div>\n                                  <h3>Supermarkets</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>🛒 {supermarkets1.length} supermarkets within 15 mins walk</li>\n                                    {mainSupermarkets.length === 3 ? <li>🛒 includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</li> : mainSupermarkets.length === 2 ? <li>🛒 includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </li> : mainSupermarkets.length === 1 ? <li>🛒 includes {mainSupermarkets[0]}</li> : ''}\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {tubes1 && listingFields.tubes === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='tubes'></div>\n                                  <h3>Tubes</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{tubes1.length} stations within 20 mins walk</li>\n                                    {\n                                      tubes1.slice(0, 3).map((train, index) => (\n                                        <li key={index}>{train.station_name} - {train.line} - {train.walkTimeMin} mins walk</li>\n                                      ))\n                                    } </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {trains1 && listingFields.trains === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='trains'></div>\n                                  <h3>Trains</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{trains1.length} stations within 20 mins walk</li>\n                                    {\n                                      trains1.slice(0, 3).map((train, index) => (\n                                        <li key={index}>{train.station} - {train.walkTimeMin} mins walk</li>\n                                      ))\n                                    }\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {postcodeData && listingFields.parks === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='parks'></div>\n                                  <h3>Parks</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name0} - {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name1} - {Math.ceil((((postcodeData[0].parks_postcode.distance1) / 1000) / 5) * 60)} mins walk</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name2} - {Math.ceil((((postcodeData[0].parks_postcode.distance2) / 1000) / 5) * 60)} mins walk</li>\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {ev1 && listingFields.evs === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='evs'></div>\n                                  <h3>Electric vehicle charging</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</li>\n                                    <li>in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</li>\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                        </div>\n                      </section>\n                    </div>\n                  </>\n\n                  : listingSelection === 'AI listing generator' && userData &&\n                    ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                      (userData.usage_stats[0].package === 'Unlimited') ||\n                      (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n\n                    <>\n                      <AIListingGenrator />\n                    </>\n\n\n\n                    : ''}\n\n\n\n\n\n\n              {/* </div> */}\n\n\n\n              {/* </div> */}\n              {/* </div> */}\n\n\n\n            </section>\n          </section>\n        </section>\n\n\n      </section>\n\n\n\n    </>\n  )\n}\n\nexport default ListingGenerator\n\n\n\n\n\n\n//   \n\n//   {/* Parks */}\n//   {postcodeData && listingFields.parks === 1 ? \n//     <>\n//       <div className='lifestyle-block'>\n//         <h4>Green space</h4>\n//         <h5>🌳 within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</h5>\n//         <h5>🌳 {postcodeData[0].parks_postcode.park_name0} - {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</h5>\n//         <h5>🌳 {postcodeData[0].parks_postcode.park_name1} - {Math.ceil((((postcodeData[0].parks_postcode.distance1) / 1000) / 5) * 60)} mins walk</h5>\n//         <h5>🌳 {postcodeData[0].parks_postcode.park_name2} - {Math.ceil((((postcodeData[0].parks_postcode.distance2) / 1000) / 5) * 60)} mins walk</h5>\n//       </div>\n//     </>\n//     : '' }\n//   {/* EVs */}\n//   {postcodeData && listingFields.evs === 1 ? \n//     <>\n//       <div className='lifestyle-block'>\n//         <h4>Electric vehicles</h4>\n//         <h5>🚇 {postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</h5>\n//         <h5>🚇 in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</h5>\n//       </div>\n//     </>\n//     : '' }\n\n\n\n// </div>"],"names":["_ref","addressSubstring","postcodeSubstring","listingFields","postcodeData","topPrimaries","topSecondaries","restaurants1","cuisines","topRestaurants","gyms1","mainGyms","supermarkets1","mainSupermarkets","pubs1","topPubs","tubes1","trains1","setInsightView","primaryData1","setPrimaryData1","secondaryData1","setSecondaryData1","setTubes1","setRestaurants1","setPubs1","setSupermarkets1","setGyms1","ev1","setEv1","propertyView","setPropertyView","useState","neighbourhoodScore","setNeighbourhoodScore","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","sliderSelection","setSliderSelection","tableMapView","setTableMapView","useEffect","calculateScore","calculation","Math","ceil","crime","percentile","ev","fitness","parks_lsoa","london_percentile","restaurants","normal_percentile","supermarkets","tubes","_jsx","_Fragment","children","_jsxs","className","onClick","channel","id","PropertySummary","SchoolHighlights","LifestyleHighlights","TransportHighlights","NeighbourhoodHighlights","PropertyDetailSlider","placeholder","PrimaryDetails","listType","SecondaryDetails","TubeDetails","RestaurantDetails","PubDetails","SupermarketDetails","FitnessDetails","EVDetails","axios","defaults","xsrfCookieName","xsrfHeaderName","ListingGenerator","navigate","useNavigate","errors","setErrors","userData","setUserData","loading","setLoading","textDivRef","useRef","search","setSearch","profileContent","setProfileContent","profileDetail","setProfileDetail","insightView","listingSelection","setListingSelection","setPostcodeSubstring","setAddressSubstring","setListingFields","postcode","address","description","bedrooms","bathrooms","property_type","tenure","size","on_road_parking","off_road_parking","balcony","primary_schools","secondary_schools","trains","pubs","gyms","parks","evs","aiFields","setAiFields","setPostcodes","primaryData","setPrimaryData","secondaryData","setSecondaryData","setTopPrimaries","setTopSecondaries","setRestaurants","setGyms","setPubs","setSupermarkets","setEv","setCuisines","setTopRestaurants","setTopPubs","setMainGyms","setMainSupermarkets","setTubes","setTrains","setTrains1","aiSearch","setAiSearch","aiReady","setAiReady","searchGo","setSearchGo","isUserAuth","async","data","get","getUserToken","headers","Authorization","getAccessToken","error","console","log","getUser","loadPostcodeData","listingType","post","increaseUsageCount","modifiedData","request_type","setResultsToLocalStorage","token","window","localStorage","setItem","JSON","stringify","loadPrimaryData","getPrimaries","walkDistanceKm20","R","toRad","value","PI","kmPerMinute","getNearbyPrimaries","nearbyPrimaries","filter","item","dLat","parseFloat","latitude","longitude","dLon","a","sin","cos","c","atan2","sqrt","distanceKm","distance_between","walkTimeMin","round","distancePercent","max_distance","school_type","within_catchment","additional_status","sort","b","firstSchoolNames","slice","loadSecondaryData","getSecondaries","getNearbySecondaries","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","includes","loadRestaurantData","getData","walkDistanceKm15","getNearbyRestaurants","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","map","restaurant_name","Set","countUniqueCuisines","prevState","length","loadFitnessData","getNearbyStudios","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","gym","gym_group","toLowerCase","has","push","add","loadSupermarketData","getNearbySupermatkets","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","loadTubesData","getNearbyTubes","nearbyTubes","lat","station_name","loadEVdata","nearbyChargers","loadPubsData","getNearbyPubs","nearbyPubs","topThreePubs","pub","name","loadTrainsData","getNearbyTrains","nearbyTrains","toggleStatus","key","prevData","column","status","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","style","height","marginTop","borderBottom","textUnderlineOffset","fontWeight","removeItem","usage_stats","package","listing_monthly_count","type","onChange","e","target","toUpperCase","replace","handleInsightClick","PropertyInsightsOverview","rows","ReactSwitch","checked","onColor","offColor","uncheckedIcon","checkedIcon","handleCopyText","text","current","innerText","textarea","document","createElement","body","appendChild","select","execCommand","removeChild","ref","school","index","school_name","ofsted_results","train","line","station","parks_postcode","park_name0","distance0","park_name1","distance1","park_name2","distance2","ev_10_mins","AIListingGenrator"],"sourceRoot":""}