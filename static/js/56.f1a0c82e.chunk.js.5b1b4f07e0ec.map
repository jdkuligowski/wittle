{"version":3,"file":"static/js/56.f1a0c82e.chunk.js","mappings":"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","sources":["components/auth/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport { isEmail, isLength, matches } from 'validator'\nimport NavBar from '../tools/NavBar'\n\n\nconst Register = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'email') {\n      if (!isEmail(registerData.email)) {\n        setRegisterError({ ...registerError, email: 'Invalid email address' })\n      } else {\n        setRegisterError({ ...registerError, email: '' })\n      }\n  \n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  return (\n    <>\n      <NavBar\n        navbarColour='#051885'\n      />\n\n      <section className='login-page'>\n        <section className='wrapper'>\n          <section className='register-content'>\n            <form className='form-detail' onSubmit={registerSubmit} >\n              <div className='register-title'>\n                <h1>Unlock the benefits of Wittle</h1>\n              </div>\n              {/* First name */}\n              <p>First name</p>\n              <input type='text' name='first_name' className='input' value={registerData.first_name} onChange={registerChange} />\n              {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n              {/* Last namee */}\n              <p>Last name</p>\n              <input type='text' name='last_name' className='input' value={registerData.last_name} onChange={registerChange} />\n              {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n              {/* Email */}\n              <p>Email</p>\n              <input type='email' name='email' className='input' value={registerData.email} onChange={registerChange} />\n              {registerError.email && <p className=\"error\">* {registerError.email}</p>}\n              {/* Username */}\n              <p>Username</p>\n\n              <input type='text' name='username' className='input' value={registerData.username} onChange={registerChange} />\n              {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n              {/* Password */}\n              <p>Password</p>\n\n              <div className='login-input'>\n                <input type={registerPasswordType} name='password' className='password-input-register' value={registerData.password} onChange={registerChange} />\n                <div className='password-icon-container' onClick={passwordRegisterReveal}>\n                  <div className='password-icon'></div>\n                </div>\n              </div>\n              {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n              {/* Password confirmation */}\n              <p>Confirm password</p>\n\n              <input type='password' name='password_confirmation' className='input' value={registerData.password_confirmation} onChange={registerChange} />\n              {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n\n              <button type='submit'>Register</button>\n              {registerError.post && <p className=\"error\">* {registerError.post}</p>}\n\n            </form>\n          </section>\n          <h5>Already have an account? <Link to={'/login'}>\n            <span>Login</span></Link> </h5>\n        </section>\n      </section>\n    </>\n  )\n}\n\nexport default Register"],"names":["useNavigate","loginPasswordType","setLoginPasswordType","useState","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","email","username","password","password_confirmation","first_name","last_name","registerError","setRegisterError","post","registerChange","e","target","name","value","length","isEmail","passwordError","hasUppercase","matches","hasLowercase","hasDigit","hasSpecialChar","isLength","min","validatePassword","navbarColour","className","onSubmit","async","preventDefault","axios","data","token","window","localStorage","setItem","console","log","err","type","onChange","onClick","to"],"sourceRoot":""}