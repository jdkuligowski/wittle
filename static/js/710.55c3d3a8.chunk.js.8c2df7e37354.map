{"version":3,"file":"static/js/710.55c3d3a8.chunk.js","mappings":"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","sources":["components/auth/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport { isEmail, isLength, matches } from 'validator'\nimport NavBar from '../tools/NavBar'\n\n\nconst Register = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'email') {\n      if (!isEmail(registerData.email)) {\n        setRegisterError({ ...registerError, email: 'Invalid email address' })\n      } else {\n        setRegisterError({ ...registerError, email: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      // const { data } = await axios.post('/api/auth/login/', registerData)\n      // setUserTokenToLocalStorage(data.token)\n      // window.localStorage.setItem('wittle-username', data.username)\n      // console.log('username ->', data.username)()\n      // setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  return (\n    <>\n      {/* <NavBar\n        navbarColour='#051885'\n      /> */}\n\n      <section className='login-page' id='register'>\n        {/* <section className='wrapper'> */}\n        <section className='login-content'>\n          <div className='logo-section'>\n\n            <div className='wittle-logo' onClick={() => navigate('/')}></div>\n\n\n          </div>\n          {/* <form className='form-detail' onSubmit={registerSubmit} > */}\n          <div className='register-title'>\n            <h1>Unlock the benefits of Wittle</h1>\n          </div>\n          <div className='register-section'>\n            {/* First name */}\n            <div className='login-input'>\n              <h3>First name</h3>\n              <input type='text' name='first_name' className='input' value={registerData.first_name} onChange={registerChange} />\n              {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n            </div>\n            {/* Last namee */}\n            <div className='login-input'>\n\n              <h3>Last name</h3>\n              <input type='text' name='last_name' className='input' value={registerData.last_name} onChange={registerChange} />\n              {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n            </div>\n\n            {/* Email */}\n            <div className='login-input'>\n\n              <h3>Email</h3>\n              <input type='email' name='email' className='input' value={registerData.email} onChange={registerChange} />\n              {registerError.email && <p className=\"error\">* {registerError.email}</p>}\n            </div>\n\n            {/* Username */}\n            <div className='login-input'>\n\n              <h3>Username</h3>\n\n              <input type='text' name='username' className='input' value={registerData.username} onChange={registerChange} />\n              {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n            </div>\n\n            {/* Password */}\n            <div className='login-input'>\n\n              <h3>Password</h3>\n\n\n              <input type={registerPasswordType} name='password' className='password-input-register' value={registerData.password} onChange={registerChange} />\n\n              {/* <div className='login-input'>\n            <div className='password-icon-container' onClick={passwordRegisterReveal}>\n              <div className='password-icon'></div>\n            </div>\n          </div> */}\n              {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n            </div>\n\n            {/* Password confirmation */}\n            <div className='login-input'>\n\n              <h3>Confirm password</h3>\n\n              <input type='password' name='password_confirmation' className='input' value={registerData.password_confirmation} onChange={registerChange} />\n              {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n            </div>\n\n          </div>\n          <button type='submit' onClick={registerSubmit}>Register</button>\n          {registerError.post && <p className=\"error\">* {registerError.post}</p>}\n          {/* <h5>Already have an account? <Link to={'/login'}>\n            <span>Login</span></Link> </h5> */}\n          {/* </form> */}\n        </section>\n\n        {/* </section> */}\n      </section>\n    </>\n  )\n}\n\nexport default Register"],"names":["Register","navigate","useNavigate","loginPasswordType","setLoginPasswordType","useState","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","email","username","password","password_confirmation","first_name","last_name","registerError","setRegisterError","post","registerChange","e","target","name","value","length","isEmail","passwordError","hasUppercase","matches","hasLowercase","hasDigit","hasSpecialChar","isLength","min","validatePassword","_jsx","_Fragment","children","className","id","_jsxs","onClick","type","onChange","async","preventDefault","axios","err","console","log"],"sourceRoot":""}