{"version":3,"file":"static/js/844.9348ded4.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyList.js/ListingGenerator.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport { NumericFormat } from 'react-number-format'\nimport NavBar from '../../tools/NavBar'\nimport ProfileMobileSlider from '../../tools/ProfileMobileSlider'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport ReactSwitch from 'react-switch'\nimport AIListingGenrator from './AIListingGenrator'\n\n\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nconst ListingGenerator = () => {\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for loading\n  const [loading, setLoading] = useState()\n\n  // Create a reference to the div\n  const textDivRef = useRef(null)\n\n  // set state for completing a search\n  const [search, setSearch] = useState(false)\n  \n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Listing generator')\n  const [profileDetail, setProfileDetail] = useState('Listing generator')  \n  \n  // lisrting options\n  const [listingSelection, setListingSelection] = useState('Property insights')\n  \n  const [postcodeSubstring, setPostcodeSubstring] = useState('')\n\n  const [addressSubstring, setAddressSubstring] = useState('')\n\n\n  // listing generator form\n  const [listingFields, setListingFields] = useState({\n    postcode: '',\n    address: '',\n    description: '',\n    channel: '',\n    bedrooms: '',\n    bathrooms: '',\n    property_type: '',\n    tenure: '',\n    size: '',\n    on_road_parking: '',\n    off_road_parking: '',\n    balcony: '',\n    primary_schools: 0,\n    secondary_schools: 0,\n    tubes: 0,\n    trains: 0,\n    restaurants: 0,\n    pubs: 0,\n    supermarkets: 0,\n    gyms: 0,\n    parks: 0,\n    evs: 0,\n    crime: 0,\n  })\n\n\n  // ai listing fields\n  const [aiFields, setAiFields] = useState({ \n    'location': '',\n    'size': '',\n    'property_type': '',\n    'bedrooms': '',\n    'bathrooms': '',\n    'en_suites': '',\n    'amenities': [],\n    'channel': '',\n    'additional_info': '',\n    'price': '',\n    'restaurants': '',\n    'pubs': '',\n    'supermarkets': '',\n    'tube': '',\n    'trains': '',\n    'parks': '',\n    'evs': '',\n    'primary_schools': '',\n    'secondary_schools': '',\n    'gyms': '',\n  })\n\n  // features to include in checkbox: \n  const features = [\n    'balcony', 'on-road parking', 'off-road parking', \n    'private gated', 'private garage', 'shared garage', \n    'lift', 'open-plan', 'concierge', 'gym', \n    'pool & spa', 'penthouse', 'duplex', 'garden'\n  ]\n\n\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants]  = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  const [aiSearch, setAiSearch] = useState()\n\n  const [aiReady, setAiReady] = useState(false)\n\n  // start ai seearch\n  const [searchGo, setSearchGo] = useState(false)\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = async (listingType) => {\n    try {\n\n      // if its an ai load, then we need to set a state to organise the loading of the dataset\n      if (listingType === 'listing_ai_total') {\n        setAiReady(false) // Before loading the data for AI\n      }\n\n      // we need to access the postcode data in all eventualities\n      const { data } = await axios.post('/api/postcodes/', { postcode: postcodeSubstring })\n      console.log('postcode data ->', data)\n      setPostcodes(data)\n\n      increaseUsageCount(listingType) // Pass the listing type to the increaseUsageCount function\n\n      // if the postcode data arrives and its an ai search, we want to load the rest of the data\n      if (listingType === 'listing_ai_total') {\n        setSearchGo(true)\n      }\n\n      // if its just an insights load, wee want to add this to th db then navigate to the insights page\n      if (listingType === 'listing_insight_total') {\n        // const { data } = await axios.get(`/api/postcodes/${postcodeSubstring}`)\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Insights',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        }) \n        setResultsToLocalStorage()\n        navigate('/agents/property')\n        // navigate(`/agents/property/${postcodeSubstring}`)\n      }\n\n      // if its a normal listing build, then we want to run the code for that\n      if (listingType === 'listing_normal_total') {\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Listing',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        }) \n      }\n\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n\n  // define function for setting results to storage\n  const setResultsToLocalStorage = (token) => {\n    window.localStorage.setItem('listing-postcode', JSON.stringify(postcodeSubstring))\n  }\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n  \n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n  \n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n    \n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n          Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n          Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n          Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n    \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n  \n      // handle independent schools\n      if (item.school_type ===  'Independent school') {\n        item.within_catchment =  'N/a'\n  \n        // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n  \n        // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n  \n        // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n  \n        // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n        \n        // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n  \n        // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n  \n        // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n        \n        // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n      \n      return distanceKm <= walkDistanceKm20\n  \n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n  \n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n  \n  \n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n    \n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n  \n  \n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      }  else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n      // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n      // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n      // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n      // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n      // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n  \n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n    \n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n    if (listingFields.restaurants === 1) {\n      setAiFields(prevState => ({ \n        ...prevState, \n        restaurants: `${nearbyRestaurants.length} restaurants within 15 min walk, with more than ${cuisines} cuisines available`  }))\n    }\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n    // extract the key studios\n    const topThreeStudios = []\n  \n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n        \n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n    if (listingFields.gyms === 1) {\n      setAiFields(prevState => ({ \n        ...prevState, \n        gyms: `${nearbyStudios.length} gyms within 15 min walk, including ${topThreeStudios[0]} and  ${topThreeStudios[1]}`  }))\n    }\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n    \n    // extract the key studios\n    const topThreeSupermarkets = []\n  \n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_store_name)) {\n        topThreeSupermarkets.push(supermarket.supermarket_store_name)\n        uniqueSupermarkets.add(supermarket.supermarket_store_name)\n        \n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    console.log('Nearby supermarkets ->', nearbySupermarkets)\n    if (listingFields.supermarkets === 1) {\n      setAiFields(prevState => ({ \n        ...prevState, \n        supermarkets: `${nearbySupermarkets.length} supermarkets within 15 min walk, including ${topThreeSupermarkets[0]} and ${topThreeSupermarkets[1]}`  }))\n    }\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n  \n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n    \n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n\n    if (listingFields.tubes === 1) {\n      setAiFields(prevState => ({ \n        ...prevState, \n        tubes: `${nearbyTubes.length} within 15 min walk, including ${nearbyTubes[0].station_name} and ${nearbyTubes[1].station_name}`  }))\n    }\n    \n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n  \n  // function for restaurants with least walking distance\n  const getNearbyChargers = () => {\n\n    // Average walking speed is 5km/h. \n    const walkDistanceKm10 = 5 * (10 / 60)\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyChargers = ev.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm10\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n\n    setEv1(nearbyChargers)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (ev) {\n      getNearbyChargers()\n    }\n  }, [ev])\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  \n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n  \n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Load and sort tubes data\n  const loadTrainsData = () => {\n  // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n  \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n      Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n  \n\n    setTrains1(nearbyTrains)\n    console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n\n  // calculation to determine the inputs on the form and the toggle\n  const toggleStatus = (key) => {\n    setListingFields(prevData => ({\n      ...prevData,\n      [key]: prevData[key] === 1 ? 0 : 1,\n    }))\n  }\n\n\n  // Copy function\n  const handleCopyText = () => {\n    const text = textDivRef.current.innerText\n\n    // Copy text to clipboard\n    const textarea = document.createElement('textarea')\n    textarea.value = text\n    document.body.appendChild(textarea)\n    textarea.select()\n    document.execCommand('copy')\n    document.body.removeChild(textarea)\n  }\n\n\n\n  // Increase value in db based on successful response\n  const increaseUsageCount = async (listingType) => {\n    console.log('trying to increase')\n    try {\n      const { data } = await axios.post('/api/usage/listing/', { column: listingType }, {\n        headers: {\n          Authorization: `Bearer ${getAccessToken()}`,\n        },\n      })\n      console.log(data)\n      if (data.status === 'success') {\n        console.log('Usage count increased successfully')\n      } else {\n        console.error('Failed to increase usage count:', data.message)\n      }\n    } catch (error) {\n      console.error('Error:', error)\n    }\n  }\n\n\n\n  const handleCheckboxChange = (feature) => {\n    setAiFields(prev => {\n      // Check if the feature is already in the amenities array\n      if (prev.amenities.includes(feature)) {\n        // If it is, remove it\n        return { \n          ...prev, \n          amenities: prev.amenities.filter(a => a !== feature),\n        }\n      } else {\n        // If it isn’t, add it\n        return { \n          ...prev, \n          amenities: [...prev.amenities, feature],\n        }\n      }\n    })\n  }\n\n\n  const handleInsightClick = () => {\n    loadPostcodeData('listing_insight_total')\n    setListingFields(prevState => ({ ...prevState, request_type: 'insights' }))\n  }\n\n\n\n  return (\n\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          setProfileContent={setProfileContent} \n          userData={userData}\n        />    \n\n        <section className='listing-generator'> \n          {/* <h1>Wittle listing generator</h1> */}\n          {/* <h1>Insert your property details to build a listing or explore insights</h1> */}\n\n          <div className='listing-options'>\n            <h5 className='no-print' onClick={() => setListingSelection('Property insights')} style={{ textDecoration: listingSelection === 'Property insights' ? 'underline 3px #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Property insights' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Property insights' ? '700' : '400' }}>Property insights</h5>\n            <h5 className='no-print' onClick={() => setListingSelection('Listing generator')} style={{ textDecoration: listingSelection === 'Listing generator' ? 'underline 3px #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Listing generator' ? '700' : '400'  }}>Listing generator</h5>\n            {/* <h5 className='no-print' onClick={() => setListingSelection('AI listing generator')} style={{ textDecoration: listingSelection === 'AI listing generator' ? 'underline 3px #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'AI listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'AI listing generator' ? '700' : '400'  }}>AI listing generator</h5> */}\n          \n          </div>\n          <div className='listing-wrapper'>\n\n            <div className='insight-inputs'>\n              {listingSelection === 'Property insights' && userData && \n                ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                (userData.usage_stats[0].package === 'Unlimited') ||\n                (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ? \n                <>\n                  <h3>Insert full postcode to extract details about property</h3>\n                  <div className='input-block'>\n                    <h3>📍 Postcode</h3>\n                    <input\n                      type=\"text\"\n                      value={postcodeSubstring}\n                      onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                      placeholder=\"Enter postcode...\"></input>\n                  </div>\n                  <div className='input-block'>\n                    <h3>📍 Address</h3>\n                    <input\n                      type=\"text\"\n                      value={addressSubstring}\n                      onChange={e => {\n                        const value = e.target.value\n                        setAddressSubstring(value)\n                        setListingFields(prevData => ({ ...prevData, address: value }))\n                      }}\n                      placeholder=\"Enter address...\"></input>\n                  </div>\n                  <div className='input-block'>\n                    <h3>🏷 Channel</h3>\n\n                    <select className='listing-dropdown'onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                      <option>--- Select ---</option>\n                      <option>Sales</option>\n                      <option>Rental</option>\n                    </select>\n                  </div>\n                  <button onClick={handleInsightClick}>See insights</button>\n                </>\n                : listingSelection === 'Listing generator' && userData && \n                ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                (userData.usage_stats[0].package === 'Unlimited') ||\n                (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n                  <>\n                    <h3>Input details and select features you want to include your listing</h3>\n                    <div className='input-block'>\n                      <h3>📍 Postcode</h3>\n                      <input\n                        type=\"text\"\n                        value={postcodeSubstring}\n                        onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                        placeholder=\"Enter postcode...\"></input>\n                    </div>\n                    <div className='input-block'>\n                      <h3>📍 Address</h3>\n                      <input\n                        type=\"text\"\n                        value={addressSubstring}\n                        onChange={e => {\n                          const value = e.target.value\n                          setAddressSubstring(value)\n                          setListingFields(prevData => ({ ...prevData, address: value }))\n                        }}\n                        placeholder=\"Enter address...\"></input>\n                    </div>\n                    <div className='input-block'>\n                      <h3>🏷 Channel</h3>\n\n                      <select className='listing-dropdown'onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                        <option>--- Select ---</option>\n                        <option>Sales</option>\n                        <option>Rental</option>\n                      </select>\n                    </div>\n                    <div className='input-block'>\n                      <h3>✍🏼 Description</h3>\n                      <textarea id=\"description\" value={listingFields.description} rows=\"5\" placeholder='Enter your description here...' onChange={e => setListingFields(prevState => ({ ...prevState, description: e.target.value }))}></textarea>\n                    </div>\n                    <h3 className='lifestyle-indicator'>Lifestyle elements to include</h3>\n                    <div className='input-block'>\n                      <h3>👶 Primary schools</h3>\n                      <ReactSwitch\n                        checked={listingFields.primary_schools === 1}\n                        onChange={() => toggleStatus('primary_schools')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🎓 Secondary schools</h3>\n                      <ReactSwitch\n                        checked={listingFields.secondary_schools === 1}\n                        onChange={() => toggleStatus('secondary_schools')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🚇 Tubes</h3>\n                      <ReactSwitch\n                        checked={listingFields.tubes === 1}\n                        onChange={() => toggleStatus('tubes')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🚈 Trains</h3>\n                      <ReactSwitch\n                        checked={listingFields.trains === 1}\n                        onChange={() => toggleStatus('trains')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>⛽️ Electric vehicles</h3>\n                      <ReactSwitch\n                        checked={listingFields.evs === 1}\n                        onChange={() => toggleStatus('evs')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🍽 Restaurants</h3>\n                      <ReactSwitch\n                        checked={listingFields.restaurants === 1}\n                        onChange={() => toggleStatus('restaurants')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🍺 Pubs</h3>\n                      <ReactSwitch\n                        checked={listingFields.pubs === 1}\n                        onChange={() => toggleStatus('pubs')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🌳 Parks</h3>\n                      <ReactSwitch\n                        checked={listingFields.parks === 1}\n                        onChange={() => toggleStatus('parks')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🏋️‍♂️ Gyms</h3>\n                      <ReactSwitch\n                        checked={listingFields.gyms === 1}\n                        onChange={() => toggleStatus('gyms')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🛒 Supermarkets</h3>\n                      <ReactSwitch\n                        checked={listingFields.supermarkets === 1}\n                        onChange={() => toggleStatus('supermarkets')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n                    <div className='input-block'>\n                      <h3>🚔 Crime</h3>\n                      <ReactSwitch\n                        checked={listingFields.crime === 1}\n                        onChange={() => toggleStatus('crime')}\n                        onColor='#ED6B86'\n                        offColor='#051885'  \n                      />\n                    </div>\n\n                    <button onClick={() => loadPostcodeData('listing_normal_total')}>Load description</button>\n\n                  </>\n\n                  : listingSelection === 'AI listing generator' && userData && \n                  ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                  (userData.usage_stats[0].package === 'Unlimited') ||\n                  (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n\n                    <>\n                      <AIListingGenrator />\n                      {/* <h3>Input details and select features you want to include your listing</h3>\n                      <div className='input-block'>\n                        <h3>📍 Postcode</h3>\n                        <input\n                          type=\"text\"\n                          value={postcodeSubstring}\n                          onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                          placeholder=\"Enter postcode...\"></input>\n                      </div>\n                      <div className='input-block'>\n                        <h3>📍 Location</h3>\n                        <input\n                          type=\"text\"\n                          value={aiFields.location}\n                          onChange={e => setAiFields(prevState => ({ ...prevState, location: e.target.value }))}\n                        ></input>\n                      </div>\n                      <div className='input-block'>\n                        <h3>🌍 Size</h3>\n                        <input\n                          type=\"number\"\n                          value={aiFields.size}\n                          onChange={e => setAiFields(prevState => ({ ...prevState, size: e.target.value }))}\n                        ></input>\n                      </div>\n                      <div className='input-block'>\n                        <h3>🛌 Bedrooms</h3>\n                        <select className='listing-dropdown' onChange={e => setAiFields(prevState => ({ ...prevState, bedrooms: e.target.value }))}>\n                          <option value={0}>Studio</option>\n                          <option>1</option>\n                          <option>2</option>\n                          <option>3</option>\n                          <option>4</option>\n                          <option>5</option>\n                          <option>6</option>\n                          <option>7</option>\n                        </select>\n                      </div>\n                      <div className='input-block'>\n                        <h3>🛁 Bathrooms</h3>\n                        <select className='listing-dropdown' onChange={e => setAiFields(prevState => ({ ...prevState, bathrooms: e.target.value }))}>\n                          <option>0</option>\n                          <option>1</option>\n                          <option>2</option>\n                          <option>3</option>\n                          <option>4</option>\n                          <option>5</option>\n                          <option>6</option>\n                          <option>7</option>\n                        </select>\n                      </div>\n                      <div className='input-block'>\n                        <h3>🏡 Property type</h3>\n                        <select className='listing-dropdown' onChange={e => setAiFields(prevState => ({ ...prevState, property_type: e.target.value }))}>\n                          <option>Flat</option>\n                          <option>Bungalow</option>\n                          <option>Terraced house</option>\n                          <option>Semi-detached house</option>\n                          <option>Detached house</option>\n                        </select>\n                      </div>\n                      <div className='input-block' >\n                        <h3>🏷 Channel</h3>\n                        <select className='listing-dropdown'onChange={e => setAiFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                          <option>Sales</option>\n                          <option>Rental</option>\n                        </select>\n                      </div>\n                      <div className='input-block' >\n                        <h3>🏷 Additional info</h3>\n                        {aiFields.channel === 'Sales' ? \n                          <select className='listing-dropdown' onChange={e => setAiFields(prevState => ({ ...prevState, additional_info: e.target.value }))}>\n                            <option>Freehold</option>\n                            <option>Share of Freehold</option>\n                            <option>Leasehold</option>\n                          </select>\n                          : aiFields.channel === 'Rental' ? \n                            <select className='listing-dropdown' onChange={e => setAiFields(prevState => ({ ...prevState, additional_info: e.target.value }))}>\n                              <option>Furnished</option>\n                              <option>Unfurnished</option>\n                              <option>Part furnished</option>\n                              <option>Furnished or unfurnished</option>\n                            </select>\n                            : ''}\n                      </div>\n                      <div className='input-block' onChange={e => setAiFields(prevState => ({ ...prevState, price: e.target.value }))}>\n                        <h3>💷 Price</h3>\n                        <input\n                          type=\"number\"\n                          value={aiFields.price}\n                          onChange={e => setAiFields(prevState => ({ ...prevState, price: e.target.value }))}\n                        ></input>\n                      </div>\n\n                      <div className='input-block' id='features'>\n                        <h3>Feature Selector</h3>\n                        <div className='feature-section'>\n                          {features.map(feature => (\n                            <div key={feature}>\n                              <label>\n                                <input className='checkbox'\n                                  type=\"checkbox\"\n                                  checked={aiFields.amenities.includes(feature)}\n                                  onChange={() => handleCheckboxChange(feature)}\n                                />\n                                {feature}\n                              </label>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n\n                    \n                      <h3 className='lifestyle-indicator'>Lifestyle elements to include</h3>\n                      <div className='input-block'>\n                        <h3>👶 Primary schools</h3>\n                        <ReactSwitch\n                          checked={listingFields.primary_schools === 1}\n                          onChange={() => toggleStatus('primary_schools')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🎓 Secondary schools</h3>\n                        <ReactSwitch\n                          checked={listingFields.secondary_schools === 1}\n                          onChange={() => toggleStatus('secondary_schools')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🚇 Tubes</h3>\n                        <ReactSwitch\n                          checked={listingFields.tubes === 1}\n                          onChange={() => toggleStatus('tubes')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🚈 Trains</h3>\n                        <ReactSwitch\n                          checked={listingFields.trains === 1}\n                          onChange={() => toggleStatus('trains')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>⛽️ Electric vehicles</h3>\n                        <ReactSwitch\n                          checked={listingFields.evs === 1}\n                          onChange={() => toggleStatus('evs')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🍽 Restaurants</h3>\n                        <ReactSwitch\n                          checked={listingFields.restaurants === 1}\n                          onChange={() => toggleStatus('restaurants')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🍺 Pubs</h3>\n                        <ReactSwitch\n                          checked={listingFields.pubs === 1}\n                          onChange={() => toggleStatus('pubs')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🌳 Parks</h3>\n                        <ReactSwitch\n                          checked={listingFields.parks === 1}\n                          onChange={() => toggleStatus('parks')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🏋️‍♂️ Gyms</h3>\n                        <ReactSwitch\n                          checked={listingFields.gyms === 1}\n                          onChange={() => toggleStatus('gyms')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🛒 Supermarkets</h3>\n                        <ReactSwitch\n                          checked={listingFields.supermarkets === 1}\n                          onChange={() => toggleStatus('supermarkets')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n                      <div className='input-block'>\n                        <h3>🚔 Crime</h3>\n                        <ReactSwitch\n                          checked={listingFields.crime === 1}\n                          onChange={() => toggleStatus('crime')}\n                          onColor='#ED6B86'\n                          offColor='#051885'  \n                        />\n                      </div>\n\n                      <button onClick={loadPostcodeData}>Load description</button> */}\n                    </>\n                  \n                  \n                  \n                    : '' }\n\n\n\n\n\n\n            </div>\n            <div className='insight-inputs'>\n              {postcodeData ? \n                <div className='results-header'>\n                  <h3 className='results-title'>Your listing</h3>\n                  <h3 onClick={handleCopyText} className='copy-button'>📑</h3>\n                </div>\n                : '' }\n\n              <div className='input-block' ref={textDivRef}>\n                <div className='results-box' name=\"description\">\n                  {/* Description title */}\n                  {postcodeData && listingFields.description !== '' ? \n                    <>\n                      <div className='lifestyle-block'>\n                        <h1>About this property</h1>\n                        <p>{listingFields.description}</p>\n                      </div>\n                    </>\n\n                    : '' }\n\n\n\n                  {/* Lifestyle */}\n                  {postcodeData ? \n                    <h1>What you should know about this area</h1>\n                    : '' }\n                  {/* Restaurants */}\n                  {restaurants1 && listingFields.restaurants === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n                        <h4>Restaurants</h4>\n                        <h5>🍽 {restaurants1.length} restaurants within 15 mins walk</h5>\n                        <h5>🍽 more than {cuisines} cuisines available</h5>\n                        <h5>🍽 {topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</h5>\n                      </div>\n                    </>\n                    : '' }\n                  {/* Pubs */}\n                  {pubs1 && listingFields.pubs === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n\n                        <h4>Pubs</h4>\n                        <h5>🍺 {pubs1.length} pubs within 15 mins walk</h5>\n                        <h5>🍺 {topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</h5>\n                      </div>\n                    </>\n                    : '' }\n                  {/* Gyms */}\n                  {gyms1 && listingFields.gyms === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n\n                        <h4>Gyms</h4>\n                        <h5>🏋️‍♂️ {gyms1.length} gyms within 15 mins walk</h5>\n                        {mainGyms.length === 3 ? <h5>🏋️‍♂️ includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</h5> : mainGyms.length === 2 ? <h5>🏋️‍♂️ includes {mainGyms[0]} & {mainGyms[1]} </h5> : mainGyms.length === 1 ? <h5>🏋️‍♂️ includes {mainGyms[0]}</h5> : '' }\n                      </div>\n                    </>\n                    : '' }\n                  {/* Supermarkets */}\n                  {supermarkets1 && listingFields.supermarkets === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n\n                        <h4>Supermarkets</h4>\n                        <h5>🛒 {supermarkets1.length} supermarkets within 15 mins walk</h5>\n                        {mainSupermarkets.length === 3 ? <h5>🛒 includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</h5> : mainSupermarkets.length === 2 ? <h5>🛒 includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </h5> : mainSupermarkets.length === 1 ? <h5>🛒 includes {mainSupermarkets[0]}</h5> : '' }\n                      </div>\n                    </>\n                    : '' }\n                  {/* Tubes */}\n                  {tubes1 && listingFields.tubes === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n                        <h4>Tube stations</h4>\n                        <h5>🚇 {tubes1.length} stations within 20 mins walk</h5>\n                        {\n                          tubes1.slice(0, 5).map((train, index) => (\n                            <h5 key={index}>🚇 {train.station_name} - {train.line} - {train.walkTimeMin} mins walk</h5>\n                          ))\n                        }\n                      </div>\n                    </>\n                    : '' }\n                  {/* Trains */}\n                  {trains1 && listingFields.trains === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n                        <h4>Train stations</h4>\n                        <h5>🚈 {trains1.length} stations within 20 mins walk</h5>\n                        {\n                          trains1.slice(0, 5).map((train, index) => (\n                            <h5 key={index}>🚈 {train.station} - {train.walkTimeMin} mins walk</h5>\n                          ))\n                        }\n                      </div>\n                    </>\n                    : '' }\n                  {/* Parks */}\n                  {postcodeData && listingFields.parks === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n                        <h4>Green space</h4>\n                        <h5>🌳 within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</h5>\n                        <h5>🌳 {postcodeData[0].parks_postcode.park_name0} - {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</h5>\n                        <h5>🌳 {postcodeData[0].parks_postcode.park_name1} - {Math.ceil((((postcodeData[0].parks_postcode.distance1) / 1000) / 5) * 60)} mins walk</h5>\n                        <h5>🌳 {postcodeData[0].parks_postcode.park_name2} - {Math.ceil((((postcodeData[0].parks_postcode.distance2) / 1000) / 5) * 60)} mins walk</h5>\n                      </div>\n                    </>\n                    : '' }\n                  {/* EVs */}\n                  {postcodeData && listingFields.evs === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n                        <h4>Electric vehicles</h4>\n                        <h5>🚇 {postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</h5>\n                        <h5>🚇 in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</h5>\n                      </div>\n                    </>\n                    : '' }\n                  {/* Primary schools */}\n                  {primaryData1 && listingFields.primary_schools === 1 ? \n                    <>\n                      <div className='lifestyle-block'>\n                        <h4>Primary schools</h4>\n                        {\n                          primaryData1.slice(0, 5).map((school, index) => (\n                            <h5 key={index}>👶 {school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</h5>\n                          ))\n                        }\n                      </div>\n                    </>\n                    : '' }\n\n\n                </div>\n              </div>\n\n            </div>\n          </div>\n\n\n          \n        </section>\n\n\n      </section> \n\n\n\n    </>\n  )\n}\n\nexport default ListingGenerator"],"names":["axios","navigate","useNavigate","errors","setErrors","useState","userData","setUserData","loading","setLoading","textDivRef","useRef","search","setSearch","profileContent","setProfileContent","profileDetail","setProfileDetail","listingSelection","setListingSelection","postcodeSubstring","setPostcodeSubstring","addressSubstring","setAddressSubstring","listingFields","setListingFields","postcode","address","description","channel","bedrooms","bathrooms","property_type","tenure","size","on_road_parking","off_road_parking","balcony","primary_schools","secondary_schools","tubes","trains","restaurants","pubs","supermarkets","gyms","parks","evs","crime","aiFields","setAiFields","postcodeData","setPostcodes","primaryData","setPrimaryData","primaryData1","setPrimaryData1","secondaryData","setSecondaryData","secondaryData1","setSecondaryData1","topPrimaries","setTopPrimaries","topSecondaries","setTopSecondaries","setRestaurants","setGyms","setPubs","setSupermarkets","ev","setEv","restaurants1","setRestaurants1","gyms1","setGyms1","pubs1","setPubs1","supermarkets1","setSupermarkets1","ev1","setEv1","cuisines","setCuisines","topRestaurants","setTopRestaurants","topPubs","setTopPubs","mainGyms","setMainGyms","mainSupermarkets","setMainSupermarkets","setTubes","setTrains","tubes1","setTubes1","trains1","setTrains1","aiSearch","setAiSearch","aiReady","setAiReady","searchGo","setSearchGo","useEffect","isUserAuth","async","data","getUserToken","headers","Authorization","getAccessToken","console","log","error","getUser","loadPostcodeData","listingType","increaseUsageCount","modifiedData","request_type","setResultsToLocalStorage","token","window","localStorage","setItem","JSON","stringify","getPrimaries","loadPrimaryData","walkDistanceKm20","R","toRad","value","Math","PI","kmPerMinute","nearbyPrimaries","filter","item","dLat","parseFloat","latitude","longitude","dLon","a","sin","cos","c","atan2","sqrt","distanceKm","distance_between","walkTimeMin","round","distancePercent","max_distance","school_type","within_catchment","additional_status","sort","b","firstSchoolNames","slice","getNearbyPrimaries","getSecondaries","loadSecondaryData","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","includes","getNearbySecondaries","getData","loadRestaurantData","walkDistanceKm15","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","map","restaurant_name","Set","countUniqueCuisines","prevState","length","getNearbyRestaurants","loadFitnessData","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","gym","gym_group","toLowerCase","has","push","add","getNearbyStudios","loadSupermarketData","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","supermarket_store_name","getNearbySupermatkets","loadTubesData","nearbyTubes","lat","station_name","getNearbyTubes","loadEVdata","nearbyChargers","getNearbyChargers","loadPubsData","nearbyPubs","topThreePubs","pub","name","getNearbyPubs","loadTrainsData","nearbyTrains","getNearbyTrains","toggleStatus","key","prevData","column","status","message","className","navbarColour","onClick","style","textDecoration","textUnderlineOffset","fontWeight","usage_stats","package","listing_monthly_count","type","onChange","e","target","toUpperCase","replace","placeholder","id","rows","checked","onColor","offColor","text","current","innerText","textarea","document","createElement","body","appendChild","select","execCommand","removeChild","ref","train","index","line","station","parks_lsoa","london_percentile","parks_postcode","park_name0","ceil","distance0","park_name1","distance1","park_name2","distance2","ev_10_mins","percentile","school","school_name","ofsted_results"],"sourceRoot":""}