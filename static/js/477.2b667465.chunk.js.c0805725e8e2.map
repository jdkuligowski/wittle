{"version":3,"file":"static/js/477.2b667465.chunk.js","mappings":"uIAwCA,IAlCkB,KAMd,qBAASA,UAAU,0BAAyB,WAC1C,gBAAKA,UAAU,iBAAgB,UAC7B,iBAAKA,UAAU,qBAAoB,WACjC,gBAAKA,UAAU,cAAa,UAC1B,qBAEF,gBAAKA,UAAU,cAAa,UAC1B,qBAEF,gBAAKA,UAAU,cAAa,UAC1B,qBAEF,gBAAKA,UAAU,cAAa,UAC1B,qBAEF,gBAAKA,UAAU,cAAa,UAC1B,0BAIN,gBAAKA,UAAU,4B,oGCoBrB,IAzCoB,IAAuB,IAAtB,aAAEC,GAAc,EAGnC,MAOMC,GAAWC,EAAAA,EAAAA,MAGjB,OACE,+BACE,qBAASH,UAAU,uBAAuBI,MAAO,CAAEC,gBAAiBJ,GAAe,WACjF,gBAAKD,UAAU,eAAc,UAC3B,gBAAKA,UAAU,OAAM,UACnB,eAAIM,QAAS,IAAMJ,EAAS,KAAK,yBAKpCK,EAAAA,EAAAA,OACC,gBAAKP,UAAU,iBAAgB,UAC7B,eAAIA,UAAU,MAAMM,QAtBCE,IAC7BC,aAAaC,WAAW,qBACxBD,aAAaC,WAAW,mBACxBC,OAAOC,SAASC,QAAQ,EAmBmC,UAAC,yCAItD,gBAAKb,UAAU,iBAAgB,UAC7B,eAAIA,UAAU,MAAMM,QAAS,IAAMJ,EAAS,UAAU,UAAC,2CAM5D,C,oJC+EP,I,UCgdA,MA3jBmB,KAGjB,MAAOY,EAAgBC,IAAUC,EAAAA,EAAAA,WAAS,IACnCC,EAAiBC,IAAeF,EAAAA,EAAAA,WAAS,IACzCG,EAASC,IAAcJ,EAAAA,EAAAA,WAAS,IAChCK,EAAcC,IAAmBN,EAAAA,EAAAA,WAAS,IAC1CO,EAAkBC,IAAuBR,EAAAA,EAAAA,WAAS,IAClDS,EAAaC,IAAkBV,EAAAA,EAAAA,WAAS,IAGxCW,EAAQC,IAAaZ,EAAAA,EAAAA,aAIrBa,EAAUC,IAAed,EAAAA,EAAAA,UAAS,CACvCe,cAAc,EACdC,YAAa,GACbC,YAAa,SACbC,eAAgB,SAChBC,sBAAsB,EACtBC,oBAAqB,GACrBC,oBAAqB,GACrBC,qBAAsB,GACtBC,qBAAsB,GACtBC,oBAAoB,EACpBC,kBAAmB,GACnBC,kBAAmB,GACnBC,mBAAoB,GACpBC,mBAAoB,GACpBC,gBAAgB,EAChBC,cAAe,GACfC,gBAAiB,GACjBC,eAAgB,GAChBC,aAAc,GACdC,eAAgB,GAChBC,gBAAgB,EAChBC,cAAe,GACfC,YAAa,GACbC,cAAe,GACfC,iBAAiB,EACjBC,eAAgB,GAChBC,aAAc,GACdC,eAAgB,GAChBC,mBAAmB,EACnBC,iBAAkB,GAClBC,aAAc,GACdC,iBAAkB,GAClBC,mBAAmB,EACnBC,iBAAkB,GAClBC,aAAc,GACdC,iBAAkB,GAClBC,qBAAqB,EACrBC,mBAAoB,GACpBC,eAAgB,GAChBC,mBAAoB,GACpBC,uBAAuB,EACvBC,qBAAsB,GACtBC,oBAAqB,GACrBC,iBAAkB,GAClBC,qBAAsB,GACtBC,eAAe,EACfC,gBAAiB,GACjBC,eAAgB,GAChBC,aAAc,GACdC,gBAAgB,EAChBC,UAAW,GACXC,cAAe,GACfC,qBAAqB,EACrBC,iBAAkB,GAClBC,oBAAqB,GACrBC,mBAAoB,GACpBC,kBAAkB,EAClBC,gBAAiB,GACjBC,kBAAmB,GACnBC,gBAAiB,GACjBC,kBAAmB,EACnBC,gBAAiB,GACjBC,kBAAmB,EACnBC,cAAe,GACfC,cAAe,GACfC,cAAe,GACfC,mBAAoB,IACpBC,mBAAoB,WACpBC,iBAAkB,IAClBC,iBAAkB,IAClBC,cAAe,MACfC,MAAO,MAITC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAOC,KAAKC,MAAMjG,aAAakG,QAAQ,sBACzCH,GAAM1E,EAAY0E,EAAK,GAC1B,KASHD,EAAAA,EAAAA,YAAU,KANY,MACpB,MACMK,EADQ,CAAC/E,EAASM,qBAAsBN,EAASkB,gBAAiBlB,EAASW,mBAAoBX,EAASgB,gBAC1FgE,OAAOC,SAASC,OACpCnF,EAAUgF,EAAM,EAIhBI,EAAe,IAMjB,MAAMC,EAAeC,IACnBpF,EAAY,IAAKD,EAAU,CAACqF,EAAEC,OAAOC,MAAOF,EAAEC,OAAOE,OAAQ,GAI/Dd,EAAAA,EAAAA,YAAU,KACJzF,EAAiBG,EACnBY,EAASO,oBAAsB,OACxBtB,EACPe,EAASO,oBAAsB,cACxBnB,IACPY,EAASO,oBAAsB,UAE7B,KAINmE,EAAAA,EAAAA,YAAU,KACJpF,EAAUE,EACZQ,EAASmB,eAAiB,OACnB7B,EACPU,EAASmB,eAAiB,QACnB3B,IACPQ,EAASmB,eAAiB,WAExB,KAINuD,EAAAA,EAAAA,YAAU,KACJ9E,EAAcF,EAChBM,EAASY,kBAAoB,OACtBhB,EACPI,EAASY,kBAAoB,YACtBlB,IACPM,EAASY,kBAAoB,WAE3B,IAiBN,OAPA8D,EAAAA,EAAAA,YAAU,KAJR5F,OAAOF,aAAa6G,QAAQ,oBAAqBb,KAAKc,UAAU1F,GAMxC,GAEvB,CAACA,KAIF,qBAAS7B,UAAU,kBAAiB,WAClC,SAACwH,EAAA,EAAW,KACZ,qBAASxH,UAAU,kBAAiB,WAElC,qBAASA,UAAU,gBAAe,WAChC,gDACA,SAACyH,EAAA,EAAS,KACV,iBAAKzH,UAAU,wBAAuB,UACnC6B,EAASM,sBAAuB,mBAAQnC,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,0BAA2B,yBAAwB,GAC3IwB,EAASkB,iBAAkB,mBAAQ/C,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,0BAA2B,mBAAkB,GAChIwB,EAASW,oBAAqB,mBAAQxC,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,0BAA2B,uBAAsB,GACvIwB,EAASgB,gBAAiB,mBAAQ7C,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,0BAA2B,yBAAwB,GACrIwB,EAASsB,gBAAiB,mBAAQnD,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,mBAAkB,GACjIwB,EAAS0B,iBAAkB,mBAAQvD,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,oBAAmB,GACnIwB,EAAS0C,uBAAwB,mBAAQvE,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,0BAAyB,GAC/IwB,EAAS+C,eAAgB,mBAAQ5E,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,kBAAiB,GAC/HwB,EAASmD,gBAAiB,mBAAQhF,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,mBAAkB,GACjIwB,EAASsD,qBAAsB,mBAAQnF,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,uBAAsB,GAC1IwB,EAAS8B,mBAAoB,mBAAQ3D,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,6BAA4B,GAC9IwB,EAASsC,qBAAsB,mBAAQnE,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,+BAA8B,GAClJwB,EAASkC,mBAAoB,mBAAQ/D,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,uBAAsB,GACxIwB,EAAS0D,kBAAmB,mBAAQvF,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,8BAA6B,OAEjJ,iBAAKL,UAAU,wBAAuB,UACnC6B,EAASM,sBAAwBN,EAASkB,iBAAmBlB,EAASW,oBAAsBX,EAASgB,gBAAiB,mBAAQ7C,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,0BAA2B,yBAAwB,GACjOwB,EAAS0B,iBAAmB1B,EAASsB,gBAAiB,mBAAQnD,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,oBAAmB,GAC9JwB,EAAS0C,uBAAyB1C,EAAS+C,eAAiB/C,EAASmD,gBAAkBnD,EAASsD,qBAAsB,mBAAQnF,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,uBAAsB,GACjOwB,EAAS8B,mBAAqB9B,EAASsC,qBAAuBtC,EAASkC,mBAAqBlC,EAAS0D,kBAAmB,mBAAQvF,UAAU,YAAYI,MAAO,CAAEC,gBAAiB,4BAA6B,oBAAmB,UAIrO,oBAASL,UAAU,sBAAqB,UACtC,iBAAKA,UAAU,iBAAgB,WAC7B,wCAGC6B,EAASM,sBACR,gBAAKnC,UAAU,yBAAyB0H,GAAG,kBAAiB,UAC1D,iBAAK1H,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,2BAA0B,WACvC,yCACA,4LACA,iBAAKA,UAAU,mBAAmBoH,KAAK,sBAAsBC,MAAOvG,EAAiBG,EAAkB,OAASH,EAAiB,cAAgB,UAAU,WACzJ,mBAAQ4G,GAAG,MAAMpH,QAAS,IAAMS,GAAQD,GAAiBV,MAAO,CAAEC,gBAAiBS,EAAiB,yBAA2B,4BAA6B,2BAC5J,mBAAQ4G,GAAG,WAAWpH,QAAS,IAAMY,GAAaD,GAAkBb,MAAO,CAAEC,gBAAiBY,EAAkB,yBAA2B,4BAA6B,iCAEzKA,GACC,iCACE,cAAGjB,UAAU,iBAAgB,6BAAmB,gBAAKA,UAAU,oBAAmB,UAChF,oBAAQA,UAAU,eAAe0H,GAAG,iBAAiBC,YAAY,eAAeP,KAAK,uBAAuBQ,SAAUX,EAAa,0BACjI,0CACA,uCACA,qCACA,yCACA,kDACA,+CACA,yCACA,yCACA,0CACA,wCACA,4CACA,uCACA,wCACA,+CACA,yCACA,0CACA,8CACA,+CACA,yCACA,gDACA,wCACA,+CACA,uCACA,0CACA,yCACA,+CACA,gDACA,kDACA,yCACA,sCACA,yCACA,mDACA,4CACA,iDAIJ,IACJ,cAAGjH,UAAU,gBAAe,sEAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,kBACE6H,KAAK,QACLD,SAAWV,GAAMpF,EAAY,IAAKD,EAAUQ,oBAAqB6E,EAAEC,OAAOE,QAC1ED,KAAMvF,EAASQ,oBACfrC,UAAU,SACV8H,aAAa,KACbC,IAAI,IACJC,IAAI,KACJC,KAAK,SAGT,yBAAIpG,EAASQ,oBAAmB,kBAElC,gBAAKrC,UAAU,2BAA2B0H,GAAG,0BAK/C,GAIH7F,EAASkB,gBAAkBlB,EAASM,sBACnC,gBAAKnC,UAAU,yBAAyB0H,GAAG,YAAW,UACpD,iBAAK1H,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,4BAA2B,WACxC,mCACA,4HACA,iBAAKA,UAAU,mBAAmBoH,KAAK,iBAAgB,WACrD,mBAAQM,GAAG,MAAMpH,QAAS,IAAMc,GAAYD,GAAUf,MAAO,CAAEC,gBAAiBc,EAAU,yBAA2B,4BAA6B,4BAClJ,mBAAQuG,GAAG,WAAWpH,QAAS,IAAMgB,GAAiBD,GAAejB,MAAO,CAAEC,gBAAiBgB,EAAe,yBAA2B,4BAA6B,8BAEvKA,GACC,iCACE,cAAGrB,UAAU,iBAAgB,4BAC7B,gBAAKA,UAAU,oBAAmB,UAChC,oBAAQA,UAAU,eAAe0H,GAAG,iBAAiBC,YAAY,YAAYP,KAAK,eAAeQ,SAAUX,EAAa,uBACtH,2CACA,oDACA,2CACA,8CACA,wCACA,uCACA,iDACA,oDACA,6CAIJ,IACJ,cAAGjH,UAAU,gBAAe,4DAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,kBACE6H,KAAK,QACLD,SAAWV,GAAMpF,EAAY,IAAKD,EAAUqB,eAAgBgE,EAAEC,OAAOE,QACrED,KAAMvF,EAASqB,eACflD,UAAU,SACV8H,aAAa,KACbC,IAAI,IACJC,IAAI,KACJC,KAAK,SAGT,yBAAIpG,EAASqB,eAAc,kBAE7B,gBAAKlD,UAAU,2BAA2B0H,GAAG,oBAM/C,GACF7F,EAASkB,iBAAmBlB,EAASM,sBACrC,gBAAKnC,UAAU,yBAAyB0H,GAAG,YAAW,UACpD,iBAAK1H,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,2BAA0B,WACvC,mCACA,4HACA,iBAAKA,UAAU,mBAAmBoH,KAAK,iBAAgB,WACrD,mBAAQM,GAAG,MAAMpH,QAAS,IAAMc,GAAYD,GAAUf,MAAO,CAAEC,gBAAiBc,EAAU,yBAA2B,4BAA6B,4BAClJ,mBAAQuG,GAAG,WAAWpH,QAAS,IAAMgB,GAAiBD,GAAejB,MAAO,CAAEC,gBAAiBgB,EAAe,yBAA2B,4BAA6B,8BAEvKA,GACC,iCACE,cAAGrB,UAAU,iBAAgB,4BAC7B,gBAAKA,UAAU,oBAAmB,UAChC,oBAAQA,UAAU,eAAe0H,GAAG,iBAAiBC,YAAY,YAAYP,KAAK,eAAeQ,SAAUX,EAAa,uBACtH,2CACA,oDACA,2CACA,8CACA,wCACA,uCACA,iDACA,oDACA,6CAIJ,IACJ,cAAGjH,UAAU,gBAAe,4DAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,kBACE6H,KAAK,QACLD,SAAWV,GAAMpF,EAAY,IAAKD,EAAUqB,eAAgBgE,EAAEC,OAAOE,QACrED,KAAMvF,EAASqB,eACflD,UAAU,SACV8H,aAAa,KACbC,IAAI,IACJC,IAAI,KACJC,KAAK,SAGT,yBAAIpG,EAASqB,eAAc,kBAE7B,gBAAKlD,UAAU,2BAA2B0H,GAAG,oBAK/C,GAIF7F,EAASW,oBAAiC,IAAXb,GAA2B,IAAXA,GAAiBE,EAASM,qBAAuBN,EAASkB,iBAAqBlB,EAASgB,eAA4B,IAAXlB,IACxJ,gBAAK3B,UAAU,yBAAyB0H,GAAG,gBAAe,UACxD,iBAAK1H,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,2BAA0B,WACvC,uCACA,2HACA,iBAAKA,UAAU,mBAAmBoH,KAAK,oBAAoBC,MAAO5F,EAAcF,EAAmB,OAASE,EAAc,cAAgB,UAAU,WAClJ,mBAAQiG,GAAG,MAAMpH,QAAS,IAAMoB,GAAgBD,GAAcrB,MAAO,CAAEC,gBAAiBoB,EAAc,yBAA2B,4BAA6B,wBAC9J,mBAAQiG,GAAG,WAAWpH,QAAS,IAAMkB,GAAqBD,GAAmBnB,MAAO,CAAEC,gBAAiBkB,EAAmB,yBAA2B,4BAA6B,iCAEnLA,GACC,iCACE,cAAGvB,UAAU,iBAAgB,6BAC7B,gBAAKA,UAAU,oBAAmB,UAChC,oBAAQA,UAAU,eAAe0H,GAAG,iBAAiBC,YAAY,eAAeP,KAAK,qBAAqBQ,SAAUX,EAAa,0BAC/H,8CACA,0CACA,6CACA,2CACA,yCACA,wCACA,yCACA,yCACA,wCACA,yCACA,0CACA,wCACA,+CACA,yCACA,sCACA,yCACA,mDAIJ,IACJ,cAAGjH,UAAU,gBAAe,8EAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,kBACE6H,KAAK,QACLD,SAAWV,GAAMpF,EAAY,IAAKD,EAAUa,kBAAmBwE,EAAEC,OAAOE,QACxED,KAAMvF,EAASa,kBACf1C,UAAU,SACV8H,aAAa,KACbC,IAAI,IACJC,IAAI,KACJC,KAAK,SAGT,yBAAIpG,EAASa,kBAAiB,kBAEhC,gBAAK1C,UAAU,2BAA2B0H,GAAG,wBAM/C,GACF7F,EAASW,qBAAyBX,EAASkB,gBAA8B,IAAXpB,GAAkBE,EAASkB,gBAAkBlB,EAASgB,eAA4B,IAAXlB,IAAmBE,EAASkB,gBAAkBlB,EAASM,qBAAkC,IAAXR,GAAkBE,EAASkB,gBAA6B,IAAXpB,IAChQ,gBAAK3B,UAAU,yBAAyB0H,GAAG,gBAAe,UACxD,iBAAK1H,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,4BAA2B,WACxC,uCACA,0HAA+G,wBAAoB,iBAAKA,UAAU,mBAAmBoH,KAAK,oBAAoBC,MAAO5F,EAAcF,EAAmB,OAASE,EAAc,cAAgB,UAAU,WACrR,mBAAQiG,GAAG,MAAMpH,QAAS,IAAMoB,GAAgBD,GAAcrB,MAAO,CAAEC,gBAAiBoB,EAAc,yBAA2B,4BAA6B,wBAC9J,mBAAQiG,GAAG,WAAWpH,QAAS,IAAMkB,GAAqBD,GAAmBnB,MAAO,CAAEC,gBAAiBkB,EAAmB,yBAA2B,4BAA6B,iCAEnLA,GACC,iCACE,cAAGvB,UAAU,iBAAgB,6BAC7B,gBAAKA,UAAU,oBAAmB,UAChC,oBAAQA,UAAU,eAAe0H,GAAG,iBAAiBC,YAAY,eAAeP,KAAK,qBAAqBQ,SAAUX,EAAa,0BAC/H,8CACA,0CACA,6CACA,2CACA,yCACA,wCACA,yCACA,yCACA,wCACA,yCACA,0CACA,wCACA,+CACA,yCACA,sCACA,yCACA,mDAIJ,IACJ,cAAGjH,UAAU,gBAAe,8EAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,kBACE6H,KAAK,QACLD,SAAWV,GAAMpF,EAAY,IAAKD,EAAUa,kBAAmBwE,EAAEC,OAAOE,QACxED,KAAMvF,EAASa,kBACf1C,UAAU,SACV8H,aAAa,KACbC,IAAI,IACJC,IAAI,KACJC,KAAK,SAGT,yBAAIpG,EAASa,kBAAiB,kBAEhC,gBAAK1C,UAAU,2BAA2B0H,GAAG,wBAK/C,GAIF7F,EAASgB,gBAA6B,IAAXlB,GAA2B,IAAXA,IAC3C,gBAAK3B,UAAU,yBAAyB0H,GAAG,WAAU,UACnD,iBAAK1H,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,4BAA4B0H,GAAG,OAAM,WAClD,yCACA,cAAG1H,UAAU,gBAAe,8LAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,kBACE6H,KAAK,QACLD,SAAWV,GAAMpF,EAAY,IAAKD,EAAUiB,cAAeoE,EAAEC,OAAOE,QACpED,KAAMvF,EAASiB,cACf9C,UAAU,SACV8H,aAAa,KACbC,IAAI,IACJC,IAAI,KACJC,KAAK,SAGT,yBAAIpG,EAASiB,cAAa,kBAG5B,gBAAK9C,UAAU,2BAA2B0H,GAAG,mBAK/C,GACF7F,EAASgB,gBAA6B,IAAXlB,GAA2B,IAAXA,IAE3C,gBAAK3B,UAAU,yBAAyB0H,GAAG,WAAU,UACnD,iBAAK1H,UAAU,oBAAmB,WAChC,iBAAKA,UAAU,2BAA2B0H,GAAG,OAAM,WACjD,yCACA,cAAG1H,UAAU,gBAAe,8LAC5B,gBAAKA,UAAU,mBAAkB,UAC/B,kBACE6H,KAAK,QACLD,SAAWV,GAAMpF,EAAY,IAAKD,EAAUiB,cAAeoE,EAAEC,OAAOE,QACpED,KAAMvF,EAASiB,cACf9C,UAAU,SACV8H,aAAa,KACbC,IAAI,IACJC,IAAI,KACJC,KAAK,SAGT,yBAAIpG,EAASiB,cAAa,kBAG5B,gBAAK9C,UAAU,2BAA2B0H,GAAG,mBAK/C,GACH7F,EAASsB,gBAAkBtB,EAAS0B,iBACnC,SAAC,KAAI,CAAC2E,GAAI,wBAAwB,UAAC,mBAAQlI,UAAU,OAAM,oBAE3D6B,EAAS0C,uBAAyB1C,EAAS+C,eAAiB/C,EAASmD,gBAAkBnD,EAASsD,qBAC9F,SAAC,KAAI,CAAC+C,GAAI,2BAA2B,UAAC,mBAAQlI,UAAU,OAAM,oBAE9D6B,EAAS8B,mBAAqB9B,EAASsC,qBAAuBtC,EAASkC,mBAAqBlC,EAAS0D,kBACnG,SAAC,KAAI,CAAC2C,GAAI,wBAAwB,UAAC,mBAAQlI,UAAU,OAAM,qBAE3D,SAAC,KAAI,CAACkI,GAAI,0BAA0B,UAAC,mBAAQlI,UAAU,OAAM,8BAMhE,C","sources":["components/tools/Timeline3.js","components/tools/WhiteNavbar.js","components/wittleSearch/formBlocks/hospitality/PubsLeft.js","components/wittleSearch/Hospitality.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\n\n\n\nconst Timeline3 = () => {\n\n\n\n\n  return (\n    <section className='property-search-wrapper'>\n      <div className='timeline-bar-3'>\n        <div className='progress-circles-3'>\n          <div className='milestone-1'>\n            <h1></h1>\n          </div>\n          <div className='milestone-2'>\n            <h1></h1>\n          </div>\n          <div className='milestone-3'>\n            <h1></h1>\n          </div>\n          <div className='milestone-4'>\n            <h1></h1>\n          </div>\n          <div className='milestone-5'>\n            <h1></h1>\n          </div>\n        </div>\n      </div>\n      <div className='timeline-background-3'>\n        {/* <h1>.</h1> */}\n      </div>\n    </section>\n  )\n\n}\n\nexport default Timeline3","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst WhiteNavbar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='nav-section no-print' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n        </div>\n    \n        {isUserAuth() ?\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={removeItemFromStorage}><a>Sign out</a></h3>\n          </div>\n\n          :\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={() => navigate('/login')}><a>Sign in</a></h3>\n          </div>\n\n        }\n      </section>\n\n    </>\n  )\n\n}\n\nexport default WhiteNavbar","\n\n\n\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { Slider } from 'material-ui-slider'\n\n\n\n\nconst PubsLeft = () => {\n\n\n  // states for filling out the form\n  const [formData, setFormData] = useState({\n    start_search: true,\n    search_name: '',\n    restaurant_selection: false,\n    restaurant_decision: '',\n    restaurant_distance: '',\n    restaurant_cuisine_1: '',\n    restaurant_cuisine_2: '',\n    takeaway_selection: false,\n    takeaway_decision: '',\n    takeaway_distance: '',\n    takeaway_cuisine_1: '',\n    takeaway_cuisine_2: '',\n    pubs_selection: false,\n    pubs_distance: '',\n    cafes_selection: '',\n    cafes_decision: '',\n    cafes_detail: '',\n    cafes_distance: '',\n    tube_selection: false,\n    tube_decision: '',\n    tube_detail: '',\n    tube_distance: '',\n    train_selection: false,\n    train_decision: '',\n    train_detail: '',\n    train_distance: '',\n    primary_selection: false,\n    primary_religion: '',\n    primary_mode: '',\n    primary_distance: '',\n    college_selection: false,\n    college_religion: '',\n    college_mode: '',\n    college_distance: '',\n    secondary_selection: false,\n    secondary_religion: '',\n    secondary_mode: '',\n    secondary_distance: '',\n    supermarket_selection: false,\n    supermarket_decision: '',\n    supermarket_segment: '',\n    supermarket_size: '',\n    supermarket_distance: '',\n    gym_selection: false,\n    gym_studio_name: '',\n    gym_class_type: '',\n    gym_distance: '',\n    park_selection: false,\n    park_type: '',\n    park_distance: '',\n    workplace_selection: false,\n    workplace_detail: '',\n    workplace_transport: '',\n    workplace_distance: '',\n    family_selection: false,\n    family_detail_1: '',\n    family_distance_1: '',\n    family_detail_2: '',\n    family_distance_2: '',\n    family_detail_3: '',\n    family_distance_3: '',\n  })\n\n  // get form data from storage\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem('wittle-form-input'))\n    if (data) setFormData(data)\n  }, [])\n\n\n  // handling the slider states\n\n  // general update for drop down menus\n  const handleChange = e => {\n    setFormData({ ...formData, [e.target.name]: e.target.value })\n  }\n\n\n\n  return (\n\n    <div className='form-filling-section-1' id='pub-grid'>\n      <div className='form-filling-grid'>\n        <div className='form-filling-detail-left' id='pubs'>\n          <h3>Pubs & Bars</h3>\n          <p className='distance-text'>What is the furthest distance you would like to walk to a pub?</p>\n          <div className='slider-container'>\n            <input\n              type='range'\n              onChange={(e) => setFormData({ ...formData, pubs_distance: e.target.value })}\n              name={formData.pubs_distance}\n              className='slider'\n              defaultValue='20'\n              min='1'\n              max='100'\n              step='1'>\n            </input>\n          </div>\n          <p>{formData.pubs_distance} minutes</p>\n\n        </div>\n        <div className='form-filling-image-right' id='pub-image'>\n\n        </div>\n      </div>\n    </div>\n\n  )\n}\nexport default PubsLeft\n\n\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { Slider } from 'material-ui-slider'\n\nimport Timeline3 from '../tools/Timeline3'\n\nimport RestaurantsLeft from './formBlocks/hospitality/RestaurantsLeft'\nimport RestaurantsRight from './formBlocks/hospitality/RestaurantsRight'\nimport CafesRight from './formBlocks/hospitality/CafesRight'\nimport CafesLeft from './formBlocks/hospitality/CafesLeft'\nimport TakeawaysLeft from './formBlocks/hospitality/TakeawaysLeft'\nimport TakeawaysRight from './formBlocks/hospitality/TakeawaysRight'\nimport PubsRight from './formBlocks/hospitality/PubsRight'\nimport PubsLeft from './formBlocks/hospitality/PubsLeft'\nimport NavBar from '../tools/NavBar'\nimport WhiteNavbar from '../tools/WhiteNavbar'\n\n\nconst Hospitalty = () => {\n\n  // states for changing button colours\n  const [anyRestaurants, setAny] = useState(false)\n  const [specificCuisine, setSpecific] = useState(false)\n  const [anyCafe, setAnyCafe] = useState(false)\n  const [specificCafe, setSpecificCafe] = useState(false)\n  const [specificTakeaway, setSpecificTakeaway] = useState(false)\n  const [anyTakeaway, setAnyTakeaway] = useState(false)\n\n  // set state for the number of true values in hospitality\n  const [truths, setTruths] = useState()\n\n\n  // states for filling out the form\n  const [formData, setFormData] = useState({\n    start_search: true,\n    search_name: '',\n    search_type: 'Wittle',\n    search_channel: 'Buying',\n    restaurant_selection: false,\n    restaurant_decision: '',\n    restaurant_distance: 10,\n    restaurant_cuisine_1: '',\n    restaurant_cuisine_2: '',\n    takeaway_selection: false,\n    takeaway_decision: '',\n    takeaway_distance: 10,\n    takeaway_cuisine_1: '',\n    takeaway_cuisine_2: '',\n    pubs_selection: false,\n    pubs_distance: 10,\n    cafes_selection: '',\n    cafes_decision: '',\n    cafes_detail: '',\n    cafes_distance: 10,\n    tube_selection: false,\n    tube_decision: '',\n    tube_detail: '',\n    tube_distance: 10,\n    train_selection: false,\n    train_decision: '',\n    train_detail: '',\n    train_distance: 10,\n    primary_selection: false,\n    primary_religion: '',\n    primary_mode: '',\n    primary_distance: 10,\n    college_selection: false,\n    college_religion: '',\n    college_mode: '',\n    college_distance: 10,\n    secondary_selection: false,\n    secondary_religion: '',\n    secondary_mode: '',\n    secondary_distance: 10,\n    supermarket_selection: false,\n    supermarket_decision: '',\n    supermarket_segment: '',\n    supermarket_size: '',\n    supermarket_distance: 10,\n    gym_selection: false,\n    gym_studio_name: '',\n    gym_class_type: '',\n    gym_distance: 10,\n    park_selection: false,\n    park_type: '',\n    park_distance: 10,\n    workplace_selection: false,\n    workplace_detail: '',\n    workplace_transport: '',\n    workplace_distance: 10,\n    family_selection: false,\n    family_detail_1: '',\n    family_distance_1: 10,\n    family_detail_2: '',\n    family_distance_2: 0,\n    family_detail_3: '',\n    family_distance_3: 0,\n    family_mode_1: '',\n    family_mode_2: '',\n    family_mode_3: '',\n    property_price_min: '0',\n    property_price_max: '10000000',\n    property_bed_min: '0',\n    property_bed_max: '5',\n    property_type: 'Any',\n    owner: 31,\n  })\n\n  // get form data from storage\n  useEffect(() => {\n    const data = JSON.parse(localStorage.getItem('wittle-form-input'))\n    if (data) setFormData(data)\n  }, [])\n\n\n  const checkingState = () => {\n    const array = [formData.restaurant_selection, formData.cafes_selection, formData.takeaway_selection, formData.pubs_selection]\n    const count = array.filter(Boolean).length\n    setTruths(count)\n  }\n\n  useEffect(() => {\n    checkingState()\n  })\n\n  // handling the slider states\n\n  // general update for drop down menus\n  const handleChange = e => {\n    setFormData({ ...formData, [e.target.name]: e.target.value })\n  }\n\n  // update for the specific vs general question - restaurants\n  useEffect(() => {\n    if (anyRestaurants & specificCuisine)\n      formData.restaurant_decision = 'Both'\n    else if (anyRestaurants)\n      formData.restaurant_decision = 'Restaurants'\n    else if (specificCuisine)\n      formData.restaurant_decision = 'Cuisine'\n    else\n      ''\n  })\n\n  // update for the specific vs general question - restaurants\n  useEffect(() => {\n    if (anyCafe & specificCafe)\n      formData.cafes_decision = 'Both'\n    else if (anyCafe)\n      formData.cafes_decision = 'Cafes'\n    else if (specificCafe)\n      formData.cafes_decision = 'Specific'\n    else\n      ''\n  })\n\n  // update for the specific vs general question - restaurants\n  useEffect(() => {\n    if (anyTakeaway & specificTakeaway)\n      formData.takeaway_decision = 'Both'\n    else if (anyTakeaway)\n      formData.takeaway_decision = 'Takeaways'\n    else if (specificTakeaway)\n      formData.takeaway_decision = 'Specific'\n    else\n      ''\n  })\n\n\n  // define function to set state to storage\n  const setStateToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-form-input', JSON.stringify(formData))\n  }\n\n  // execute setting state to local storage\n  useEffect(() => {\n    // if (formData) {\n    setStateToLocalStorage()\n    // }\n  }, [formData])\n\n\n  return (\n    <section className='main-form-pages'>\n      <WhiteNavbar />\n      <section className='form-input-page'>\n        {/* Top section of the page with header and timeline bar */}\n        <section className='title-section'>\n          <h1>Now for the detail</h1>\n          <Timeline3 />\n          <div className='form-selections-large'>\n            {formData.restaurant_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Restaurants</button> : ''}\n            {formData.cafes_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Cafes</button> : ''}\n            {formData.takeaway_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Takeaways</button> : ''}\n            {formData.pubs_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Pubs & Bars</button> : ''}\n            {formData.tube_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Tubes</button> : ''}\n            {formData.train_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Trains</button> : ''}\n            {formData.supermarket_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Supermarkets</button> : ''}\n            {formData.gym_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Gyms</button> : ''}\n            {formData.park_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Parks</button> : ''}\n            {formData.workplace_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Workplace</button> : ''}\n            {formData.primary_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Primary Schools</button> : ''}\n            {formData.secondary_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Secondary Schools</button> : ''}\n            {formData.college_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>6th Forms</button> : ''}\n            {formData.family_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Friends & Family</button> : ''}\n          </div>\n          <div className='form-selections-small'>\n            {formData.restaurant_selection || formData.cafes_selection || formData.takeaway_selection || formData.pubs_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 1)' }}>Hospitality</button> : ''}\n            {formData.train_selection || formData.tube_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Travel</button> : ''}\n            {formData.supermarket_selection || formData.gym_selection || formData.park_selection || formData.workplace_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Lifestyle</button> : ''}\n            {formData.primary_selection || formData.secondary_selection || formData.college_selection || formData.family_selection ? <button className='selectors' style={{ backgroundColor: 'rgba(255, 167, 229, 0.2)' }}>Family</button> : ''}\n\n          </div>\n        </section>\n        <section className='main-content-detail'>\n          <div className='form-selection'>\n            <h1>Hospitality</h1>\n            {/* Split out logic for when different hospitality options are selected */}\n            {/* Restaurants selected or not */}\n            {formData.restaurant_selection ?\n              <div className='form-filling-section-1' id='restaurant-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left'>\n                    <h3>Restaurants</h3>\n                    <p>If you like to try different cuisines, then leave this open so we can find the best all round area for food. But let us know if you&apos;ve got a favourite cuisine.</p>\n                    <div className='button-selectors' name='restaurant_decision' value={anyRestaurants & specificCuisine ? 'Both' : anyRestaurants ? 'Restaurants' : 'Cuisine'} >\n                      <button id='any' onClick={() => setAny(!anyRestaurants)} style={{ backgroundColor: anyRestaurants ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>All cuisines</button>\n                      <button id='specific' onClick={() => setSpecific(!specificCuisine)} style={{ backgroundColor: specificCuisine ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>Specific cuisine</button>\n                    </div>\n                    {specificCuisine ?\n                      <>\n                        <p className='cuisine-choice'>Choose cuisine</p><div className='cuisine-dropdowns'>\n                          <select className='form-control' id='cuisine-drop-1' placeholder='Pick cuisine' name='restaurant_cuisine_1' onChange={handleChange}>Pick cuisine\n                            <option>American</option>\n                            <option>Asian</option>\n                            <option>Bar</option>\n                            <option>British</option>\n                            <option>Central American</option>\n                            <option>Central Asian</option>\n                            <option>Chicken</option>\n                            <option>Chinese</option>\n                            <option>European</option>\n                            <option>French</option>\n                            <option>Gastro Pub</option>\n                            <option>Greek</option>\n                            <option>Indian</option>\n                            <option>International</option>\n                            <option>Italian</option>\n                            <option>Japanese</option>\n                            <option>Meat & Grill</option>\n                            <option>Mediterranean</option>\n                            <option>Mexican</option>\n                            <option>Middle Eastern</option>\n                            <option>Modern</option>\n                            <option>North African</option>\n                            <option>Pizza</option>\n                            <option>Pub food</option>\n                            <option>Seafood</option>\n                            <option>South African</option>\n                            <option>South American</option>\n                            <option>South East Asian</option>\n                            <option>Spanish</option>\n                            <option>Thai</option>\n                            <option>Turkish</option>\n                            <option>Vegetarian/ Vegan</option>\n                            <option>Vietnamese</option>\n                            <option>Wine Bar</option>\n                          </select>\n                        </div>\n                      </>\n                      : ''}\n                    <p className='distance-text'>How far are you willing to walk to get to a restaurant?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, restaurant_distance: e.target.value })}\n                        name={formData.restaurant_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.restaurant_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='restaurant-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n\n            {/* Cafes selected or not */}\n            {/* Cafes and restaurants selected - cafes needs to sit on right */}\n            {formData.cafes_selection & formData.restaurant_selection ?\n              <div className='form-filling-section-2' id='cafe-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-right'>\n                    <h3>Cafes</h3>\n                    <p>The London cafe scene is bustling. But not all of them sell your favourite coffee and pastry...</p>\n                    <div className='button-selectors' name='cafes_decision' >\n                      <button id='any' onClick={() => setAnyCafe(!anyCafe)} style={{ backgroundColor: anyCafe ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>General cafes</button>\n                      <button id='specific' onClick={() => setSpecificCafe(!specificCafe)} style={{ backgroundColor: specificCafe ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>Specific cafe</button>\n                    </div>\n                    {specificCafe ?\n                      <>\n                        <p className='cuisine-choice'>Select a cafe</p>\n                        <div className='cuisine-dropdowns'>\n                          <select className='form-control' id='cuisine-drop-1' placeholder='Pick cafe' name='cafes_detail' onChange={handleChange}>Pick cafe\n                            <option>Pick cafe</option>\n                            <option>Black Sheep Coffee</option>\n                            <option>Cafe Nero</option>\n                            <option>Costa Coffee</option>\n                            <option>Gail&apos;s</option>\n                            <option>Grind</option>\n                            <option>Joe & The Juice</option>\n                            <option>Pattiserie Valerie</option>\n                            <option>Pret</option>\n                          </select>\n                        </div>\n                      </>\n                      : ''}\n                    <p className='distance-text'>How far do you want to walk to get to a cafe?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, cafes_distance: e.target.value })}\n                        name={formData.cafes_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.cafes_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='cafe-image'>\n\n                  </div>\n                </div>\n              </div>\n              // Only cafes selected - needs to sit on the left\n              : ''}\n            {(formData.cafes_selection & !formData.restaurant_selection) ?\n              <div className='form-filling-section-1' id='cafe-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left'>\n                    <h3>Cafes</h3>\n                    <p>The London cafe scene is bustling. But not all of them sell your favourite coffee and pastry...</p>\n                    <div className='button-selectors' name='cafes_decision' >\n                      <button id='any' onClick={() => setAnyCafe(!anyCafe)} style={{ backgroundColor: anyCafe ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>General cafes</button>\n                      <button id='specific' onClick={() => setSpecificCafe(!specificCafe)} style={{ backgroundColor: specificCafe ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>Specific cafe</button>\n                    </div>\n                    {specificCafe ?\n                      <>\n                        <p className='cuisine-choice'>Select a cafe</p>\n                        <div className='cuisine-dropdowns'>\n                          <select className='form-control' id='cuisine-drop-1' placeholder='Pick cafe' name='cafes_detail' onChange={handleChange}>Pick cafe\n                            <option>Pick cafe</option>\n                            <option>Black Sheep Coffee</option>\n                            <option>Cafe Nero</option>\n                            <option>Costa Coffee</option>\n                            <option>Gail&apos;s</option>\n                            <option>Grind</option>\n                            <option>Joe & The Juice</option>\n                            <option>Pattiserie Valerie</option>\n                            <option>Pret</option>\n                          </select>\n                        </div>\n                      </>\n                      : ''}\n                    <p className='distance-text'>How far do you want to walk to get to a cafe?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, cafes_distance: e.target.value })}\n                        name={formData.cafes_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.cafes_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='cafe-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n\n            {/* Are Takeaways selected or not */}\n            {/* Either two things selected or none - takeaways sits on the left */}\n            {(formData.takeaway_selection & (truths === 1 || truths === 4 || (formData.restaurant_selection & formData.cafes_selection) || (formData.pubs_selection & truths === 2))) ?\n              <div className='form-filling-section-1' id='takeaway-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left'>\n                    <h3>Takeaways</h3>\n                    <p>Deliveroo or JustEat? Indian or Fish & Chips? If you&apos;ve got a favourite, we&apos;ll factor that in.</p>\n                    <div className='button-selectors' name='takeaway_decision' value={anyTakeaway & specificTakeaway ? 'Both' : anyTakeaway ? 'Restaurants' : 'Cuisine'} >\n                      <button id='any' onClick={() => setAnyTakeaway(!anyTakeaway)} style={{ backgroundColor: anyTakeaway ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>All types</button>\n                      <button id='specific' onClick={() => setSpecificTakeaway(!specificTakeaway)} style={{ backgroundColor: specificTakeaway ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>Specific cuisine</button>\n                    </div>\n                    {specificTakeaway ?\n                      <>\n                        <p className='cuisine-choice'>Choose cuisine</p>\n                        <div className='cuisine-dropdowns'>\n                          <select className='form-control' id='cuisine-drop-1' placeholder='Pick cuisine' name='takeaway_cuisine_1' onChange={handleChange}>Pick cuisine\n                            <option>Pick cuisine</option>\n                            <option>American</option>\n                            <option>Asianfusion</option>\n                            <option>Breakfast</option>\n                            <option>British</option>\n                            <option>Brunch</option>\n                            <option>Chinese</option>\n                            <option>Healthy</option>\n                            <option>Indian</option>\n                            <option>Italian</option>\n                            <option>Japanese</option>\n                            <option>Korean</option>\n                            <option>Mediterranean</option>\n                            <option>Mexican</option>\n                            <option>Thai</option>\n                            <option>Turkish</option>\n                            <option>Vietnamese</option>\n                          </select>\n                        </div>\n                      </>\n                      : ''}\n                    <p className='distance-text'>How long do you want your delivery to take before it gets cold?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, takeaway_distance: e.target.value })}\n                        name={formData.takeaway_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.takeaway_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='takeaway-image'>\n\n                  </div>\n                </div>\n              </div>\n              // Only restaurants or cafes selected - needs to sit on the right\n              : ''}\n            {(formData.takeaway_selection & (((!formData.cafes_selection) & truths === 3) || (formData.cafes_selection & formData.pubs_selection & truths === 3) || (!formData.cafes_selection & formData.restaurant_selection & truths === 2) || (formData.cafes_selection & truths === 2))) ?\n              <div className='form-filling-section-2' id='takeaway-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-right'>\n                    <h3>Takeaways</h3>\n                    <p>Deliveroo or JustEat? Indian or Fish & Chips? If you&apos;ve got a favourite, we&apos;ll factor that in.</p>                    <div className='button-selectors' name='takeaway_decision' value={anyTakeaway & specificTakeaway ? 'Both' : anyTakeaway ? 'Restaurants' : 'Cuisine'} >\n                      <button id='any' onClick={() => setAnyTakeaway(!anyTakeaway)} style={{ backgroundColor: anyTakeaway ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>All types</button>\n                      <button id='specific' onClick={() => setSpecificTakeaway(!specificTakeaway)} style={{ backgroundColor: specificTakeaway ? 'rgba(255, 167, 229, 1)' : 'rgba(255, 167, 229, 0.2)' }}>Specific cuisine</button>\n                    </div>\n                    {specificTakeaway ?\n                      <>\n                        <p className='cuisine-choice'>Choose cuisine</p>\n                        <div className='cuisine-dropdowns'>\n                          <select className='form-control' id='cuisine-drop-1' placeholder='Pick cuisine' name='takeaway_cuisine_1' onChange={handleChange}>Pick cuisine\n                            <option>Pick cuisine</option>\n                            <option>American</option>\n                            <option>Asianfusion</option>\n                            <option>Breakfast</option>\n                            <option>British</option>\n                            <option>Brunch</option>\n                            <option>Chinese</option>\n                            <option>Healthy</option>\n                            <option>Indian</option>\n                            <option>Italian</option>\n                            <option>Japanese</option>\n                            <option>Korean</option>\n                            <option>Mediterranean</option>\n                            <option>Mexican</option>\n                            <option>Thai</option>\n                            <option>Turkish</option>\n                            <option>Vietnamese</option>\n                          </select>\n                        </div>\n                      </>\n                      : ''}\n                    <p className='distance-text'>How long do you want your delivery to take before it gets cold?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, takeaway_distance: e.target.value })}\n                        name={formData.takeaway_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.takeaway_distance} minutes</p>\n                  </div>\n                  <div className='form-filling-image-right' id='takeaway-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n\n            {/* Are pubs selected or not */}\n            {/* Either 3 things selected or one - pubs will sit on the right */}\n            {(formData.pubs_selection & (truths === 2 || truths === 4)) ?\n              <div className='form-filling-section-2' id='pub-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-right' id='pubs'>\n                    <h3>Pubs & Bars</h3>\n                    <p className='distance-text'>Whether it&apos;s a G&T, a crisp white or a perfectly poured Guiness, the time it takes for you to get it is crucial. How far do you want to travel before you settle down in a pub?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, pubs_distance: e.target.value })}\n                        name={formData.pubs_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.pubs_distance} minutes</p>\n\n                  </div>\n                  <div className='form-filling-image-right' id='pub-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n            {(formData.pubs_selection & (truths === 1 || truths === 3)) ?\n              // Only 2 things or no things selected\n              <div className='form-filling-section-1' id='pub-grid'>\n                <div className='form-filling-grid'>\n                  <div className='form-filling-detail-left' id='pubs'>\n                    <h3>Pubs & Bars</h3>\n                    <p className='distance-text'>Whether it&apos;s a G&T, a crisp white or a perfectly poured Guiness, the time it takes for you to get it is crucial. How far do you want to travel before you settle down in a pub?</p>\n                    <div className='slider-container'>\n                      <input\n                        type='range'\n                        onChange={(e) => setFormData({ ...formData, pubs_distance: e.target.value })}\n                        name={formData.pubs_distance}\n                        className='slider'\n                        defaultValue='10'\n                        min='1'\n                        max='20'\n                        step='1'>\n                      </input>\n                    </div>\n                    <p>{formData.pubs_distance} minutes</p>\n\n                  </div>\n                  <div className='form-filling-image-right' id='pub-image'>\n\n                  </div>\n                </div>\n              </div>\n              : ''}\n            {formData.tube_selection || formData.train_selection ?\n              <Link to={'/wittle-search/travel'}><button className='next' >Next</button></Link>\n              :\n              formData.supermarket_selection || formData.gym_selection || formData.park_selection || formData.workplace_selection ?\n                <Link to={'/wittle-search/lifestyle'}><button className='next' >Next</button></Link>\n                :\n                formData.primary_selection || formData.secondary_selection || formData.college_selection || formData.family_selection ?\n                  <Link to={'/wittle-search/family'}><button className='next' >Next</button></Link>\n                  :\n                  <Link to={'/wittle-search/property'}><button className='next' >Next</button></Link>\n            }\n          </div>\n\n        </section>\n      </section>\n    </section >\n  )\n\n}\n\nexport default Hospitalty"],"names":["className","navbarColour","navigate","useNavigate","style","backgroundColor","onClick","isUserAuth","token","localStorage","removeItem","window","location","reload","anyRestaurants","setAny","useState","specificCuisine","setSpecific","anyCafe","setAnyCafe","specificCafe","setSpecificCafe","specificTakeaway","setSpecificTakeaway","anyTakeaway","setAnyTakeaway","truths","setTruths","formData","setFormData","start_search","search_name","search_type","search_channel","restaurant_selection","restaurant_decision","restaurant_distance","restaurant_cuisine_1","restaurant_cuisine_2","takeaway_selection","takeaway_decision","takeaway_distance","takeaway_cuisine_1","takeaway_cuisine_2","pubs_selection","pubs_distance","cafes_selection","cafes_decision","cafes_detail","cafes_distance","tube_selection","tube_decision","tube_detail","tube_distance","train_selection","train_decision","train_detail","train_distance","primary_selection","primary_religion","primary_mode","primary_distance","college_selection","college_religion","college_mode","college_distance","secondary_selection","secondary_religion","secondary_mode","secondary_distance","supermarket_selection","supermarket_decision","supermarket_segment","supermarket_size","supermarket_distance","gym_selection","gym_studio_name","gym_class_type","gym_distance","park_selection","park_type","park_distance","workplace_selection","workplace_detail","workplace_transport","workplace_distance","family_selection","family_detail_1","family_distance_1","family_detail_2","family_distance_2","family_detail_3","family_distance_3","family_mode_1","family_mode_2","family_mode_3","property_price_min","property_price_max","property_bed_min","property_bed_max","property_type","owner","useEffect","data","JSON","parse","getItem","count","filter","Boolean","length","checkingState","handleChange","e","target","name","value","setItem","stringify","WhiteNavbar","Timeline3","id","placeholder","onChange","type","defaultValue","min","max","step","to"],"sourceRoot":""}