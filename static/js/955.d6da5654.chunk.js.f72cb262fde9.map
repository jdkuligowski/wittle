{"version":3,"file":"static/js/955.d6da5654.chunk.js","mappings":"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","sources":["components/Home.js","components/helpers/modals/WaitlistSignup.js","components/tools/Footer.js","components/tools/NavBar.js"],"sourcesContent":["import { useNavigate, Link } from 'react-router-dom'\nimport axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport NavBar from './tools/NavBar'\nimport NormalPropertySearchModal from './helpers/modals/NormalPropertySearchModal'\nimport LivingSignup from './helpers/modals/LivingSignup'\nimport Footer from './tools/Footer'\nimport WaitlistSignup from './helpers/modals/WaitlistSignup'\nimport { isEmail, isLength, matches } from 'validator'\nimport ReactGA from 'react-ga'\n\nconst Home = () => {\n\n  // track page view with google analytics\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname)\n  }, [])\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for errors\n  const [errors, setErrors] = useState(false)\n\n  // state for completion\n  const [complete, setComplete] = useState(false)\n\n  // manageing the modal pop up for property search\n  const [waitlistShow, setWaitlistShow] = useState(false)\n\n  // cstate for whether email eexists\n  const [emailExists, setEmailExists] = useState(false)\n\n  // close modal\n  const handleWaitlistClose = () => {\n    setWaitlistShow(false)\n  }\n\n  // show the modal\n  const handleWaitlistShow = (e) => {\n    setErrors(true)\n    setComplete(false)\n    setWaitlistShow(true)\n  }\n\n  // set the state for the waitlist signup data capture\n  const [waitlistData, setWaitlistData] = useState({\n    email: '',\n    channel: 'consumer',\n    preferences: false,\n  })\n\n  // set state if email is valid\n  const [validEmail, setValidEmail] = useState(false)\n\n  // determine whether the waitlist email entered is valid\n  const handleChange = (e) => {\n    setWaitlistData({ ...waitlistData, [e.target.name]: e.target.value.toLowerCase() })\n    // console.log(e.target.value)\n  }\n\n  useEffect(() => {\n    if (isEmail(waitlistData.email)) {\n      setValidEmail(true)\n      setErrors(false)\n    } else if (!isEmail(waitlistData.email)) {\n      setValidEmail(false)\n    }\n  }, [waitlistData.email])\n\n  // submit email address to waitlist\n  const handleSubmit = async (e) => {\n    setErrors(false)\n    e.preventDefault()\n    // console.log('trying')\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked Button', \n      label: 'Submit join waitlist',\n    })\n\n    try {\n      // console.log('trying')\n      const { data } = await axios.post('/api/waitlist/', waitlistData)\n      setComplete(true)\n    } catch (err) {\n      // console.log('incorrect data error')\n      setErrors(true)\n    }\n  }\n  \n\n  // cheeck email\n  const checkEmail = async (e) => {\n    e.preventDefault()\n    setComplete(false)\n    setWaitlistShow(true)\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked Button', \n      label: 'Join waitlist',\n    })\n\n    try {\n      const response = await axios.post('/api/waitlist/check-email/', waitlistData)\n      setEmailExists(true)\n    } catch (err) {\n      console.error('An error occurred while making the request:', err)\n      if (err.response) {\n        setEmailExists(false)\n      } \n    }\n  }\n  \n\n\n  return (\n    <>\n      <head>\n        <title>Wittle</title>\n        <meta name=\"description\" content=\"Wittle helps you find properties based on things you care about. Tell us about your lifestyle and we'll find a property that suits.\" />\n\n        {/* Open Graph/ Facbook */}\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://www.wittle.co/\" />\n        <meta property=\"og:title\" content=\"Wittle\" />\n        <meta property=\"og:description\" content=\"Wittle helps you find properties based on things you care about. Tell us about your lifestyle and we'll find a property that suits.\" />\n        {/* <meta property=\"og:image\" content=\"https://yourwebsite.com/images/og-image.jpg\" /> */}\n\n        {/* Twitter */}\n        {/* <meta property=\"twitter:card\" content=\"summary_large_image\" /> */}\n        <meta property=\"twitter:url\" content=\"https://www.wittle.co/\" />\n        <meta property=\"twitter:title\" content=\"Wittle\" />\n        <meta property=\"twitter:description\" content=\"Wittle helps you find properties based on things you care about. Tell us about your lifestyle and we'll find a property that suits.\" />\n        {/* <meta property=\"twitter:image\" content=\"https://yourwebsite.com/images/twitter-image.jpg\" /> */}\n      </head>\n      <>\n        <section className='homepage-wrapper'>\n          {/* Home page section 1: Opening section to site - introduction page and call to a ction for different user journies */}\n          <section className='website-opening'>\n            <NavBar />\n            <section className='content-wrapper'>\n\n              <div className='headline-title-section'>\n                <div className='headline-top'>\n                  {/* <h1>Find the perfect property in the perfect location.</h1> */}\n                  <h1>Matchmaking Homes and Lifestyles.</h1>\n\n                  <h4>Find a home that suits your interests in an area that you love - because you can&apos;t renovate a location.</h4>\n                  <h5>Wittle is revolutionising the way you search for properties. Launching soon 🚀</h5>\n                  <div className='waitlist-consumer'>\n                    <input className='waitlist-email' name='email' placeholder='✉️ Join the waitlist' onChange={handleChange}></input>\n                    <button className='consumer-sign-up' onClick={checkEmail}>Join</button>\n                    <WaitlistSignup\n                      waitlistShow={waitlistShow}\n                      handleWaitlistClose={handleWaitlistClose}\n                      validEmail={validEmail}\n                      errors={errors}\n                      handleSubmit={handleSubmit}\n                      handleChange={handleChange}\n                      complete={complete}\n                      emailExists={emailExists} />\n                  </div>\n                </div>\n\n\n\n              </div>\n              <div className='consumer-process'>\n                <div className='process-steps'>\n                  <div className='process-item'>\n                    <div className='process-screen' id='screen1'>\n\n                    </div>\n                    <h5>Start by telling us what matters to you</h5>\n                  </div>\n                  <div className='process-item'>\n                    <div className='process-screen' id='screen2'>\n\n                    </div>\n                    <h5>Flesh it out... what food, what vibe, how far?</h5>\n                  </div>\n                  <div className='process-item'>\n                    <div className='process-screen' id='screen3'>\n\n                    </div>\n                    <h5>...and we&apos;ll Wittle it down for you, giving you unparalelled insights...</h5>\n                  </div>\n                  <div className='process-item'>\n                    <div className='process-screen' id='screen4'>\n\n                    </div>\n                    <h5>...then we&apos;ll help you decide on the perfect home.</h5>\n                  </div>\n                </div>\n              </div>\n              <section className='blog-section-summary'>\n                <h1 className='blog-section-title'>Insights</h1>\n                <div className='blog-list'>\n                  <div className='blog-item' onClick={() => navigate('/blogs/school-search-simplified')}>\n                    <div className='blog-image-box'>\n                      <div className='blog-image'></div>\n                      <p>School Search Simplified</p>\n                    </div>\n                    <h3 className='blog-item-summary'>School Search Simplified: An In-Depth Analysis of London&apos;s Primary Schools</h3>\n                  </div>\n                </div>\n              </section>\n              <section className='consumer-bottom'>\n                <div className='waitlist-consumer'>\n                  <input className='waitlist-email' name='email' placeholder='✉️ Join the waitlist' onChange={handleChange}></input>\n                  <button className='consumer-sign-up' onClick={handleWaitlistShow}>Join</button>\n                  <WaitlistSignup\n                    waitlistShow={waitlistShow}\n                    handleWaitlistClose={handleWaitlistClose}\n                    validEmail={validEmail}\n                    errors={errors}\n                    handleSubmit={handleSubmit}\n                    handleChange={handleChange}\n                    complete={complete}\n                    emailExists={emailExists} />\n                </div>\n              </section>\n              <Footer\n                textColour={'#FFA7E5'} />\n            </section>\n\n\n          </section>\n        </section>\n\n      </></>\n  )\n}\n\nexport default Home\n\n\n\n// <div className='headline-content'>\n//               <div className='product-box' id='search-box'>\n//                 <div className='product-title' id='search'>\n//                   <h1>Looking for a property?</h1>\n//                 </div>\n//                 <div className='product-group'>\n//                   <div className='product-detail'>\n//                     <h3>Wittle Search</h3>\n//                     <div className='homepage-image-1'></div>\n//                     <p>AI driven search, taking the things you care about and finding you the right property</p>\n//                     <div className='buttons'>\n//                       <button className='cta-1' onClick={() => navigate('/wittle-search/fields')}>Start Wittling</button>\n//                     </div>\n//                   </div>\n//                   <div className='product-detail'>\n//                     <h3>Property Search</h3>\n//                     <div className='homepage-image-2'></div>\n//                     <p>What you&apos;re used to. Find properties based on location.</p>\n//                     <div className='buttons'>\n//                       <button className='cta-1' onClick={handleSearchShow}>Find properties</button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n//               <div className='product-box' id='live-box' >\n//                 <div className='product-title' id='live'>\n//                   <h1>Happy with where you&apos;re living?</h1>\n//                 </div>\n//                 <div className='product-group'>\n//                   <div className='product-detail'>\n//                     <h3>Area Portal</h3>\n//                     <div className='homepage-image-3'></div>\n//                     <p>Keep track of everything going on in your area and the rest of London</p>\n//                     <div className='buttons'>\n//                       <button className='cta-1' onClick={handleLivingRegisterShow}>Explore my area</button>\n//                     </div>\n//                   </div>\n//                   <div className='product-detail'>\n//                     <h3>Household Portal</h3>\n//                     <div className='homepage-image-4'></div>\n//                     <p>Stay on top of your household admin and get insights on your spend</p>\n//                     <div className='buttons'>\n//                       <button className='cta-1' onClick={handleLivingRegisterShow}>Manage household</button>\n//                     </div>\n//                   </div>\n//                 </div>\n//               </div>\n\n//             </div>\n\n","import React, { useState, useEffect, useRef } from 'react'\nimport { Modal } from 'react-bootstrap'\n\n\n\n\nconst WaitlistSignup = ({ waitlistShow, handleWaitlistClose, validEmail, errors, handleSubmit, handleChange, complete, emailExists }) => {\n\n\n\n\n  return (\n    <>\n      {/* <section className=\"waitlist-wrapper\"> */}\n      <Modal show={waitlistShow} onHide={handleWaitlistClose} backdrop='static' className='waitlist-modal'>\n        <Modal.Body>\n          <div className='body-section'>\n            {validEmail && !emailExists && !complete ?\n              <>\n                <h2>One last thing...</h2>\n                <div className='preferences'>\n                  <h3>Please check this box if you want to receive updates about Wittle</h3>\n                  <input type='checkbox' name='preferences' defaultChecked={false} onChange={handleChange}></input>\n                </div>\n                <button className='waitlist-close' onClick={handleSubmit}>Submit</button>\n              </>\n              : !validEmail ?\n                <>\n                  <h3> 😬 Looks like that email isn&apos;t valid.</h3>\n                  <button className='waitlist-close' onClick={handleWaitlistClose}>Close</button>\n                </>\n                : emailExists ?\n                  <>\n                    <h3>😬 This email address is already in use. Try another one!</h3>\n                    <button className='waitlist-close' onClick={handleWaitlistClose}>Close</button>\n                  </>\n                  : complete ?\n                    <>\n                      <h3>💪 Done! It won&apos;t be long until you&apos;re Wittling, we promise. Stay tuned to your emails.</h3>\n                      <button className='waitlist-close' onClick={handleWaitlistClose}>Close</button>\n                    </>\n                    : null\n            }\n          </div>\n        </Modal.Body>\n      </Modal>\n      {/* </section> */}\n    </>\n  )\n}\n\nexport default WaitlistSignup","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst NavBar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  const responseMessage = (response) => {\n    console.log(response)\n  }\n\n  const errorMessage = (error) => {\n    console.log(error)\n  }\n\n\n  // post google information for authentication\n  const googleLogin = async (response) => {\n    try {\n      // await axios.post('/api/auth/google/', registerData)\n      const auth = { 'auth_token': response.credential }\n      console.log(auth)\n      const { data } = await axios.post('/api/auth/google/', {\n        body: JSON.stringify(auth),\n      })\n      console.log(data)\n    } catch (err) {\n      setErrors(err)\n      console.log(err)\n      console.log(err.response.data)\n    }\n  }\n\n  return (\n    <>\n      <section className='nav-section' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n          <h4 onClick={() => navigate('/agents')} className='agent-button'>For agents</h4>\n          <h4 onClick={() => navigate('/blogs/school-search-simplified')} className='agent-button'>Insights</h4>\n        </div>\n        <div className='menu-container' onClick={handleMenuShow}>\n          <div className=\"menu-trigger\">\n            <span>\n              <div className='burger-icon'>\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n              </div>\n            </span>\n          </div>\n        </div>\n        <button onClick={() => navigate('/login')} className='agent-login'>Agent login</button>\n      </section>\n      <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      />\n    </>\n  )\n\n}\n\nexport default NavBar"],"names":["useEffect","ReactGA","window","location","pathname","navigate","useNavigate","errors","setErrors","useState","complete","setComplete","waitlistShow","setWaitlistShow","emailExists","setEmailExists","handleWaitlistClose","waitlistData","setWaitlistData","email","channel","preferences","validEmail","setValidEmail","handleChange","e","target","name","value","toLowerCase","isEmail","handleSubmit","async","preventDefault","category","action","label","data","axios","err","content","property","className","placeholder","onChange","onClick","console","error","response","id","textColour","show","onHide","backdrop","type","defaultChecked","pageType","style","color","navbarColour","isActive","setIsActive","useRef","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","backgroundColor","handleMenuClose","removeItemFromStorage","token","localStorage","removeItem","reload"],"sourceRoot":""}