{"version":3,"file":"static/js/345.71de38f9.chunk.js","mappings":"8LAyMA,UA/LcA,KAGZ,MAAMC,GAAWC,EAAAA,EAAAA,OASVC,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,CACnCC,MAAO,GACPC,SAAU,GACVC,QAAS,KAgCLC,EAAgBC,IACpB,MAAM,KAAEC,EAAI,MAAEC,GAAUF,EAAEG,OAC1B,IAAIC,EAAQ,GAEC,UAATH,IAAqBI,EAAAA,EAAAA,SAAQH,GAEb,aAATD,IACTG,EAAQE,EAAiBJ,IAFzBE,EAAQ,wBAKVG,EAAgB,IAAKC,EAAc,CAACP,GAAOC,IAC3CR,EAAU,IAAKD,EAAQ,CAACQ,GAAOG,GAAQ,GAIlCK,EAAmBC,IAAwBf,EAAAA,EAAAA,UAAS,aAcpDgB,EAAUC,IAAejB,EAAAA,EAAAA,WAAS,IAclCkB,EAAcC,IAAmBnB,EAAAA,EAAAA,WAAS,IAa1Ca,EAAcD,IAAmBZ,EAAAA,EAAAA,UAAS,CAC/CC,MAAO,GACPmB,SAAU,GACVlB,SAAU,GACVmB,sBAAuB,GACvBC,WAAY,GACZC,UAAW,MAINC,EAAeC,IAAoBzB,EAAAA,EAAAA,UAAS,CACjDC,MAAO,GACPmB,SAAU,GACVlB,SAAU,GACVmB,sBAAuB,GACvBC,WAAY,GACZC,UAAW,GACXG,KAAM,KAIFf,EAAoBT,IACxB,MACMyB,GAAeC,EAAAA,EAAAA,SAAQ1B,EAAU,SACjC2B,GAAeD,EAAAA,EAAAA,SAAQ1B,EAAU,SACjC4B,GAAWF,EAAAA,EAAAA,SAAQ1B,EAAU,MAC7B6B,GAAiBH,EAAAA,EAAAA,SAAQ1B,EAAU,gBAEzC,OAAK8B,EAAAA,EAAAA,UAAS9B,EAAU,CAAE+B,IANR,IASbN,EAGAE,EAGAC,EAGAC,EAGE,GAFE,uDAHA,2CAHA,sDAHA,sDAHA,6CAcA,EAIX,OACEG,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UAGEF,EAAAA,EAAAA,KAAA,WAASG,UAAU,aAAYD,UAE7BE,EAAAA,EAAAA,MAAA,WAASD,UAAU,gBAAeD,SAAA,EAChCF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,eAAcD,UAE3BF,EAAAA,EAAAA,KAAA,OAAKG,UAAU,mBAIjBH,EAAAA,EAAAA,KAAA,MAAAE,SAAI,aACJE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,gBAAeD,SAAA,EAC5BE,EAAAA,EAAAA,MAAA,OAAKD,UAAU,cAAaD,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBACJF,EAAAA,EAAAA,KAAA,SAAOK,YAAY,sBAAsBC,KAAK,QAAQlC,KAAK,QAAQ+B,UAAU,QAAQ9B,MAAOM,EAAaZ,MAAOwC,SAAUrC,IACzHN,EAAOG,QAASqC,EAAAA,EAAAA,MAAA,KAAGD,UAAU,QAAOD,SAAA,CAAC,KAAGtC,EAAOG,aAGlDqC,EAAAA,EAAAA,MAAA,OAAKD,UAAU,cAAaD,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cACJF,EAAAA,EAAAA,KAAA,SAAOK,YAAY,iBAAiBC,KAAM1B,EAAmBR,KAAK,WAAW+B,UAAU,iBAAiB9B,MAAOM,EAAaX,SAAUuC,SAAUrC,IAC/IN,EAAOI,WAAYoC,EAAAA,EAAAA,MAAA,KAAGD,UAAU,QAAOD,SAAA,CAAC,KAAGtC,EAAOI,mBAIvDgC,EAAAA,EAAAA,KAAA,UAAQQ,QA1JKC,UALeC,MAQlC,GAFAvC,EAAEwC,kBAEE/C,EAAOG,QAASH,EAAOI,SAI3B,IACE,MAAM,KAAE4C,SAAeC,EAAAA,EAAMrB,KAAK,mBAAoBb,GAbtB+B,EAcLE,EAAKF,MAblCI,OAAOC,aAAaC,QAAQ,oBAAqBN,GAc/CI,OAAOC,aAAaC,QAAQ,kBAAmBJ,EAAK1B,UACpDxB,EAAS,kBACX,CAAE,MAAOa,GAGP,MAAM0C,EAAY1C,EAAM2C,SAASN,KAAKO,OAClCF,GAA2B,wBAAdA,GACfpD,EAAU,IAAKD,EAAQK,QAAS,qBAEpC,GAuIqCqC,KAAK,SAAQJ,SAAC,YAC5CtC,EAAOK,UAAWmC,EAAAA,EAAAA,MAAA,KAAGD,UAAU,QAAQiB,GAAG,UAASlB,SAAA,CAAC,KAAGtC,EAAOK,YAE/DmC,EAAAA,EAAAA,MAAA,KAAAF,SAAA,CAAG,kCAA8BF,EAAAA,EAAAA,KAACqB,EAAAA,GAAI,CAACC,GAAI,2BAA2BpB,UAACF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,6BAMhF,C","sources":["components/auth/Login.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport { isEmail, isLength, matches } from 'validator'\nimport NavBar from '../tools/NavBar'\n\n\n\n\n\nconst Login = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    password: '',\n    account: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (errors.email || errors.password) {\n      return\n    }\n\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      navigate('/agents/profile')\n    } catch (error) {\n      // Here you should handle the error returned by your API when account does not exist\n      // Assuming your API returns a response with error details in error.response.data\n      const errorData = error.response.data.detail\n      if (errorData && errorData === 'Invalid credentials') { // change this condition based on your API response\n        setErrors({ ...errors, account: 'Account not found' })\n      }\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    let error = ''\n\n    if (name === 'email' && !isEmail(value)) {\n      error = 'Invalid email address'\n    } else if (name === 'password') {\n      error = validatePassword(value)\n    }\n\n    setRegisterData({ ...registerData, [name]: value })\n    setErrors({ ...errors, [name]: error })\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n\n  return (\n    <>\n\n\n      <section className='login-page'>\n        \n        <section className='login-content'>\n          <div className='logo-section'>\n\n            <div className='wittle-logo'></div>\n            \n\n          </div>\n          <h1>Sign in</h1>\n          <div className='input-section'>\n            <div className='login-input'>\n              <h3>Email address</h3>\n              <input placeholder='Enter email address' type='email' name='email' className='input' value={registerData.email} onChange={handleChange}></input>\n              {errors.email && <p className=\"error\">* {errors.email}</p>}\n\n            </div>\n            <div className='login-input'>\n              <h3>Password</h3>\n              <input placeholder='Enter password' type={loginPasswordType} name='password' className='password-input' value={registerData.password} onChange={handleChange}></input>\n              {errors.password && <p className=\"error\">* {errors.password}</p>}\n\n            </div>\n          </div>\n          <button onClick={handleSubmit} type='submit'>Sign in</button>\n          {errors.account && <p className=\"error\" id='account'>* {errors.account}</p>}\n\n          <p>Forgotten your login details? <Link to={'/password-reset-request/'}><span>Request reset</span></Link></p>\n          \n        </section>\n\n\n      </section>\n    </>\n  )\n}\n\nexport default Login\n\n\n// <section className='login-content'>\n// <section className='form-section'>\n//   <form className='form-detail' onSubmit={handleSubmit}>\n\n//     <h1>Sign in to Wittle</h1>\n//     {/* Email */}\n\n//     <p>Email address</p>\n//     <input type='email' name='email' className='input' value={registerData.email} onChange={handleChange} />\n//     {errors.email && <p className=\"error\">* {errors.email}</p>}\n//     {/* Password */}\n//     <p>Password</p>\n//     <div className='login-input'>\n\n//       <input type={loginPasswordType} name='password' className='password-input' value={registerData.password} onChange={handleChange} />\n\n//       <div className='password-icon-container' onClick={passwordReveal}>\n//         <div className='password-icon'></div>\n//       </div>\n//     </div>\n//     {errors.password && <p className=\"error\">* {errors.password}</p>}\n\n\n//     {/* Submit */}\n//     <button className='sign-up' type='submit'>Sign in</button>\n//     {errors.account && <p className=\"error\" id='account'>* {errors.account}</p>}\n\n//   </form>\n// </section>\n// <h5>Forgotten your login details? <Link to={'/password-reset-request/'}>\n//   <span>Request reset</span></Link> </h5>\n// </section>"],"names":["Login","navigate","useNavigate","errors","setErrors","useState","email","password","account","handleChange","e","name","value","target","error","isEmail","validatePassword","setRegisterData","registerData","loginPasswordType","setLoginPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","hasUppercase","matches","hasLowercase","hasDigit","hasSpecialChar","isLength","min","_jsx","_Fragment","children","className","_jsxs","placeholder","type","onChange","onClick","async","token","preventDefault","data","axios","window","localStorage","setItem","errorData","response","detail","id","Link","to"],"sourceRoot":""}