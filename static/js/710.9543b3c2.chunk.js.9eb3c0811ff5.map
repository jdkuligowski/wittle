{"version":3,"file":"static/js/710.9543b3c2.chunk.js","mappings":"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","sources":["components/auth/Register.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport { isEmail, isLength, matches } from 'validator'\nimport NavBar from '../tools/NavBar'\nimport { getAccessToken } from './Auth'\nimport Select from 'react-select'\n\n\nconst Register = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to store the branches\n  const [branches, setBranches] = useState()\n  const [selectedCompany, setSelectedCompany] = useState(null)\n  const [companiesOptions, setCompaniesOptions] = useState([])\n\n\n  // function to laod the branches\n  const loadBranches = async () => {\n    try {\n      const url = '/api/branch_list/'\n\n      // extract data based on url\n      const { data } = await axios.get(url)\n      console.log('agent list ->', data)\n      setBranches(data)\n      const options = data.map(company => ({ value: company.id, label: company.branch_name }))\n      setCompaniesOptions(options)\n      console.log('company list ->', options)\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  // loading the branches on render\n  useEffect(() => {\n    loadBranches()\n  }, [])\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    company_name: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    company_name: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'company_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, company_name: 'Add company_name' })\n      } else {\n        setRegisterError({ ...registerError, company_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'email') {\n      if (!isEmail(registerData.email)) {\n        setRegisterError({ ...registerError, email: 'Invalid email address' })\n      } else {\n        setRegisterError({ ...registerError, email: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      // const { data } = await axios.post('/api/auth/login/', registerData)\n      // setUserTokenToLocalStorage(data.token)\n      // window.localStorage.setItem('wittle-username', data.username)\n      // console.log('username ->', data.username)()\n      // setRegisterData()\n      // navigate('/agents/profile')\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n  const handleCompanyChange = selectedOption => {\n    setSelectedCompany(selectedOption)\n    setRegisterData({ ...registerData, company_name: selectedOption.label })\n  }\n\n  const customStyles = {\n    control: (provided) => ({\n      ...provided,\n      fontSize: '0.8rem', // Adjust font size\n      fontFamily: 'Poppins',\n      color: '#FDF7F0', // This affects the input text color\n      borderColor: '#FDF7F0', // Adjust border color\n      borderRadius: '10px',\n      backgroundColor: '#1A276C',\n      padding: '0px 0px',\n      minHeight: '35px', // Reduce the minimum height\n\n      // height: '25px',\n    }),\n    option: (provided, state) => ({\n      ...provided,\n      color: state.isSelected ? 'white' : '#333', // Adjust option text color\n      backgroundColor: state.isSelected ? '#1A276C' : 'white', // Adjust option background color\n      fontSize: '0.8rem', // Adjust font size\n\n      // Additional styles\n    }),\n    singleValue: (provided, state) => ({\n      ...provided,\n      color: '#FDF7F0', // This will correctly adjust the selected item text color\n      fontSize: '0.8rem', // Ensure consistency in font size\n      fontFamily: 'Poppins', // Ensure consistency in font family\n    }),\n  }\n\n\n  return (\n    <>\n      {/* <NavBar\n        navbarColour='#051885'\n      /> */}\n\n      <section className='login-page' id='register'>\n        {/* <section className='wrapper'> */}\n        <section className='login-content'>\n          {/* <div className='logo-section'>\n\n            <div className='wittle-logo' onClick={() => navigate('/')}></div>\n\n\n          </div> */}\n          {/* <form className='form-detail' onSubmit={registerSubmit} > */}\n          <div className='register-title'>\n            <h1>Unlock the benefits of Wittle</h1>\n          </div>\n          <div className='register-section'>\n            {/* First name */}\n            <div className='login-input'>\n              <h3>First name</h3>\n              <input type='text' name='first_name' className='input' value={registerData.first_name} onChange={registerChange} />\n              {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n            </div>\n            {/* Last namee */}\n            <div className='login-input'>\n\n              <h3>Last name</h3>\n              <input type='text' name='last_name' className='input' value={registerData.last_name} onChange={registerChange} />\n              {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n            </div>\n\n\n\n            {/* Company */}\n            <div className='login-input'>\n              <h3>Company</h3>\n              <Select\n                value={selectedCompany}\n                onChange={handleCompanyChange}\n                options={companiesOptions}\n                styles={customStyles}\n\n                className=\"input\"\n                placeholder=\"Select or search a company...\"\n              />\n              {registerError.company_name && <p className=\"error\">* {registerError.company_name}</p>}\n            </div>\n\n            {/* Username */}\n            <div className='login-input'>\n\n              <h3>Username</h3>\n\n              <input type='text' name='username' className='input' value={registerData.username} onChange={registerChange} />\n              {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n            </div>\n\n            {/* Email */}\n            <div className='login-input'>\n\n              <h3>Email</h3>\n              <input type='email' name='email' className='input' value={registerData.email} onChange={registerChange} />\n              {registerError.email && <p className=\"error\">* {registerError.email}</p>}\n            </div>\n\n            {/* Password */}\n            <div className='login-input'>\n\n              <h3>Password</h3>\n\n\n              <input type={registerPasswordType} name='password' className='password-input-register' value={registerData.password} onChange={registerChange} />\n\n              {/* <div className='login-input'>\n            <div className='password-icon-container' onClick={passwordRegisterReveal}>\n              <div className='password-icon'></div>\n            </div>\n          </div> */}\n              {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n            </div>\n\n            {/* Password confirmation */}\n            <div className='login-input'>\n\n              <h3>Confirm password</h3>\n\n              <input type='password' name='password_confirmation' className='input' value={registerData.password_confirmation} onChange={registerChange} />\n              {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n            </div>\n\n          </div>\n          <button type='submit' onClick={registerSubmit}>Register</button>\n          {registerError.post && <p className=\"error\">* {registerError.post}</p>}\n          {/* <h5>Already have an account? <Link to={'/login'}>\n            <span>Login</span></Link> </h5> */}\n          {/* </form> */}\n        </section>\n\n        {/* </section> */}\n      </section>\n    </>\n  )\n}\n\nexport default Register"],"names":["Register","useNavigate","branches","setBranches","useState","selectedCompany","setSelectedCompany","companiesOptions","setCompaniesOptions","useEffect","async","url","data","axios","get","console","log","options","map","company","value","id","label","branch_name","error","loadBranches","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","email","username","company_name","password","password_confirmation","first_name","last_name","registerError","setRegisterError","post","registerChange","e","target","name","length","isEmail","passwordError","hasUppercase","matches","hasLowercase","hasDigit","hasSpecialChar","isLength","min","validatePassword","_jsx","_Fragment","children","className","_jsxs","type","onChange","Select","selectedOption","styles","control","provided","fontSize","fontFamily","color","borderColor","borderRadius","backgroundColor","padding","minHeight","option","state","isSelected","singleValue","placeholder","onClick","preventDefault","err"],"sourceRoot":""}