{"version":3,"file":"static/js/389.6914bab0.chunk.js","mappings":"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","sources":["components/helpers/Loading.js","components/tools/Footer.js","components/whiteLabel/propertyDetails/componentDetails/EVDetails.js","components/whiteLabel/propertyDetails/componentDetails/FitnessDetails.js","components/whiteLabel/propertyDetails/componentDetails/PrimaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/PubDetails.js","components/whiteLabel/propertyDetails/componentDetails/RestaurantDetails.js","components/whiteLabel/propertyDetails/componentDetails/SecondaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/SupermarketDetails.js"],"sourcesContent":["import React from 'react'\n\nconst Loading = () => (\n  <div className=\"loading-gif\">\n    <img src={require('../../styles/new-loading.gif')} alt=\"loading gif\"/>\n  </div>\n)\n\nexport default Loading","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst EVDetails = ({ ev1, listType, setEv1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // state for storing new supermarket data \n  const [ev2, setEv2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedEvs, setSelectedEvs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleEvClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedEvs(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...ev1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setEv1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as ev2\n      setEv2([...ev1])\n    } else {\n      setEv2(\n        ev1.filter(item => {\n          return (\n            item.location.toLowerCase().includes(term.toLowerCase()) ||\n            // item.power.toLowerCase().includes(term.toLowerCase()) ||\n            item.fast_charging.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (ev1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, ev1])\n\n\n\n  return (\n    <>\n      {ev1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('location')}>\n                  <h5>Charger location</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('power')}>\n                  <h5>Power</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Fast Charging</h5>\n              </div>\n              <div className='school-table-details'>\n                {ev2 ? ev2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.location}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.power} kW</h5>\n                        </div>\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.fast_charging}</h5>\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {ev2 ? ev2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.location}</h5>\n                              <div className='details'>\n                                <div className='icon' id='evs'></div>\n                                <h5>{item.power}kW</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {ev2 &&\n                        ev2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleEvClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedEvs ?\n                        <Popup\n                          longitude={selectedEvs.longitude}\n                          latitude={selectedEvs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedEvs(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedEvs.location}</h5>\n                              <p>⛽️ Power:{selectedEvs.power} kW</p>\n                              <p>⛽️ Fast charging: {selectedEvs.fast_charging}</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {ev2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(ev2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default EVDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst FitnessDetails = ({ gyms1, listType, setGyms1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // state for storing new supermarket data \n  const [gyms2, setGyms2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedGyms, setSelectedGyms] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleGymClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedGyms(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...gyms1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setGyms1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as gyms2\n      setGyms2([...gyms1])\n    } else {\n      setGyms2(\n        gyms1.filter(item => {\n          return (\n            item.gym_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.gym_group.toLowerCase().includes(term.toLowerCase()) ||\n            item.class_type.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (gyms1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, gyms1])\n\n\n\n  return (\n    <>\n      {gyms1 ?\n        <section className=\"primary-details-section\">\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('gym_name')}>\n                  <h5>Studio name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('gym_group')}>\n                  <h5>Studio group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Class types</h5>\n              </div>\n              <div className='school-table-details'>\n                {gyms2 ? gyms2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.gym_name}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.gym_group}</h5>\n                        </div>\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.class_type}</h5>\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {gyms2 ? gyms2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.gym_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='gyms'></div>\n                                <h5>{item.gym_group}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {gyms2 &&\n                        gyms2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.long}\n                            latitude={item.Lat}\n                            onClick={() => handleGymClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedGyms ?\n                        <Popup\n                          longitude={selectedGyms.long}\n                          latitude={selectedGyms.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedGyms(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedGyms.gym_name}</h5>\n                              <p>{selectedGyms.gym_group}</p>\n                              <p>{selectedGyms.class_type}</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {gyms2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(gyms2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default FitnessDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PrimaryDetails = ({ primaryData1, listType, setPrimaryData1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  // const [tableMapView, setPrimaryView] = useState('Table')\n\n  // state for storing new primary data \n  const [primaryData2, setPrimaryData2] = useState([])\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n    console.log(school.longitude)\n    console.log(school.latitude)\n    console.log(school.max_distance)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...primaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setPrimaryData1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as primaryData1\n      setPrimaryData2([...primaryData1])\n    } else {\n      setPrimaryData2(\n        primaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (primaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, primaryData1])\n\n\n  return (\n    <>\n      {primaryData1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('pupils_at_standard')}>\n                  <h5>At standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('pupils_exceeding_standard')}>\n                  <h5>Exceeding standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : ''}\n              </div>\n              <div className='school-table-details'>\n                {primaryData2 ? primaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_at_standard * 100)}%</h5>}\n                        </div>\n                        <div className='column' id='column7'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_exceeding_standard * 100)}%</h5>}\n                        </div>\n                        {listType === 'short list' ?\n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              {item.max_distance !== null ? <h5>{item.max_distance}</h5> : <h5>Not specified</h5>}\n                            </div>\n                            : ''\n                        }\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {primaryData2 ? primaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n\n                              <h5 className='title'>{index + 1}. {item.school_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='secondaries'></div>\n                                <h5>{item.school_type}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='ofsted'></div>\n                                <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <>\n                                  <div className='details'>\n                                    <div className='icon' id='catchment'></div>\n                                    <h5>{item.within_catchment}</h5>\n                                  </div>\n                                  <div className='details'>\n                                    <div className='icon' id='distance'></div>\n                                    <h5>{item.walkTimeMin} mins</h5>\n                                  </div>\n                                </>\n                                : listType === 'long list' ?\n                                  <div className='details'>\n                                    <div className='icon' id='distance'></div>\n                                    <h5>{item.walkTimeMin} mins</h5>\n                                  </div>\n                                  : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {primaryData2 &&\n                        primaryData2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSchoolClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', 'On request', 'N/a', null].includes(selectedSchool.max_distance) ?\n                        <>\n                          {\n                            typeof parseFloat(selectedSchool.longitude) === 'number' &&\n                              typeof parseFloat(selectedSchool.latitude) === 'number' &&\n                              typeof parseFloat(selectedSchool.max_distance) === 'number'\n                              ?\n                              <>\n                                <Source\n                                  id=\"catchment-area\"\n                                  type=\"geojson\"\n                                  data={turf.circle([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"catchment-area-ring\"\n                                    type=\"fill\"\n                                    paint={{\n                                      'fill-color': '#FFA7E5',\n                                      'fill-opacity': 0.3,\n                                    }} />\n                                  <Layer\n                                    id=\"catchment-area-outline\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#FFA7E5',\n                                      'line-width': 2,\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-line\"\n                                  type=\"geojson\"\n                                  data={turf.lineString([[parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)],\n                                    turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), 90, { units: 'kilometers' }).geometry.coordinates])}\n                                >\n                                  <Layer\n                                    id=\"radius\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#051885',\n                                      'line-width': 2,\n                                      'line-dasharray': [2, 1],\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-label\"\n                                  type=\"geojson\"\n                                  data={turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance) / 2, 90, { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"radius-label\"\n                                    type=\"symbol\"\n                                    layout={{\n                                      'text-field': `${selectedSchool.max_distance} km`,\n                                      'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                      'text-size': 12,\n                                      'text-offset': [0, -1],\n                                    }}\n                                    paint={{\n                                      'text-color': '#051885',\n\n                                    }}\n                                  />\n                                </Source>\n                              </>\n                              :\n                              <p>Invalid coordinates or distance.</p>\n                          }\n                        </>\n\n\n                        : selectedSchool ?\n                          <Popup\n                            longitude={parseFloat(selectedSchool.longitude)}\n                            latitude={parseFloat(selectedSchool.latitude)}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)}\n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>\n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {primaryData2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(primaryData2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n\n    </>\n  )\n}\n\nexport default PrimaryDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PubDetails = ({ pubs1, listType, setPubs1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new supermarket data \n  const [pub2, setPub2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedPubs, setSelectedPubs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handlePubClick = (pub) => {\n    console.log('selected pub ->', pub)\n    setSelectedPubs(pub)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...pubs1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setPubs1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as pub2\n      setPub2([...pubs1])\n    } else {\n      setPub2(\n        pubs1.filter(item => {\n          return (\n            item.name.toLowerCase().includes(term.toLowerCase()) ||\n            item.operator.toLowerCase().includes(term.toLowerCase()) ||\n            item.walkTimeMin.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (pubs1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, pubs1])\n\n\n\n  return (\n    <>\n      {pubs1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('name')}>\n                  <h5>Pub name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {/* <div id='column3' className='pub-group sort-section' onClick={() => handleSort('operator')}>\n                  <h5>Pub group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>            */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {pub2 ? pub2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.name}</h5>\n                        </div>\n                        {/* <div className='column pub-group' id='column3'>\n                          <h5>{item.operator}</h5>\n                        </div> */}\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {pub2 ? pub2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.name}</h5>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {pub2 &&\n                        pub2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handlePubClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedPubs ?\n                        <Popup\n                          longitude={selectedPubs.longitude}\n                          latitude={selectedPubs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedPubs(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedPubs.name}</h5>\n                              <p>🍺 {selectedPubs.operator} pub group</p>\n                              <p>🍺 Distance: {selectedPubs.walkTimeMin} mins</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {pub2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(pub2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default PubDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst RestaurantDetails = ({ restaurants1, listType, setRestaurants1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedRestaurants, setSelectdRestaurant] = useState(null)\n\n\n  // state for storing new supermarket data \n  const [restaurants2, setRestaurants2] = useState([])\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSchoolClick = (restaurant) => {\n    console.log('selectd restaurant ->', restaurant)\n    setSelectdRestaurant(restaurant)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...restaurants1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setRestaurants1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as restaurants2\n      setRestaurants2([...restaurants1])\n    } else {\n      setRestaurants2(\n        restaurants1.filter(item => {\n          return (\n            item.restaurant_name.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (restaurants1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, restaurants1])\n\n\n\n  return (\n    <>\n      {restaurants1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('restaurant_name')}>\n                  <h5>Restaurant name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='sort-section' onClick={() => handleSort('rating')}>\n                  <h5>Rating</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div> :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5'>Website</h5>\n              </div>\n              <div className='school-table-details'>\n                {restaurants2 ? restaurants2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.restaurant_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.rating > 4.8 ? 'Excellent' : item.rating > 4.5 ? 'Very good' : item.rating > 4.2 ? 'Good' : item.rating > 3.9 ? 'Average' : item.rating > 0 ? 'Poor' : 'N/a'}</h5>\n                        </div>\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins </h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column' id='column5'>\n                          <a target=\"_blank\" rel='noreferrer' href={item.url}>Visit website</a>\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {restaurants2 ? restaurants2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.restaurant_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='catchment'></div>\n                                <h5>{item.rating > 4.8 ? 'Excellent' : item.rating > 4.5 ? 'Very good' : item.rating > 4.2 ? 'Good' : item.rating > 3.9 ? 'Average' : item.rating > 0 ? 'Poor' : 'N/a'}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {restaurants2 &&\n                        restaurants2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSchoolClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedRestaurants ?\n                        <Popup\n                          longitude={selectedRestaurants.longitude}\n                          latitude={selectedRestaurants.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectdRestaurant(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedRestaurants.restaurant_name}</h5>\n                              <p>{selectedRestaurants.master_cuisine}</p>\n                              {/* <p>{selectedRestaurants.rating} /5</p> */}\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {restaurants2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(restaurants2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default RestaurantDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\nconst SecondaryDetails = ({ propertyData, secondaryData1, listType, setSecondaryData1, postcodeData, tableMapView }) => {\n\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new primary data \n  const [secondaryData2, setSecondaryData2] = useState([])\n\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // trigger icon pop up\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n\n  // ? Section3: Ability to sort data by different column names\n  // function to sort data by column name\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...secondaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setSecondaryData1(sortedData)\n  }\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as secondaryData1\n      setSecondaryData2([...secondaryData1])\n    } else {\n      setSecondaryData2(\n        secondaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (secondaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, secondaryData1])\n\n\n\n  return (\n\n    <>\n      {secondaryData1 ?\n        <section className=\"primary-details-section\">\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('total_pass_rate')}>\n                  <h5>GCSE pass rate</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('total_top_rate')}>\n                  <h5>GCSE A/A*</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : ''}\n              </div>\n              <div className='school-table-details'>\n                {secondaryData2 ? secondaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          <h5>{(item.total_pass_rate === null ? 'N/a' : item.total_pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column7'>\n                          <h5>{(item.total_top_rate === null ? 'N/a' : item.total_top_rate)}</h5>\n                        </div>\n                        {listType === 'short list' ?\n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.school_type === 'Independent school' ? 'N/a' : item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n            </div>\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {secondaryData2 ? secondaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.school_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='secondaries'></div>\n                                <h5>{item.school_type}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='ofsted'></div>\n                                <h5>{item.ofsted_results}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='catchment'></div>\n                                <h5>{item.within_catchment}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='distance'></div>\n                                <h5>{item.walkTimeMin} mins</h5>\n                              </div>\n                            </div>\n\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {secondaryData2 &&\n                        secondaryData2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSchoolClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ?\n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }}\n                              paint={{\n                                'text-color': '#051885',\n\n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)}\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>\n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n              </div>\n\n              : ''}\n          {secondaryData2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(secondaryData2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SecondaryDetails","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst SupermarketDetails = ({ propertyData, supermarkets1, listType, setSupermarkets1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new supermarket data \n  const [supermarkets2, setSupermarkets2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedSupermarkets, setSelectedSupermarkts] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSupermarketClick = (supermarket) => {\n    console.log('selectd supermarket ->', supermarket)\n    setSelectedSupermarkts(supermarket)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...supermarkets1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setSupermarkets1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as supermarkets1\n      setSupermarkets2([...supermarkets1])\n    } else {\n      setSupermarkets2(\n        supermarkets1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.segment.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (supermarkets1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, supermarkets1])\n\n\n\n  return (\n    <>\n      {supermarkets1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('supermarket_store_name')}>\n                  <h5>Supermarket name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('segment')}>\n                  <h5>Segment</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column4' className='sort-section' onClick={() => handleSort('store_size')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {supermarkets2 ? supermarkets2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.supermarket_store_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.segment}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.store_size}</h5>\n                        </div>\n\n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {supermarkets2 ? supermarkets2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                \n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.supermarket_store_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='supermarkets'></div>\n                                <h5>{item.store_size}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div>\n                                : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {supermarkets2 &&\n                        supermarkets2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSupermarketClick(item)}\n\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n                      {selectedSupermarkets ?\n                        <Popup\n                          longitude={selectedSupermarkets.longitude}\n                          latitude={selectedSupermarkets.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedSupermarkts(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedSupermarkets.supermarket_store_name}</h5>\n                              <p>{selectedSupermarkets.store_size}</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {supermarkets2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(supermarkets2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SupermarketDetails\n\n\n\n"],"names":["Loading","_jsx","className","children","src","require","alt","_ref","textColour","pageType","_Fragment","_jsxs","id","style","color","ev1","listType","setEv1","postcodeData","tableMapView","useNavigate","ev2","setEv2","useState","sortField","setSortField","sortDirection","setSortDirection","selectedEvs","setSelectedEvs","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","console","log","parseInt","target","useEffect","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","item","location","toLowerCase","includes","fast_charging","onClick","map","index","power","walkTimeMin","slice","onMouseEnter","ReactMapGL","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","Marker","handleEvClick","gym","Popup","closeOnClick","onClose","ReactPaginate","pageCount","Math","ceil","length","onPageChange","data","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","gyms1","setGyms1","gyms2","setGyms2","selectedGyms","setSelectedGyms","gym_name","gym_group","class_type","long","Lat","handleGymClick","primaryData1","setPrimaryData1","navigate","primaryData2","setPrimaryData2","selectedSchool","setSelectedSchool","school_name","local_authority","school_type","ofsted_results","toString","total_pass_rate","total_top_rate","within_catchment","max_distance","round","pupils_at_standard","pupils_exceeding_standard","handleSchoolClick","school","parseFloat","Source","type","turf","units","Layer","paint","geometry","coordinates","layout","pubs1","setPubs1","pub2","setPub2","selectedPubs","setSelectedPubs","name","operator","handlePubClick","pub","restaurants1","setRestaurants1","selectedRestaurants","setSelectdRestaurant","restaurants2","setRestaurants2","restaurant_name","rating","rel","href","url","restaurant","master_cuisine","propertyData","secondaryData1","setSecondaryData1","secondaryData2","setSecondaryData2","supermarkets1","setSupermarkets1","supermarkets2","setSupermarkets2","selectedSupermarkets","setSelectedSupermarkts","cleansed_name","segment","size","supermarket_store_name","store_size","handleSupermarketClick","supermarket"],"sourceRoot":""}