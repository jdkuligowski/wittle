{"version":3,"file":"static/js/738.11b6f238.chunk.js","mappings":"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","sources":["components/whiteLabel/comparisonSection/WhiteComparison.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport { NumericFormat } from 'react-number-format'\nimport NavBar from '../../tools/NavBar'\nimport ProfileMobileSlider from '../../tools/ProfileMobileSlider'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\n\n\n\n\nconst WhiteComparison = () => {\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // setting states for property comparison\n  const [property1, setProperty1] = useState()\n  const [property2, setProperty2] = useState()\n\n  // state for user data\n  const [userData, setUserData] = useState()\n  const [propertyList, setPropertyList] = useState()\n\n\n  // define the states to capture the scores of the compared propeerties\n  const [property1Numbers, setProperty1Numbers] = useState([])\n  const [property2Numbers, setProperty2Numbers] = useState([])\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Comparison')\n  const [profileDetail, setProfileDetail] = useState('Comparison')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n\n  // state to capture the values of the two proeprties that are being compared\n  const [propertyColours, setPropertyColours] = useState({\n    property1_total: '',\n    property2_total: '',\n    property1_restaurant: '',\n    property2_reestaurant: '',\n    property1_pub: '',\n    property2_pub: '',\n    property1_cafe: '',\n    property2_cafe: '',\n    property1_takeaway: '',\n    property2_takeaway: '',\n    property1_tube: '',\n    property2_tube: '',\n    property1_train: '',\n    property2_train: '',\n    property1_supermarket: '',\n    property2_supermarket: '',\n    property1_gym: '',\n    property2_gym: '',\n    property1_park: '',\n    property2_park: '',\n    property1_primary: '',\n    property2_primary: '',\n    property1_secondary: '',\n    property2_secondary: '',\n  })\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setPropertyList(data.white_properties)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n    console.log('carrying out userData load')\n  }, [])\n\n  // update values for first property comparison\n  const updateComparison1 = (e) => {\n    setProperty1(e.target.value)\n    console.log('property 1 value ->', e.target.value)\n  }\n\n  // function for loading the first property data\n  const loadProperty1 =  () => {\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${property1}`)\n        console.log('property 1 ->', data[0])\n        setProperty1Numbers(data[0])\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // load function\n  useEffect(() => {\n    if (property1) {\n      loadProperty1()\n    }\n  }, [property1])\n\n\n  // update values for second property comparison\n  const updateComparison2 = (e) => {\n    setProperty2(e.target.value)\n    console.log('property 2 value ->', e.target.value)\n  }\n\n  // function for loading the first property data\n  const loadProperty2 =  () => {\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${property2}`)\n        console.log('property 2 ->', data[0])\n        setProperty2Numbers(data[0])\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // load function\n  useEffect(() => {\n    if (property2) {\n      loadProperty2()\n    }\n  }, [property2])\n\n  return (\n    <>\n      {userData ?\n        <section className='agent-profile-page'>\n          <div className='desktop-nav'>\n            <WhiteNavbar\n              navbarColour='#FDF7F0'\n            />\n          </div>\n          <div className='mobile-nav'>\n            <NavBarRevised\n              setProfileContent={setProfileContent}\n              profileContent={profileContent}\n              profileDetail={profileDetail}\n              setProfileDetail={setProfileDetail}\n            />\n          </div>\n          <WhiteSidebar \n            setProfileDetail={setProfileDetail}\n            variableSide={variableSide} \n            setProfileContent={setProfileContent} \n            setVariableSide={setVariableSide}\n          />    \n          <div className='comparison-grid'>\n            <div className='comparison-title'>\n              <h1>Property 1</h1>\n              <h1 className='desktop-results'>Results</h1>\n              <h1>Property 2</h1>\n            </div>\n            <div className='comparison-subtitle'>\n              <select className='comparison-dropdown' onChange={updateComparison1}>\n                <option>Select property</option>\n                {propertyList.map((property, index) => <option key={index} value={property.postcode}>{property.name}</option>)}\n              </select>\n              <select className='comparison-dropdown' onChange={updateComparison2}>\n                <option>Select property</option>\n                {propertyList.map((property, index) => <option key={index} value={property.postcode}>{property.name}</option>)}\n              </select>\n            </div>\n            {/* {property1 || property2 ?\n        <> */}\n            {/* create section to be used on mobile */}\n            <div className='comparison-properties-mobile'>\n              {userData ? userData.white_properties.filter(property => property.postcode === property1).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n              {userData ? userData.white_properties.filter(property => property.postcode === property2).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n            </div>\n\n            {/* Main section used on desktop */}\n            {/* Property on the left hand side of the page */}\n            <div className='comparison-body' style={{ justifyContent: !property1 ? 'center' : 'inherit' }}>\n              {userData ? userData.white_properties.filter(property => property.postcode === property1).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n              <div className='comparison-results'>\n\n                {/* Secondary schools */}\n                <div className='result-title'>\n                  <h5>Secondary schools</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile && (\n                      [...Array(100 - Math.round((property1Numbers.secondaries.total_score_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile ? parseInt((property1Numbers.secondaries.total_score_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile && (\n                      [...Array(parseInt((property1Numbers.secondaries.total_score_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile) ?  parseInt(property1Numbers.secondaries.total_score_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile) ? parseInt(property2Numbers.secondaries.total_score_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.secondaries && property1Numbers.secondaries.total_score_percentile &&  (\n                      [...Array(parseInt(property2Numbers.secondaries.total_score_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile) ?  parseInt(property1Numbers.secondaries.total_score_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile) ? parseInt(property2Numbers.secondaries.total_score_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile ? Math.round(property2Numbers.secondaries.total_score_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Green space */}\n                <div className='result-title'>\n                  <h5>Green space</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0] && (\n                      [...Array(100 - property1Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0] ? (property1Numbers.parks_lsoa[0].london_percentile) : ''}%</h5>\n                    {property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] && (\n                      [...Array(property1Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0]) ?  parseInt(property1Numbers.parks_lsoa[0].london_percentile) : 0) \n                            < ((property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0]) ? parseInt(property2Numbers.parks_lsoa[0].london_percentile) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] && (\n                      [...Array(property2Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers) ?  parseInt(property1Numbers.parks_lsoa[0].london_percentile) : 0) \n                          > ((property2Numbers) ? parseInt(property2Numbers.parks_lsoa[0].london_percentile) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] ? Math.round(property2Numbers.parks_lsoa[0].london_percentile) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Restaurants */}\n                <div className='result-title'>\n                  <h5>Restaurants</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile && (\n                      [...Array(parseInt(100 - Math.round((property1Numbers.restaurants.normal_percentile * 100))))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile ? parseInt((property1Numbers.restaurants.normal_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile && (\n                      [...Array(parseInt((property1Numbers.restaurants.normal_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile) ?  parseInt(property1Numbers.restaurants.normal_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile) ? parseInt(property2Numbers.restaurants.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.restaurants && property1Numbers.restaurants.normal_percentile &&  (\n                      [...Array(parseInt(property2Numbers.restaurants.normal_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile) ?  parseInt(property1Numbers.restaurants.normal_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile) ? parseInt(property2Numbers.restaurants.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile ? Math.round(property2Numbers.restaurants.normal_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Pubs */}\n                <div className='result-title'>\n                  <h5>Pubs</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile && (\n                      [...Array(parseInt(100 - Math.round((property1Numbers.pubs.normal_percentile * 100))))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile ? parseInt((property1Numbers.pubs.normal_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile && (\n                      [...Array(parseInt((property1Numbers.pubs.normal_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile) ?  parseInt(property1Numbers.pubs.normal_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile) ? parseInt(property2Numbers.pubs.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.pubs && property1Numbers.pubs.normal_percentile &&  (\n                      [...Array(parseInt(property2Numbers.pubs.normal_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile) ?  parseInt(property1Numbers.pubs.normal_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile) ? parseInt(property2Numbers.pubs.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile ? Math.round(property2Numbers.pubs.normal_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* Fitness */}\n                <div className='result-title'>\n                  <h5>Fitness</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.fitness.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile ? parseInt((property1Numbers.fitness.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile && (\n                      [...Array(parseInt((property1Numbers.fitness.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile) ?  parseInt(property1Numbers.fitness.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile) ? parseInt(property2Numbers.fitness.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.fitness && property1Numbers.fitness.percentile &&  (\n                      [...Array(parseInt(property2Numbers.fitness.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile) ?  parseInt(property1Numbers.fitness.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile) ? parseInt(property2Numbers.fitness.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile ? Math.round(property2Numbers.fitness.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* EV */}\n                <div className='result-title'>\n                  <h5>EV</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.ev.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile ? parseInt((property1Numbers.ev.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile && (\n                      [...Array(parseInt((property1Numbers.ev.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile) ?  parseInt(property1Numbers.ev.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile) ? parseInt(property2Numbers.ev.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.ev && property1Numbers.ev.percentile &&  (\n                      [...Array(parseInt(property2Numbers.ev.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile) ?  parseInt(property1Numbers.ev.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile) ? parseInt(property2Numbers.ev.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile ? Math.round(property2Numbers.ev.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* Tubes */}\n                <div className='result-title'>\n                  <h5>Tubes</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.tubes.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile ? parseInt((property1Numbers.tubes.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile && (\n                      [...Array(parseInt((property1Numbers.tubes.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile) ?  parseInt(property1Numbers.tubes.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile) ? parseInt(property2Numbers.tubes.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.tubes && property1Numbers.tubes.percentile &&  (\n                      [...Array(parseInt(property2Numbers.tubes.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile) ?  parseInt(property1Numbers.tubes.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile) ? parseInt(property2Numbers.tubes.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile ? Math.round(property2Numbers.tubes.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Crime */}\n                <div className='result-title'>\n                  <h5>Crime</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.crime && property1Numbers.crime[0] && (\n                      [...Array(parseInt(property1Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.crime && property1Numbers.crime[0] ? 100 - parseInt(property1Numbers.crime[0].percentile * 100) : ''}%</h5>\n                    {property2Numbers && property2Numbers.crime && property2Numbers.crime[0] && (\n                      [...Array(100 - parseInt(property1Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.crime && property1Numbers.crime[0]) ?  100 - parseInt(property1Numbers.crime[0].percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.crime && property2Numbers.crime[0]) ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.crime && property2Numbers.crime[0] && (\n                      [...Array(100 - parseInt(property2Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers) ? 100 - parseInt(property1Numbers.crime[0].percentile * 100) : 0) \n                          > ((property2Numbers) ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.crime && property2Numbers.crime[0] ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n\n                {/* Supermarkets */}\n                <div className='result-title'>\n                  <h5>Supermarkets</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.supermarkets.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile ? parseInt((property1Numbers.supermarkets.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile && (\n                      [...Array(parseInt((property1Numbers.supermarkets.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile) ?  parseInt(property1Numbers.supermarkets.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile) ? parseInt(property2Numbers.supermarkets.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.supermarkets && property1Numbers.supermarkets.percentile &&  (\n                      [...Array(parseInt(property2Numbers.supermarkets.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile) ?  parseInt(property1Numbers.supermarkets.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile) ? parseInt(property2Numbers.supermarkets.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile ? Math.round(property2Numbers.supermarkets.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n                  \n              </div>\n\n\n            \n              {userData ? userData.white_properties.filter(property => property.postcode === property2).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n            </div>\n            {/* </> */}\n\n          </div>\n        </section>\n        :\n\n        ''\n  \n      }\n    </>\n  )\n}\n\nexport default WhiteComparison\n\n"],"names":["navigate","useNavigate","property1","setProperty1","useState","property2","setProperty2","userData","setUserData","propertyList","setPropertyList","property1Numbers","setProperty1Numbers","property2Numbers","setProperty2Numbers","errors","setErrors","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","propertyColours","setPropertyColours","property1_total","property2_total","property1_restaurant","property2_reestaurant","property1_pub","property2_pub","property1_cafe","property2_cafe","property1_takeaway","property2_takeaway","property1_tube","property2_tube","property1_train","property2_train","property1_supermarket","property2_supermarket","property1_gym","property2_gym","property1_park","property2_park","property1_primary","property2_primary","property1_secondary","property2_secondary","useEffect","isUserAuth","async","data","axios","getUserToken","headers","Authorization","getAccessToken","console","log","white_properties","getUser","error","loadUserData","getPostcode","loadProperty1","loadProperty2","className","navbarColour","onChange","e","target","value","map","property","index","postcode","name","filter","onClick","style","backgroundImage","image","price","displayType","thousandSeparator","prefix","bedrooms","type","justifyContent","secondaries","total_score_percentile","Array","Math","round","choice","parseInt","backgroundColor","parks_lsoa","london_percentile","restaurants","normal_percentile","pubs","fitness","percentile","ev","tubes","crime","supermarkets"],"sourceRoot":""}