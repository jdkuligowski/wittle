{"version":3,"file":"static/js/490.422d00c2.chunk.js","mappings":"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","sources":["components/tools/NavBarRevised.js","components/tools/WhiteNavbar.js","components/whiteLabel/WhiteSidebar.js","utils/EventBus.js"],"sourcesContent":["import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { useDetectOutsideClick } from './ClickDropdown'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\n\nconst NavBarRevised = ({ setProfileContent, profileContent, profileDetail, setProfileDetail }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  // ? Section 3: controlling the state and functions for the nav bar changing color and section\n  // state for colour of navbar\n  const [navColour, setNavColour] = useState('#1A276C')\n  const [titleColour, setTitleColour] = useState('#FDF7F0')\n  const [textColour, setTextColour] = useState('#ED6B86')\n\n  // function for selecting home page\n  const homeSelect = () => {\n    setProfileContent('Home')\n    setProfileDetail('Home')\n    navigate('/agents/profile')\n  }\n\n  // function for selecting wittle search\n  const listingGeneratorSelect = () => {\n    setProfileDetail('Listing generator')\n    setProfileContent('Listing generator')\n    navigate('/agents/listing-generator')\n  }\n\n  // function for selecting wittle lifestyle\n  const leadGeneratorSelect = () => {\n    setProfileContent('Lead generator test')\n    setProfileDetail('Lead generator test')\n    navigate('/agents/lead-gen')\n  }\n\n  // function for selecting wittle lifestyle\n  const howToSelect = () => {\n    setProfileContent('How to guide')\n    setProfileDetail('How to guide')\n    navigate('/agents/guide')\n  }\n\n  // function for selecting wittle lifestyle\n  const propertySearchSelect = () => {\n    setProfileContent('Property search')\n    setProfileDetail('Property search')\n    navigate('/agents/wittle-search')\n  }\n\n  // function for selecting wittle lifestyle\n  const accountSelect = () => {\n    setProfileContent('Account')\n    setProfileDetail('Account')\n    navigate('/agents/account')\n\n  }\n\n  return (\n    <>\n      <section className='centered-nav-bar' style={{ backgroundColor: navColour }}>\n        <section className='top-section'>\n\n          <div className='logo'>\n            <div className='wittle-logo' onClick={() => navigate('/')}></div>\n          </div>\n        </section>\n        <section className='nav-slider'>\n          <h4 style={{ color: profileContent === 'Home' ? titleColour : textColour, textUnderlineOffset: profileContent === 'Home' ? '5px' : '' }} onClick={homeSelect}>HOME</h4>\n          <h4 style={{ color: profileContent === 'Listing generator' ? titleColour : textColour, textUnderlineOffset: profileContent === 'Listing generator' ? '5px' : '' }} onClick={listingGeneratorSelect}>LISTING GENERATOR</h4>\n          <h4 style={{ color: profileContent === 'Lead generator' ? titleColour : textColour, textUnderlineOffset: profileContent === 'Lead generator' ? '5px' : '' }} onClick={leadGeneratorSelect}>LEAD GENERATOR</h4>\n          <h4 style={{ color: profileContent === 'Property search' ? titleColour : textColour, textUnderlineOffset: profileContent === 'Property search' ? '5px' : '' }} onClick={propertySearchSelect}>PROPERTY SEARCH</h4>\n          <h4 style={{ color: profileContent === 'How to guide' ? titleColour : textColour, textUnderlineOffset: profileContent === 'How to guide' ? '5px' : '' }} onClick={howToSelect}>HOW TO GUIDE</h4>\n          <h4 style={{ color: profileContent === 'Account' ? titleColour : textColour, textUnderlineOffset: profileContent === 'Account' ? '5px' : '' }} onClick={accountSelect}>ACCOUNT</h4>\n        </section>\n      </section>\n      {/* <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      /> */}\n    </>\n  )\n}\n\nexport default NavBarRevised\n\n\n\n\n// {isUserAuth() ?\n//   <div className=\"menu-container\" onClick={handleMenuShow} >\n//     <div className=\"menu-trigger\" >\n//       <span>\n//         <div className='burger-icon'>\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//         </div>\n//       </span>\n//     </div>\n//     <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//       <ul>\n//         <li className='dropdowns'><a href=\"/property-search\">New property search</a></li>\n//         <li className='dropdowns'><a href=\"/wittle-search\">New Wittle search</a></li>\n//         <li className='dropdowns'><a onClick={() => navigate(`/profile/${getUserToken()}`)}>Home</a></li>\n//         <li className='dropdowns' onClick={removeItemFromStorage}><a>Sign out</a></li>\n//       </ul>\n//     </nav>\n//   </div>\n//   :\n//   <>\n//     <div className='menu-container' onClick={handleMenuShow} >\n//       <div className=\"menu-trigger\" >\n//         <span>\n//           <div className='burger-icon'>\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//           </div>\n//         </span>\n//       </div>\n//       <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//         <form className='form-detail' onSubmit={handleSubmit}>\n//           <p>Log in to your account</p>\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={handleChange} />\n//           <div className='login-input'>\n//             <input type={loginPasswordType} name='password' className='password-input' placeholder='Password' value={registerData.password} onChange={handleChange} />\n//             <div className='password-icon-container' onClick={passwordReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           <button onClick={openDropdown} className='sign-up' type='submit'>\n//             <span>\n//               <div className='burger-icon'>\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//               </div>\n//             </span>\n//           </button>\n//           {/* <GoogleLogin onSuccess={googleLogin} onError={errorMessage} /> */}\n\n//           <h5>New to Wittle?\n//             <span onClick={handleRegisterShow}> Join us</span>\n//           </h5>\n//         </form>\n//       </nav>\n//     </div>\n//     {/* <div className='register-modal-container'> */}\n//     <Modal show={registerShow} onHide={handleRegisterClose} backdrop='static' className='register-modal'>\n//       <Modal.Body>\n//         <form className='form-detail' onSubmit={registerSubmit} >\n//           <div className='register-title'>\n//             <h1>Unlock the benefits of Wittle</h1>\n//             <h1 className='x-close' onClick={handleRegisterClose}>x</h1>\n//           </div>\n//           <p className='form-overview'>Set up an account to help you find the perfect home</p>\n//           <hr />\n//           {/* First name */}\n//           <input type='text' name='first_name' className='input' placeholder='First name' value={registerData.first_name} onChange={registerChange} />\n//           {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n//           {/* Last namee */}\n//           <input type='text' name='last_name' className='input' placeholder='Last name' value={registerData.last_name} onChange={registerChange} />\n//           {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n//           {/* Email */}\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={registerChange} />\n//           {registerError.email && <p className=\"error\">* {registerError.email}</p>}\n//           {/* Username */}\n//           <input type='text' name='username' className='input' placeholder='Username' value={registerData.username} onChange={registerChange} />\n//           {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n//           {/* Password */}\n//           <div className='login-input'>\n//             <input type={registerPasswordType} name='password' className='password-input-register' placeholder='Password' value={registerData.password} onChange={registerChange} />\n//             <div className='password-icon-container' onClick={passwordRegisterReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n//           {/* Password confirmation */}\n//           <input type='password' name='password_confirmation' className='input' placeholder='Password confirmation' value={registerData.password_confirmation} onChange={registerChange} />\n//           {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n\n//           <button type='submit'>Register</button>\n//           {registerError.post && <p className=\"error\">* {registerError.post}</p>}\n\n//         </form>\n//         <div className='register-bottom'>\n//           <button className='register-close' onClick={handleRegisterClose}>Close</button>\n//         </div>\n//       </Modal.Body>\n//     </Modal>\n//     {/* </div> */}\n\n//   </>\n// }\n\n","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst WhiteNavbar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='nav-section no-print' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}></h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n        </div>\n    \n        {isUserAuth() ?\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={removeItemFromStorage}><a>Sign out</a></h3>\n          </div>\n\n          :\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={() => navigate('/login')}><a>Sign in</a></h3>\n          </div>\n\n        }\n      </section>\n\n    </>\n  )\n\n}\n\nexport default WhiteNavbar","import { useParams, useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useContext } from 'react'\nimport { getAccessToken, getUserToken, isUserAuth } from '../auth/Auth'\nimport axios from 'axios'\nimport { eventBus } from '../../utils/EventBus'\n\nconst WhiteSidebar = ({ setProfileDetail, variableSide, setProfileContent, setVariableSide }) => {\n\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // userdata state\n  const [userData, setUserData] = useState()\n\n  // errors\n  const [errors, setErrors] = useState()\n\n\n  const [activeItem, setActiveItem] = useState('')\n\n  // state for changing the view to insights results\n  const [insightView, setInsightView] = useState('Search')\n\n\n  const [leadGenRemaining, setLeadGenRemaining] = useState(0)\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          if (data.usage_stats && data.usage_stats[0].package === 'Free') {\n            const limit = 20 // Assuming a limit of 200 for free users\n            const used = data.usage_stats[0].save_lead_gen_month_total\n            setLeadGenRemaining(limit - used)\n          } else if (data.usage_stats && data.usage_stats[0].package === 'Boost') {\n            const limit = 250 // Assuming a limit of 200 for free users\n            const used = data.usage_stats[0].save_lead_gen_month_total\n            setLeadGenRemaining(limit - used)\n          }\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     if (activeItem === 'Home') {\n  //       navigate('/agents/profile')\n  //     } else if (activeItem === 'Saved items') {\n  //       navigate('/agents/favourites')\n  //     }\n  //     // ... other conditions\n  //   }, 100)\n  // }, [activeItem])\n\n\n  useEffect(() => {\n    const updateUserData = () => {\n      loadUserData() // Call the function to refresh user data in the sidebar\n    }\n\n    // Listen for the userDataUpdated event\n    eventBus.on('userDataUpdated', updateUserData)\n\n    // Clean up the listener when the component unmounts\n    return () => {\n      eventBus.off('userDataUpdated', updateUserData)\n    }\n  }, [])\n\n\n\n\n  return (\n    <>\n      <section className='profile-sidebar-open no-print remove-margin'>\n        <div className='logo-section'>\n          <div className='logo' onClick={() => navigate('/')}>\n            {/* <h2 onClick={() => navigate('/')}>Wittle</h2> */}\n          </div>\n        </div>\n\n\n        <div className='profile-buttons'>\n          <div className={`profile-button-title ${activeItem === 'Home' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Home')\n              setProfileDetail('Home')\n              setProfileContent('Home')\n              navigate('/agents/profile')\n\n            }}>\n            <div className='icon' id='home-icon' ></div>\n            <h2>Wittle home</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'Listing generator' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Listing generator')\n              setProfileDetail('Listing generator')\n              setProfileContent('Listing generator')\n              navigate('/agents/listing-generator')\n            }}>\n            <div className='icon' id='listing-icon'></div>\n            <h2>Listing generator</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'Lead generator test' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Lead generator test')\n              setProfileContent('Lead generator test')\n              setProfileDetail('Lead generator test')\n              navigate('/agents/lead-gen')\n            }}>\n            <div className='icon' id='finder-icon'></div>\n            <h2>Lead generator</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'Property search' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Property search')\n              setProfileContent('Property search')\n              setProfileDetail('Property search')\n              navigate('/agents/wittle-search')\n            }}>\n            <div className='icon' id='search-icon'></div>\n            <h2>Wittle search</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'How to guide' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('How to guide')\n              setProfileContent('How to guide')\n              setProfileDetail('How to guide')\n              navigate('/agents/guide')\n            }}>\n            <div className='icon' id='help-icon'></div>\n            <h2>How-to guide</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'Account' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Account')\n              setProfileContent('Account')\n              setProfileDetail('Account')\n              navigate('/agents/account')\n            }}>\n            <div className='icon' id='account-icon'></div>\n            <h2>Account details</h2>\n          </div>\n\n        </div>\n        {userData && userData.usage_stats && userData.usage_stats[0] && userData.usage_stats[0].package === 'Free' ? (\n          <>\n            <div className='progress-section'>\n              <div className=\"progress-container\">\n                <div className=\"progress-bar\" style={{ width: `${((Math.max(0, leadGenRemaining) / 20) * 100).toFixed(0)}%` }}></div>\n              </div>\n              <p className='leads-remaining'>{leadGenRemaining} leads remaining</p>\n            </div>\n          </>\n        )\n          : userData && userData.usage_stats && userData.usage_stats[0] && userData.usage_stats[0].package === 'Boost' ?\n            <>\n              <div className='progress-section'>\n                <div className=\"progress-container\">\n                  <div className=\"progress-bar\" style={{ width: `${((Math.max(0, leadGenRemaining) / 250) * 100).toFixed(0)}%` }}></div>\n                </div>\n                <p className='leads-remaining'>{leadGenRemaining} leads remaining</p>\n              </div>\n            </>\n\n            : ''\n        }\n\n      </section>\n    </>\n  )\n}\n\nexport default WhiteSidebar","// src/utils/EventBus.js\nimport EventEmitter from 'eventemitter3'\nexport const eventBus = new EventEmitter()\n"],"names":["_ref","setProfileContent","profileContent","profileDetail","setProfileDetail","navigate","useNavigate","isActive","setIsActive","useRef","useState","errors","setErrors","email","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","navColour","setNavColour","titleColour","setTitleColour","textColour","setTextColour","_jsx","_Fragment","children","_jsxs","className","style","backgroundColor","onClick","color","textUnderlineOffset","homeSelect","listingGeneratorSelect","leadGeneratorSelect","propertySearchSelect","howToSelect","accountSelect","navbarColour","isUserAuth","token","localStorage","removeItem","window","location","reload","variableSide","setVariableSide","userData","setUserData","activeItem","setActiveItem","insightView","setInsightView","leadGenRemaining","setLeadGenRemaining","useEffect","updateUserData","async","data","axios","get","getUserToken","headers","Authorization","getAccessToken","console","log","usage_stats","package","limit","used","save_lead_gen_month_total","error","getUser","eventBus","on","off","id","width","Math","max","toFixed","EventEmitter"],"sourceRoot":""}