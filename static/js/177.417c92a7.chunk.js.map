{"version":3,"file":"static/js/177.417c92a7.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyDetails/SinglePropertySummary.js","components/whiteLabel/variableSummaries/VariablesPage.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react-is/index.js"],"sourcesContent":["import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'\nimport NavBar from '../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Footer from '../../tools/Footer'\nimport LifestyleHighlights from './componentHighlights/LifestyleHighlights'\nimport SchoolHighlights from './componentHighlights/SchoolHighlights'\nimport TransportHighlights from './componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from './componentHighlights/NeighbourhoodHighlights'\nimport PropertySummary from './componentHighlights/PropertySummary'\nimport PropertyDetailSlider from './helpers/PropertyDetailSlider'\nimport PrimaryDetails from './componentDetails/PrimaryDetails'\nimport SecondaryDetails from './componentDetails/SecondaryDetails'\nimport WhiteSidebar from '../WhiteSidebar'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport RestaurantDetails from './componentDetails/RestaurantDetails'\nimport FitnessDetails from './componentDetails/FitnessDetails'\nimport SupermarketDetails from './componentDetails/SupermarketDetails'\nimport VariablesPage from '../variableSummaries/VariablesPage'\nimport WhiteComparison from '../comparisonSection/WhiteComparison'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from './componentDetails/EVDetails'\nimport PubDetails from './componentDetails/PubDetails'\nimport TubeDetails from './componentDetails/TubeDetails'\n\nconst SinglePropertySummary = () => {\n\n  // ? Section 1: Define states\n  // state for switching page\n  const { postcode } = useParams()\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n  \n  // state for handling moving back between pages\n  const location = useLocation()\n  const [historyStack, setHistoryStack] = useState([])\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('My properties')\n  const [profileDetail, setProfileDetail] = useState('My properties')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for company data\n  const [company, setCompany] = useState()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for what information is shown\n  const [propertyContent, setPropertyContent] = useState('Property overview')\n\n  // states for opening and closing the sections\n  const [summarySection, setSummarySection] = useState(true)\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants]  = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  // unique stations and lines\n  const [uniqueTubeLines, setUniqueTubeLines] = useState()\n  const [uniqueTubeStations, setUniqueTubeStations] = useState()\n\n  // neghbourhood score\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  // slider selection\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  // set state for lisrt of properties\n  const [propertyList, setPropertyList] = useState()\n\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = () => {\n    try {\n      const input = JSON.parse(localStorage.getItem('listing-postcode'))\n\n      const getPostcode = async () => {\n        const { data } = await axios.post('/api/postcodes/', { postcode: input })\n        console.log('postcode data ->', data)\n        setPostcodes(data)\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n\n  useEffect(() =>{\n    loadPostcodeData()\n  }, [])\n\n\n\n\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    if (postcodeData) {\n      loadUserData()\n    }\n  }, [postcodeData])\n\n\n\n  // load current property based on the company and postcode\n  const loadProperties = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getProperties = async () => {\n        const { data } = await axios.get(`/api/white_properties/${company}`, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        const matchedProperty = data.find(item => item.postcode === postcode)\n        setPropertyData(matchedProperty)\n        console.log('current-property ->', matchedProperty)\n      }\n      getProperties()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    if (userData) {\n      loadProperties()\n    }\n  }, [userData])\n\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n  \n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n\n      // handle independent schools\n      if (item.school_type ===  'Independent school') {\n        item.within_catchment =  'N/a'\n\n      // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n\n      // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n      // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n\n      // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n      \n      // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n\n      // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n\n      // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n      \n      // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n  \n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      }  else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n      // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n      // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n      // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n      // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n      // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n  \n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n  \n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n    \n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n    // extract the key studios\n    const topThreeStudios = []\n  \n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n        \n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n    \n    // extract the key studios\n    const topThreeSupermarkets = []\n  \n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_brand)) {\n        topThreeSupermarkets.push(supermarket.supermarket_brand)\n        uniqueSupermarkets.add(supermarket.supermarket_brand)\n    \n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    } \n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    console.log('Nearby supermarkets ->', nearbySupermarkets)\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n  \n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n    \n    // filter out restaurants further than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n    \n\n    setTubes1(nearbyTubes)\n\n    const lineCounts = nearbyTubes.reduce((acc, tube) => {\n      acc[tube.line] = (acc[tube.line] || 0) + 1\n      return acc\n    }, {})\n\n    const distinctLineCount = Object.keys(lineCounts).length\n\n    setUniqueTubeLines(distinctLineCount)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n  \n  // function for restaurants with least walking distance\n  const getNearbyChargers = () => {\n\n    // Average walking speed is 5km/h. \n    const walkDistanceKm10 = 5 * (10 / 60)\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyChargers = ev.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm10\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n\n    setEv1(nearbyChargers)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (ev) {\n      getNearbyChargers()\n    }\n  }, [ev])\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  \n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n  \n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Calculate a neighbourhood score\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n                                postcodeData[0].ev.percentile +\n                                postcodeData[0].fitness.percentile +\n                                (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n                                postcodeData[0].restaurants.normal_percentile +\n                                postcodeData[0].supermarkets.percentile +\n                                postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n  \n\n\n  // ? Section 12: Load and sort tubes data\n  const loadTrainsData = () => {\n  // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n  \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n      Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n  \n\n    setTrains1(nearbyTrains)\n    console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n  // ?Section 13: Other helpful functions\n  // handle moving to the oprevious page\n  // When location changes, add the new location to the history stack\n  useEffect(() => {\n    setHistoryStack((prevStack) => [...prevStack, location.pathname])\n  }, [location])\n\n\n  // To navigate back:\n  const goBack = () => {\n    // Remove the current location from the stack\n    const newStack = [...historyStack]\n    newStack.pop()\n    setHistoryStack(newStack)\n\n    // Get the last location from the new stack\n    const lastLocation = newStack[newStack.length - 1]\n\n    // Navigate to the last location, or to a default location if the stack is empty\n    navigate(lastLocation || '/')\n  }\n\n  useEffect(() => {\n    console.log(`profileContent updated to: ${profileContent}`)\n  }, [profileContent])\n\n  return (\n\n    <>\n      <section className='agent-specific-property print-container' >\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />\n        <div className='go-back-button no-print remove-margin'>\n          <h5 onClick={() =>  navigate('/agents/profile')}>&lt;- back to profile</h5>\n        </div>\n        <div className='property-options no-print'>\n          <div className='left-section'>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property overview')} style={{ textDecoration: propertyContent === 'Property overview' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property overview' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property overview' ? '700' : '400' }}>Property overview</h5>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property details')} style={{ textDecoration: propertyContent === 'Property details' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property details' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property details' ? '700' : '400'  }}>Property details</h5>\n          </div>\n          <h1 className='print-button no-print' onClick={() => window.print()}>🖨</h1>\n        </div>\n\n        {propertyContent === 'Property overview' ?\n          <section className='property-wrapper'>\n\n            {propertyData ?\n              <section className='property-details remove-margin'>\n                <img className='property-image' src={propertyData.image} alt='property-image' />\n\n                <div className='property-content'>\n                  <div className='content-blocks'>\n                    <div className='content-summary'>\n                      <div className='content-top-line'>\n                        <h1>{propertyData.name}</h1>\n                        <h1><NumericFormat value={propertyData.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /></h1>\n                      </div>\n                      <h3>{propertyData.address}</h3>\n                    </div>\n                    <div className='content-details'>\n                      <div className='content-details-top'>\n                        <h4>🏠 {propertyData.type}</h4>\n                        <h4>📦 {propertyData.size}</h4>\n                      </div>\n                      <div className='content-details-bottom'>\n                        <h4>🛌 x {propertyData.bedrooms}</h4>\n                        <h4>🛁 x {propertyData.bathrooms}</h4>\n                        <h4>🛋 x {propertyData.living_rooms}</h4>\n                      </div>\n                    </div>\n\n\n                  </div>\n\n\n                </div>\n              </section>\n              : '' }\n\n            <section className='property-summary-sections remove-margin'>\n              <div className='property-highlight' onClick={() => setSummarySection(!summarySection)}>\n                <h3>Property Summary</h3>\n                <div className='click-downs'>\n                  {summarySection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              { postcodeData && summarySection ?\n                <PropertySummary \n                  neighbourhoodScore={neighbourhoodScore}\n                  postcodeData={postcodeData}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School Highlights</h3>\n                <div className='click-downs'>\n                  {schoolSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n\n              {schoolSection ? \n                <SchoolHighlights \n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle Highlights</h3>\n                <div className='click-downs'>\n                  {lifestyleSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {lifestyleSection ? \n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport Highlights</h3>\n                <div className='click-downs'>\n                  {transportSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {transportSection ? \n                <TransportHighlights \n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                  trains1={trains1}\n                  uniqueTubeLines={uniqueTubeLines}\n                  uniqueTubeStations={uniqueTubeStations}\n                />\n                : '' }\n\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhood Highlights</h3>\n                <div className='click-downs'>\n                  {neighbourhoodSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {neighbourhoodSection ? \n                <NeighbourhoodHighlights \n                  postcodeData={postcodeData}\n                />\n                : '' }\n\n            </section>\n\n          </section>\n\n          : propertyContent === 'Property details' ?\n            <section className='property-wrapper'>\n              <PropertyDetailSlider \n                sliderSelection={sliderSelection}\n                setSliderSelection={setSliderSelection}\n              />\n\n              {sliderSelection === 'Primary schools' ? \n                <PrimaryDetails\n                  primaryData1={primaryData1}\n                  setPrimaryData1={setPrimaryData1}\n                  propertyData={propertyData}\n                  listType={'short list'}\n                  postcodeData={postcodeData}\n                />\n\n                : sliderSelection === 'Secondary schools' ?\n                  <SecondaryDetails\n                    secondaryData1={secondaryData1}\n                    setSecondaryData1={setSecondaryData1}\n                    propertyData={propertyData}\n                    listType={'short list'}\n                    postcodeData={postcodeData}\n                  />\n              \n                  : sliderSelection === 'Restaurants' ?\n                    <RestaurantDetails\n                      restaurants1={restaurants1}\n                      setRestaurants1={setRestaurants1}\n                      propertyData={propertyData}\n                      listType={'short list'}\n                      postcodeData={postcodeData}\n                    />\n              \n                    : sliderSelection === 'Fitness' ?\n                      <FitnessDetails\n                        gyms1={gyms1}\n                        setGyms1={setGyms1}\n                        propertyData={propertyData}\n                        listType={'short list'}\n                        postcodeData={postcodeData}\n                      />\n              \n                      : sliderSelection === 'Supermarkets' ?\n                        <SupermarketDetails\n                          supermarkets1={supermarkets1}\n                          setSupermarkets1={setSupermarkets1}\n                          propertyData={propertyData}\n                          listType={'short list'}\n                          postcodeData={postcodeData}\n                        />\n              \n                        : sliderSelection === 'EVs' ?\n                          <EVDetails\n                            ev1={ev1}\n                            setEv1={setEv1}\n                            propertyData={propertyData}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                          />\n              \n                          : sliderSelection === 'Pubs' ?\n                            <PubDetails\n                              pubs1={pubs1}\n                              setPubs1={setPubs1}\n                              propertyData={propertyData}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                            />\n              \n                            : sliderSelection === 'Tubes' ?\n                              <TubeDetails\n                                tubes1={tubes1}\n                                setTubes1={setTubes1}\n                                propertyData={propertyData}\n                                listType={'short list'}\n                                postcodeData={postcodeData}\n                              />\n                              : '' }\n                \n            </section>\n            : propertyContent === 'Variables' ?\n              <>\n                <VariablesPage \n                  profileDetail={profileDetail}  \n                  setProfileDetail={setProfileDetail}\n                  profileContent={profileContent}\n                />\n    \n  \n          \n              </>\n              : profileContent === 'Comparison' ?\n\n                <>\n                  <WhiteComparison\n                    userData={userData}\n                    propertyList={propertyList}\n\n                  />\n             \n                </>\n\n                : '' \n\n        }\n\n\n      </section>\n    </>\n  )\n\n\n}\n\nexport default SinglePropertySummary","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\n\nimport PrimaryDetails from '../propertyDetails/componentDetails/PrimaryDetails'\nimport SecondaryDetails from '../propertyDetails/componentDetails/SecondaryDetails'\nimport RestaurantDetails from '../propertyDetails/componentDetails/RestaurantDetails'\nimport FitnessDetails from '../propertyDetails/componentDetails/FitnessDetails'\nimport SupermarketDetails from '../propertyDetails/componentDetails/SupermarketDetails'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from '../propertyDetails/componentDetails/EVDetails'\nimport PubDetails from '../propertyDetails/componentDetails/PubDetails'\n\n\n\n\nconst VariablesPage = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for company data\n  const [company, setCompany] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [ev, setEv] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Variables')\n  const [profileDetail, setProfileDetail] = useState('Variables')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(true)\n\n\n\n  // ? Section 2: load user data\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        const sortedData = data.sort((a, b) => b.pupils_at_standard - a.pupils_at_standard)\n        setPrimaryData(sortedData)\n        console.log('all primaries ->', sortedData)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    loadPrimaryData()\n  }, [])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        const sortedData = data.sort((a, b) => b.total_pass_rate - a.total_pass_rate)\n        setSecondaryData(sortedData)\n        console.log('all secondaries ->', sortedData)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadSecondaryData()\n  }, [])\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        const sortedData = data.sort((a, b) => b.rating - a.rating)\n        setRestaurants(sortedData)\n        console.log('all restaurants ->', sortedData)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadRestaurantData()\n  }, [])\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadFitnessData()\n  }, [])\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadSupermarketData()\n  }, [])\n\n\n  // ? Section 8: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadEVdata()\n  }, [])\n\n\n  \n\n  // ? Section 8: Load and sort Pubs data\n  const loadPubs = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pubs data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPubs()\n  }, [])\n\n\n\n\n\n\n  return (\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />    \n        {profileDetail === 'Variables' ?  \n          <section className='variables-section'>\n\n            <h1>Explore the different variables</h1>\n            <div className='variables-list'>\n              <div className='variable' onClick={() => setProfileDetail('Primary schools')}>\n                <h1>🏫</h1>\n                <h3>Primary schools</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Secondary schools')}>\n                <h1>👨‍🏫</h1>\n                <h3>Secondary schools</h3>\n              </div>\n              <div className='variable'>\n                <h1>🎓</h1>\n                <h3>6th form colleges</h3>\n              </div>\n              <div className='variable'>\n                <h1>🌳</h1>\n                <h3>Green space</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Restaurants')}>\n                <h1>🍽</h1>\n                <h3>Restaurants</h3>\n              </div>\n              <div className='variable'>\n                <h1>🚇</h1>\n                <h3>Tube stations</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('EVs')}>\n                <h1>⛽️</h1>\n                <h3>Electric vehicles</h3>\n              </div>\n              <div className='variable'onClick={() => setProfileDetail('Pubs')}>\n                <h1>🍻</h1>\n                <h3>Pubs</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Fitness')}>\n                <h1>🏋️‍♂️</h1>\n                <h3>Fitness</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Supermarkets')}>\n                <h1>🛒</h1>\n                <h3>Supermarkets</h3>\n              </div>\n            </div>\n\n          </section>\n          : profileDetail === 'Primary schools' ?\n            <section  className='variables-single-section'>\n              <PrimaryDetails\n                primaryData1={primaryData}\n                setPrimaryData1={setPrimaryData}\n                listType={'long list'}\n                setProfileDetail={setProfileDetail}\n              />\n\n            </section>\n\n            : profileDetail === 'Secondary schools' ?\n              <section  className='variables-single-section'>\n                <SecondaryDetails\n                  secondaryData1={secondaryData}\n                  setSecondaryData1={setSecondaryData}\n                  listType={'long list'}\n                />\n\n              </section>\n\n              : profileDetail === 'Restaurants' ?\n                <section  className='variables-single-section'>\n                  <RestaurantDetails\n                    restaurants1={restaurants}\n                    setRestaurants1={setRestaurants}\n                    listType={'long list'}\n                  />\n\n                </section>\n\n                : profileDetail === 'Fitness' ?\n                  <section  className='variables-single-section'>\n                    <FitnessDetails\n                      gyms1={gyms}\n                      setGyms1={setGyms}\n                      listType={'long list'}\n                    />\n\n                  </section>\n\n                  : profileDetail === 'Supermarkets' ?\n                    <section className='variables-single-section'>\n                      <SupermarketDetails\n                        supermarkets1={supermarkets}\n                        setSupermarkets1={setSupermarkets}\n                        listType={'long list'}\n                      />\n\n                    </section>\n\n                    : profileDetail === 'EVs' ?\n                      <section className='variables-single-section'>\n                        <EVDetails\n                          ev1={ev}\n                          setEv1={setEv}\n                          listType={'long list'}\n                        />\n\n                      </section>\n\n                      : profileDetail === 'Pubs' ?\n                        <section className='variables-single-section'>\n                          <PubDetails\n                            pubs1={pubs}\n                            setPubs1={setPubs}\n                            listType={'long list'}\n                          />\n\n                        </section>\n\n\n\n                        : ''}\n    \n\n      </section>\n    </>\n  )\n}\n\nexport default VariablesPage","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n"],"names":["SinglePropertySummary","postcode","useParams","navigate","useNavigate","location","useLocation","historyStack","setHistoryStack","useState","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","postcodeData","setPostcodes","userData","setUserData","propertyData","setPropertyData","company","setCompany","errors","setErrors","propertyContent","setPropertyContent","summarySection","setSummarySection","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","primaryData","setPrimaryData","primaryData1","setPrimaryData1","secondaryData","setSecondaryData","secondaryData1","setSecondaryData1","topPrimaries","setTopPrimaries","topSecondaries","setTopSecondaries","restaurants","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","ev","setEv","restaurants1","setRestaurants1","gyms1","setGyms1","pubs1","setPubs1","supermarkets1","setSupermarkets1","ev1","setEv1","cuisines","setCuisines","topRestaurants","setTopRestaurants","topPubs","setTopPubs","mainGyms","setMainGyms","mainSupermarkets","setMainSupermarkets","tubes","setTubes","trains","setTrains","tubes1","setTubes1","trains1","setTrains1","uniqueTubeLines","setUniqueTubeLines","uniqueTubeStations","setUniqueTubeStations","neighbourhoodScore","setNeighbourhoodScore","sliderSelection","setSliderSelection","propertyList","setPropertyList","useEffect","loadPostcodeData","input","JSON","parse","localStorage","getItem","async","data","axios","post","console","log","getPostcode","error","loadUserData","isUserAuth","get","getUserToken","headers","Authorization","getAccessToken","getUser","loadProperties","matchedProperty","find","item","getProperties","loadPrimaryData","getPrimaries","walkDistanceKm20","R","toRad","value","Math","PI","kmPerMinute","getNearbyPrimaries","nearbyPrimaries","filter","dLat","parseFloat","latitude","longitude","dLon","a","sin","cos","c","atan2","sqrt","distanceKm","distance_between","walkTimeMin","round","distancePercent","max_distance","school_type","within_catchment","additional_status","sort","b","firstSchoolNames","slice","loadSecondaryData","getSecondaries","getNearbySecondaries","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","includes","loadRestaurantData","getData","walkDistanceKm15","getNearbyRestaurants","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","map","restaurant_name","Set","size","countUniqueCuisines","loadFitnessData","getNearbyStudios","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","length","gym","gym_group","toLowerCase","has","push","add","loadSupermarketData","getNearbySupermatkets","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","loadTubesData","getNearbyTubes","nearbyTubes","lat","lineCounts","reduce","acc","tube","line","distinctLineCount","Object","keys","loadEVdata","getNearbyChargers","nearbyChargers","loadPubsData","getNearbyPubs","nearbyPubs","topThreePubs","pub","name","calculateScore","calculation","ceil","crime","percentile","fitness","parks_lsoa","london_percentile","normal_percentile","loadTrainsData","getNearbyTrains","nearbyTrains","prevStack","pathname","_jsx","_Fragment","children","_jsxs","className","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","onClick","style","textDecoration","textUnderlineOffset","fontWeight","window","print","src","image","alt","NumericFormat","price","displayType","thousandSeparator","prefix","address","type","bedrooms","bathrooms","living_rooms","PropertySummary","SchoolHighlights","LifestyleHighlights","TransportHighlights","NeighbourhoodHighlights","PropertyDetailSlider","PrimaryDetails","listType","SecondaryDetails","RestaurantDetails","FitnessDetails","SupermarketDetails","EVDetails","PubDetails","TubeDetails","VariablesPage","WhiteComparison","sortedData","pupils_at_standard","total_pass_rate","loadPubs","Symbol","for","d","e","f","g","h","k","l","m","n","p","q","r","t","v","w","x","y","z","u","$$typeof","A","exports","AsyncMode","ConcurrentMode","ContextConsumer","ContextProvider","Element","ForwardRef","Fragment","Lazy","Memo","Portal","Profiler","StrictMode","Suspense","isAsyncMode","isConcurrentMode","isContextConsumer","isContextProvider","isElement","isForwardRef","isFragment","isLazy","isMemo","isPortal","isProfiler","isStrictMode","isSuspense","isValidElementType","typeOf","module"],"sourceRoot":""}