{"version":3,"file":"static/js/254.da07d7e2.chunk.js","mappings":"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","sources":["components/helpers/Loading.js","components/tools/Footer.js","components/tools/NavBarRevised.js","components/tools/WhiteNavbar.js","components/whiteLabel/WhiteSidebar.js","components/whiteLabel/propertyDetails/componentDetails/EVDetails.js","components/whiteLabel/propertyDetails/componentDetails/FitnessDetails.js","components/whiteLabel/propertyDetails/componentDetails/PrimaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/PubDetails.js","components/whiteLabel/propertyDetails/componentDetails/RestaurantDetails.js","components/whiteLabel/propertyDetails/componentDetails/SecondaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/SupermarketDetails.js"],"sourcesContent":["import React from 'react'\n\nconst Loading = () => (\n  <div className=\"loading-gif\">\n    <img src={require('../../styles/loading-gif-2.gif')} alt=\"loading gif\"/>\n  </div>\n)\n\nexport default Loading","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { useDetectOutsideClick } from './ClickDropdown'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\n\nconst NavBarRevised = ({ setProfileContent, profileContent, profileDetail, setProfileDetail }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  // ? Section 3: controlling the state and functions for the nav bar changing color and section\n  // state for colour of navbar\n  const [navColour, setNavColour] = useState('#051885')\n  const [titleColour, setTitleColour] = useState('#FFA7E5')\n  const [textColour, setTextColour] = useState('#FFA7E5')\n\n  // function for selecting home page\n  const homeSelect = () => {\n    setProfileContent('My properties')\n    setProfileDetail('My properties')\n    navigate('/agents/profile')\n  }\n\n  // function for selecting wittle search\n  const searchSelect = () => {\n    setProfileContent('Variables')\n    setProfileDetail('Variables')\n    navigate('/agents/explore')\n\n  }\n\n  // function for selecting wittle lifestyle\n  const lifestyleSelect = () => {\n    setProfileContent('Comparison')\n    setProfileDetail('Comparison')\n    navigate('/agents/compare')\n  }\n\n  // function for selecting wittle lifestyle\n  // const adminSelect = () => {\n  //   setProfileContent('My household')\n  //   setProfileDetail('Admin dashboard')\n  // }\n\n  // function for selecting wittle lifestyle\n  const accountSelect = () => {\n    setProfileContent('Account')\n    setProfileDetail('Account')\n\n  }\n\n  return (\n    <>\n      <section className='centered-nav-bar' style={{ backgroundColor: navColour }}>\n        <section className='top-section'>\n\n          <div className='logo'>\n            <h2 style={{ color: titleColour }} onClick={() => navigate('/')}>Wittle</h2>\n            {/* {profileContent === 'Home' ? <h3 style={{ color: titleColour }}>Home</h3> :\n              profileContent === 'Variables' ? <h3 style={{ color: titleColour }}>Variables</h3> :\n                profileContent === 'Lifestyle' ? <h3 style={{ color: titleColour }}>Lifestyle</h3> :\n                  profileContent === 'Admin' ? <h3 style={{ color: titleColour }}>Admin</h3> :\n                    profileContent === 'Account' ? <h3 style={{ color: titleColour }}>Account</h3> : ''} */}\n          </div>\n        </section>\n        <section className='nav-slider'>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'My properties' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'My properties' ? '5px' : '' }} onClick={homeSelect}>MY PROPERTIES</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Variables' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Variables' ? '5px' : '' }} onClick={searchSelect}>EXPLORE</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Comparison' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Comparison' ? '5px' : '' }} onClick={lifestyleSelect}>COMPARISON</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Account' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Account' ? '5px' : '' }} onClick={accountSelect}>ACCOUNT</h4>\n        </section>\n      </section>\n      {/* <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      /> */}\n    </>\n  )\n}\n\nexport default NavBarRevised\n\n\n\n     \n// {isUserAuth() ?\n//   <div className=\"menu-container\" onClick={handleMenuShow} >\n//     <div className=\"menu-trigger\" >\n//       <span>\n//         <div className='burger-icon'>\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//         </div>\n//       </span>\n//     </div>\n//     <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//       <ul>\n//         <li className='dropdowns'><a href=\"/property-search\">New property search</a></li>\n//         <li className='dropdowns'><a href=\"/wittle-search\">New Wittle search</a></li>\n//         <li className='dropdowns'><a onClick={() => navigate(`/profile/${getUserToken()}`)}>My properties</a></li>\n//         <li className='dropdowns' onClick={removeItemFromStorage}><a>Sign out</a></li>\n//       </ul>\n//     </nav>\n//   </div>\n//   :\n//   <>\n//     <div className='menu-container' onClick={handleMenuShow} >\n//       <div className=\"menu-trigger\" >\n//         <span>\n//           <div className='burger-icon'>\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//           </div>\n//         </span>\n//       </div>\n//       <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//         <form className='form-detail' onSubmit={handleSubmit}>\n//           <p>Log in to your account</p>\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={handleChange} />\n//           <div className='login-input'>\n//             <input type={loginPasswordType} name='password' className='password-input' placeholder='Password' value={registerData.password} onChange={handleChange} />\n//             <div className='password-icon-container' onClick={passwordReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           <button onClick={openDropdown} className='sign-up' type='submit'>\n//             <span>\n//               <div className='burger-icon'>\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//               </div>\n//             </span>\n//           </button>\n//           {/* <GoogleLogin onSuccess={googleLogin} onError={errorMessage} /> */}\n\n//           <h5>New to Wittle?\n//             <span onClick={handleRegisterShow}> Join us</span>\n//           </h5>\n//         </form>\n//       </nav>\n//     </div>\n//     {/* <div className='register-modal-container'> */}\n//     <Modal show={registerShow} onHide={handleRegisterClose} backdrop='static' className='register-modal'>\n//       <Modal.Body>\n//         <form className='form-detail' onSubmit={registerSubmit} >\n//           <div className='register-title'>\n//             <h1>Unlock the benefits of Wittle</h1>\n//             <h1 className='x-close' onClick={handleRegisterClose}>x</h1>\n//           </div>\n//           <p className='form-overview'>Set up an account to help you find the perfect home</p>\n//           <hr />\n//           {/* First name */}\n//           <input type='text' name='first_name' className='input' placeholder='First name' value={registerData.first_name} onChange={registerChange} />\n//           {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n//           {/* Last namee */}\n//           <input type='text' name='last_name' className='input' placeholder='Last name' value={registerData.last_name} onChange={registerChange} />\n//           {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n//           {/* Email */}\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={registerChange} />\n//           {registerError.email && <p className=\"error\">* {registerError.email}</p>}\n//           {/* Username */}\n//           <input type='text' name='username' className='input' placeholder='Username' value={registerData.username} onChange={registerChange} />\n//           {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n//           {/* Password */}\n//           <div className='login-input'>\n//             <input type={registerPasswordType} name='password' className='password-input-register' placeholder='Password' value={registerData.password} onChange={registerChange} />\n//             <div className='password-icon-container' onClick={passwordRegisterReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n//           {/* Password confirmation */}\n//           <input type='password' name='password_confirmation' className='input' placeholder='Password confirmation' value={registerData.password_confirmation} onChange={registerChange} />\n//           {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n\n//           <button type='submit'>Register</button>\n//           {registerError.post && <p className=\"error\">* {registerError.post}</p>}\n\n//         </form>\n//         <div className='register-bottom'>\n//           <button className='register-close' onClick={handleRegisterClose}>Close</button>\n//         </div>\n//       </Modal.Body>\n//     </Modal>\n//     {/* </div> */}\n\n//   </>\n// }\n\n","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst WhiteNavbar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='nav-section no-print' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n        </div>\n    \n        {isUserAuth() ?\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={removeItemFromStorage}><a>Sign out</a></h3>\n          </div>\n\n          :\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={() => navigate('/login')}><a>Sign in</a></h3>\n          </div>\n\n        }\n      </section>\n\n    </>\n  )\n\n}\n\nexport default WhiteNavbar","import { useParams, useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport { getAccessToken, getUserToken, isUserAuth } from '../auth/Auth'\nimport axios from 'axios'\n\n\nconst WhiteSidebar = ({ setProfileDetail, variableSide, setProfileContent, setVariableSide }) => {\n\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // userdata state\n  const [userData, setUserData] = useState()\n\n  // errors\n  const [errors, setErrors] = useState()\n\n\n  const [activeItem, setActiveItem] = useState('')\n\n  // state for changing the view to insights results\n  const [insightView, setInsightView] = useState('Search')\n\n  \n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n  \n  useEffect(() => {\n    setTimeout(() => {\n      if (activeItem === 'Home') {\n        navigate('/agents/profile')\n      } else if (activeItem === 'Saved items') {\n        navigate('/agents/favourites')\n      }\n      // ... other conditions\n    }, 100)\n  },[activeItem])\n\n\n\n\n  return (\n    <>\n      <section className='profile-sidebar-open no-print remove-margin'>\n        <div className='logo-section'>\n          <div className='logo' onClick={() => navigate('/')}>\n            {/* <h2 onClick={() => navigate('/')}>Wittle</h2> */}\n          </div>\n        </div>\n\n\n        <div className='profile-buttons'>\n          <div className={`profile-button-title ${activeItem === 'Home' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Home')\n              setTimeout(() => {\n                setProfileDetail('Home')\n                setProfileContent('Home')\n              }, 0)\n            }}>\n            <div className='icon' id='home-icon' ></div>\n            <h2>Wittle home</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'Listing generator' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Listing generator')\n              setProfileDetail('Listing generator')\n              setProfileContent('Listing generator')\n              navigate('/agents/listing-generator')\n            }}>\n            <div className='icon' id='listing-icon'></div>\n            <h2>Listing generator</h2>\n          </div>\n          {/* <div className={`profile-button-title ${activeItem === 'AI listing generator' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('AI listing generator')\n              setProfileDetail('AI listing generator')\n              setProfileContent('AI listing generator')\n              navigate('/agents/ai-listing-generator')\n            }}>\n            <div className='icon' id='ai-icon'></div>\n            <h2>AI Listing generator</h2>\n          </div> */}\n          <div className={`profile-button-title ${activeItem === 'Lead generator' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Lead generator')\n              setProfileContent('Lead generator')\n              setProfileDetail('Lead generator')\n              navigate('/agents/finder')\n            }}>\n            <div className='icon' id='finder-icon'></div>\n            <h2>Lead generator</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'Saved items' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Saved items')\n              setTimeout(() => {\n                setProfileDetail('Saved items')\n                setProfileContent('Saved items')\n                // navigate('/agents/favourites')\n              }, 0)\n            }}>\n            <div className='icon' id='saved-icon'></div>\n            <h2 >My saved items</h2>\n          </div>\n          <div className={`profile-button-title ${activeItem === 'Account' ? 'active' : ''}`}\n            onClick={() => {\n              setActiveItem('Account')\n              setProfileContent('Account')\n              setProfileDetail('Account')\n              navigate('/agents/account')\n            }}>\n            <div className='icon' id='account-icon'></div>\n            <h2>Account details</h2>\n          </div>\n          \n\n        </div>\n\n\n\n\n        {/* <div className='profile-buttons'>\n          <div className='profile-button-title' >\n            <h2 onClick={() => {\n              setProfileDetail('Home')\n              setProfileContent('Home')\n              navigate('/agents/profile')\n            }}>🧘‍♂️ Wittle home</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileDetail('Saved items')\n              setProfileContent('Saved items')\n              navigate('/agents/favourites')\n            }}>🏡 Saved items</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileDetail('Listing generator')\n              setProfileContent('Listing generator')\n              navigate('/agents/listing-generator')\n            }}>🧠 Listing generator</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileDetail('AI listing generator')\n              setProfileContent('AI listing generator')\n              navigate('/agents/ai-listing-generator')\n            }}>🧠 AI Listing generator</h2>\n          </div>\n\n\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Lead generator')\n              setProfileDetail('Lead generator')\n              navigate('/agents/finder')\n            }}>🔎 Lead generator</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Account')\n              setProfileDetail('Account')\n              navigate('/agents/account')\n\n            }}>🖥 Account details</h2>\n          </div>\n        </div> */}\n      </section>\n    </>\n  )\n}\n\nexport default WhiteSidebar","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst EVDetails = ({ ev1, listType, setEv1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // state for storing new supermarket data \n  const [ev2, setEv2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedEvs, setSelectedEvs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleEvClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedEvs(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...ev1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setEv1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as ev2\n      setEv2([...ev1])\n    } else {\n      setEv2(\n        ev1.filter(item => {\n          return (\n            item.location.toLowerCase().includes(term.toLowerCase()) ||\n            // item.power.toLowerCase().includes(term.toLowerCase()) ||\n            item.fast_charging.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (ev1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, ev1])\n\n  \n\n  return (\n    <>\n      {ev1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('location')}>\n                  <h5>Charger location</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('power')}>\n                  <h5>Power</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Fast Charging</h5>\n              </div>\n              <div className='school-table-details'>\n                {ev2 ? ev2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.location}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.power} kW</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.fast_charging}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {ev2 ? ev2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.location}</h5>\n                              <h5>⛽️ Power: {item.power} kW</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {ev2 &&\n                    ev2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleEvClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedEvs ? \n                        <Popup\n                          longitude={selectedEvs.longitude}\n                          latitude={selectedEvs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedEvs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedEvs.location}</h5>\n                              <p>⛽️ Power:{selectedEvs.power} kW</p>\n                              <p>⛽️ Fast charging: {selectedEvs.fast_charging}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {ev2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(ev2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default EVDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst FitnessDetails = ({ gyms1, listType, setGyms1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // state for storing new supermarket data \n  const [gyms2, setGyms2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedGyms, setSelectedGyms] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleGymClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedGyms(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...gyms1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setGyms1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as gyms2\n      setGyms2([...gyms1])\n    } else {\n      setGyms2(\n        gyms1.filter(item => {\n          return (\n            item.gym_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.gym_group.toLowerCase().includes(term.toLowerCase()) ||\n            item.class_type.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (gyms1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, gyms1])\n\n  \n\n  return (\n    <>\n      {gyms1 ?\n        <section className=\"primary-details-section\">\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('gym_name')}>\n                  <h5>Studio name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('gym_group')}>\n                  <h5>Studio group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Class types</h5>\n              </div>\n              <div className='school-table-details'>\n                {gyms2 ? gyms2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.gym_name}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.gym_group}</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.class_type}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {gyms2 ? gyms2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.gym_name}</h5>\n                              <h5>{item.gym_group}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {gyms2 &&\n                    gyms2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.long}\n                        latitude={item.Lat}\n                        onClick={() => handleGymClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedGyms ? \n                        <Popup\n                          longitude={selectedGyms.long}\n                          latitude={selectedGyms.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedGyms(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedGyms.gym_name}</h5>\n                              <p>{selectedGyms.gym_group}</p>\n                              <p>{selectedGyms.class_type}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {gyms2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(gyms2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default FitnessDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PrimaryDetails = ({ primaryData1, listType, setPrimaryData1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  // const [tableMapView, setPrimaryView] = useState('Table')\n\n  // state for storing new primary data \n  const [primaryData2, setPrimaryData2] = useState([])\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n    console.log(school.longitude)\n    console.log(school.latitude)\n    console.log(school.max_distance)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...primaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPrimaryData1(sortedData)\n  }\n  \n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as primaryData1\n      setPrimaryData2([...primaryData1])\n    } else {\n      setPrimaryData2(\n        primaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (primaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, primaryData1])\n\n\n  return (\n    <>\n      {primaryData1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('pupils_at_standard')}>\n                  <h5>At standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('pupils_exceeding_standard')}>\n                  <h5>Exceeding standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {primaryData2 ? primaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_at_standard * 100)}%</h5>}\n                        </div>\n                        <div className='column' id='column7'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_exceeding_standard * 100)}%</h5>}\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              {item.max_distance !== null ? <h5>{item.max_distance}</h5> : <h5>Not specified</h5>}\n                            </div>\n                            : ''\n                        }\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {primaryData2 ? primaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              {listType === 'short list' ?\n                                <>\n                                  <h5>🌍 {item.within_catchment}</h5>\n                                  <h5>⏰ {item.walkTimeMin} mins</h5>\n                                </>\n                                : listType === 'long list' ?\n                                  <h5>🌍 {item.max_distance}</h5>\n                                  : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {primaryData2 &&\n                    primaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', 'On request', 'N/a' , null].includes(selectedSchool.max_distance) ? \n                        <>\n                          { \n                            typeof parseFloat(selectedSchool.longitude) === 'number' && \n                            typeof parseFloat(selectedSchool.latitude) === 'number' &&\n                            typeof parseFloat(selectedSchool.max_distance) === 'number' \n                              ?\n                              <>\n                                <Source\n                                  id=\"catchment-area\"\n                                  type=\"geojson\"\n                                  data={turf.circle([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"catchment-area-ring\"\n                                    type=\"fill\"\n                                    paint={{\n                                      'fill-color': '#FFA7E5',\n                                      'fill-opacity': 0.3,\n                                    }} />\n                                  <Layer\n                                    id=\"catchment-area-outline\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#FFA7E5',\n                                      'line-width': 2,\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-line\"\n                                  type=\"geojson\"\n                                  data={turf.lineString([[parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)],\n                                    turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), 90, { units: 'kilometers' }).geometry.coordinates])}\n                                >\n                                  <Layer\n                                    id=\"radius\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#051885',\n                                      'line-width': 2,\n                                      'line-dasharray': [2, 1],\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-label\"\n                                  type=\"geojson\"\n                                  data={turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance) / 2, 90, { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"radius-label\"\n                                    type=\"symbol\"\n                                    layout={{\n                                      'text-field': `${selectedSchool.max_distance} km`,\n                                      'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                      'text-size': 12,\n                                      'text-offset': [0, -1],\n                                    }} \n                                    paint={{\n                                      'text-color': '#051885',\n                              \n                                    }}\n                                  />\n                                </Source>\n                              </>\n                              : \n                              <p>Invalid coordinates or distance.</p> \n                          }\n                        </>\n\n\n                        : selectedSchool ?\n                          <Popup\n                            longitude={parseFloat(selectedSchool.longitude)}\n                            latitude={parseFloat(selectedSchool.latitude)}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {primaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(primaryData2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n\n    </>\n  )\n}\n\nexport default PrimaryDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PubDetails = ({ pubs1, listType, setPubs1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new supermarket data \n  const [pub2, setPub2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedPubs, setSelectedPubs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handlePubClick = (pub) => {\n    console.log('selected pub ->', pub)\n    setSelectedPubs(pub)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...pubs1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPubs1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as pub2\n      setPub2([...pubs1])\n    } else {\n      setPub2(\n        pubs1.filter(item => {\n          return (\n            item.name.toLowerCase().includes(term.toLowerCase()) ||\n            item.operator.toLowerCase().includes(term.toLowerCase()) ||\n            item.walkTimeMin.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (pubs1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, pubs1])\n\n  \n\n  return (\n    <>\n      {pubs1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('name')}>\n                  <h5>Pub name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                {/* <div id='column3' className='pub-group sort-section' onClick={() => handleSort('operator')}>\n                  <h5>Pub group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>            */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {pub2 ? pub2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.name}</h5>\n                        </div>\n                        {/* <div className='column pub-group' id='column3'>\n                          <h5>{item.operator}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {pub2 ? pub2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.name}</h5>\n                              <h5>🍺 Pub group: {item.operator}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {pub2 &&\n                    pub2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handlePubClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedPubs ? \n                        <Popup\n                          longitude={selectedPubs.longitude}\n                          latitude={selectedPubs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedPubs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedPubs.name}</h5>\n                              <p>🍺 {selectedPubs.operator} pub group</p>\n                              <p>🍺 Distance: {selectedPubs.walkTimeMin} mins</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {pub2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(pub2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default PubDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst RestaurantDetails = ({ restaurants1, listType, setRestaurants1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedRestaurants, setSelectdRestaurant] = useState(null)\n\n\n  // state for storing new supermarket data \n  const [restaurants2, setRestaurants2] = useState([])\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSchoolClick = (restaurant) => {\n    console.log('selectd restaurant ->', restaurant)\n    setSelectdRestaurant(restaurant)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...restaurants1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setRestaurants1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as restaurants2\n      setRestaurants2([...restaurants1])\n    } else {\n      setRestaurants2(\n        restaurants1.filter(item => {\n          return (\n            item.restaurant_name.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (restaurants1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, restaurants1])\n\n  \n\n  return (\n    <>\n      {restaurants1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('restaurant_name')}>\n                  <h5>Restaurant name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                <div id='column3' className='sort-section' onClick={() => handleSort('rating')}>\n                  <h5>Rating</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>             \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5'>Website</h5>\n              </div>\n              <div className='school-table-details'>\n                {restaurants2 ? restaurants2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.restaurant_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.rating > 4.8 ? 'Excellent' : item.rating > 4.5 ? 'Very good' : item.rating > 4.2 ? 'Good' :  item.rating > 3.9 ? 'Average' : item.rating > 0 ? 'Poor' : 'N/a'}</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins </h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column' id='column5'>\n                          <a target=\"_blank\" rel='noreferrer' href={item.url}>Visit website</a>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {restaurants2 ? restaurants2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.restaurant_name}</h5>\n                              {/* <h5>📈 Rating: {item.rating} /5</h5> */}\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {restaurants2 &&\n                    restaurants2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedRestaurants ? \n                        <Popup\n                          longitude={selectedRestaurants.longitude}\n                          latitude={selectedRestaurants.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectdRestaurant(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedRestaurants.restaurant_name}</h5>\n                              <p>{selectedRestaurants.master_cuisine}</p>\n                              {/* <p>{selectedRestaurants.rating} /5</p> */}\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {restaurants2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(restaurants2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default RestaurantDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\nconst SecondaryDetails = ({ propertyData, secondaryData1, listType, setSecondaryData1, postcodeData, tableMapView }) => {\n\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new primary data \n  const [secondaryData2, setSecondaryData2] = useState([])\n\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // trigger icon pop up\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n\n  // ? Section3: Ability to sort data by different column names\n  // function to sort data by column name\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...secondaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSecondaryData1(sortedData)\n  }\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as secondaryData1\n      setSecondaryData2([...secondaryData1])\n    } else {\n      setSecondaryData2(\n        secondaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (secondaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, secondaryData1])\n\n  \n\n  return (\n\n    <>\n      {secondaryData1 ?\n        <section className=\"primary-details-section\">\n          {tableMapView === 'Table' ? \n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('total_pass_rate')}>\n                  <h5>GCSE pass rate</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('total_top_rate')}>\n                  <h5>GCSE A/A*</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {secondaryData2 ? secondaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          <h5>{(item.total_pass_rate === null ? 'N/a' : item.total_pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column7'>\n                          <h5>{(item.total_top_rate === null ? 'N/a' : item.total_top_rate)}</h5>\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.school_type === 'Independent school' ? 'N/a' : item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n            </div>\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {secondaryData2 ? secondaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title' onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              <h5>🌍 {item.within_catchment}</h5>\n                              <h5>⏰ {item.walkTimeMin} mins</h5>\n                            </div>\n\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {secondaryData2 &&\n                    secondaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ? \n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }} \n                              paint={{\n                                'text-color': '#051885',\n                              \n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n              </div>\n\n              : '' }\n          {secondaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(secondaryData2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SecondaryDetails","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst SupermarketDetails = ({ propertyData, supermarkets1, listType, setSupermarkets1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new supermarket data \n  const [supermarkets2, setSupermarkets2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedSupermarkets, setSelectedSupermarkts] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSupermarketClick = (supermarket) => {\n    console.log('selectd supermarket ->', supermarket)\n    setSelectedSupermarkts(supermarket)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...supermarkets1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSupermarkets1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as supermarkets1\n      setSupermarkets2([...supermarkets1])\n    } else {\n      setSupermarkets2(\n        supermarkets1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.segment.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase()) \n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (supermarkets1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, supermarkets1])\n\n  \n\n  return (\n    <>\n      {supermarkets1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('supermarket_store_name')}>\n                  <h5>Supermarket name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>             \n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('segment')}>\n                  <h5>Segment</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>  \n                <div id='column4' className='sort-section' onClick={() => handleSort('store_size')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                \n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {supermarkets2 ? supermarkets2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.supermarket_store_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.segment}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.store_size}</h5>\n                        </div>\n                      \n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n  \n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {supermarkets2 ? supermarkets2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.supermarket_store_name}</h5>\n                              <h5>{item.store_size}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {supermarkets2 &&\n                    supermarkets2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSupermarketClick(item)}\n\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n                      {selectedSupermarkets ? \n                        <Popup\n                          longitude={selectedSupermarkets.longitude}\n                          latitude={selectedSupermarkets.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedSupermarkts(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedSupermarkets.supermarket_store_name}</h5>\n                              <p>{selectedSupermarkets.store_size}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {supermarkets2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(supermarkets2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SupermarketDetails\n\n\n\n"],"names":["Loading","_jsx","className","children","src","require","alt","_ref","textColour","pageType","_Fragment","_jsxs","id","style","color","setProfileContent","profileContent","profileDetail","setProfileDetail","navigate","useNavigate","isActive","setIsActive","useRef","useState","errors","setErrors","email","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","navColour","setNavColour","titleColour","setTitleColour","setTextColour","backgroundColor","onClick","textDecoration","textUnderlineOffset","homeSelect","searchSelect","lifestyleSelect","accountSelect","navbarColour","isUserAuth","token","localStorage","removeItem","window","location","reload","variableSide","setVariableSide","userData","setUserData","activeItem","setActiveItem","insightView","setInsightView","useEffect","setTimeout","ev1","listType","setEv1","postcodeData","tableMapView","ev2","setEv2","sortField","setSortField","sortDirection","setSortDirection","selectedEvs","setSelectedEvs","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","console","log","parseInt","target","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","item","toLowerCase","includes","fast_charging","map","index","power","walkTimeMin","slice","onMouseEnter","ReactMapGL","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","Marker","handleEvClick","gym","Popup","closeOnClick","onClose","ReactPaginate","pageCount","Math","ceil","length","onPageChange","data","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","gyms1","setGyms1","gyms2","setGyms2","selectedGyms","setSelectedGyms","gym_name","gym_group","class_type","long","Lat","handleGymClick","primaryData1","setPrimaryData1","primaryData2","setPrimaryData2","selectedSchool","setSelectedSchool","school_name","local_authority","school_type","ofsted_results","toString","total_pass_rate","total_top_rate","within_catchment","max_distance","round","pupils_at_standard","pupils_exceeding_standard","handleSchoolClick","school","parseFloat","Source","type","turf","units","Layer","paint","geometry","coordinates","layout","pubs1","setPubs1","pub2","setPub2","selectedPubs","setSelectedPubs","name","operator","handlePubClick","pub","restaurants1","setRestaurants1","selectedRestaurants","setSelectdRestaurant","restaurants2","setRestaurants2","restaurant_name","rating","rel","href","url","restaurant","master_cuisine","propertyData","secondaryData1","setSecondaryData1","secondaryData2","setSecondaryData2","supermarkets1","setSupermarkets1","supermarkets2","setSupermarkets2","selectedSupermarkets","setSelectedSupermarkts","cleansed_name","segment","size","supermarket_store_name","store_size","handleSupermarketClick","supermarket"],"sourceRoot":""}