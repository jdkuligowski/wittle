{"version":3,"file":"static/js/964.f6855990.chunk.js","mappings":"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","sources":["components/whiteLabel/comparisonSection/WhiteComparison.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport { NumericFormat } from 'react-number-format'\nimport NavBar from '../../tools/NavBar'\nimport ProfileMobileSlider from '../../tools/ProfileMobileSlider'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\n\n\n\n\nconst WhiteComparison = () => {\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // setting states for property comparison\n  const [property1, setProperty1] = useState()\n  const [property2, setProperty2] = useState()\n\n  // state for user data\n  const [userData, setUserData] = useState()\n  const [propertyList, setPropertyList] = useState()\n\n\n  // define the states to capture the scores of the compared propeerties\n  const [property1Numbers, setProperty1Numbers] = useState([])\n  const [property2Numbers, setProperty2Numbers] = useState([])\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Comparison')\n  const [profileDetail, setProfileDetail] = useState('Comparison')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n\n  // state to capture the values of the two proeprties that are being compared\n  const [propertyColours, setPropertyColours] = useState({\n    property1_total: '',\n    property2_total: '',\n    property1_restaurant: '',\n    property2_reestaurant: '',\n    property1_pub: '',\n    property2_pub: '',\n    property1_cafe: '',\n    property2_cafe: '',\n    property1_takeaway: '',\n    property2_takeaway: '',\n    property1_tube: '',\n    property2_tube: '',\n    property1_train: '',\n    property2_train: '',\n    property1_supermarket: '',\n    property2_supermarket: '',\n    property1_gym: '',\n    property2_gym: '',\n    property1_park: '',\n    property2_park: '',\n    property1_primary: '',\n    property2_primary: '',\n    property1_secondary: '',\n    property2_secondary: '',\n  })\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setPropertyList(data.white_properties)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n    console.log('carrying out userData load')\n  }, [])\n\n  // update values for first property comparison\n  const updateComparison1 = (e) => {\n    setProperty1(e.target.value)\n    console.log('property 1 value ->', e.target.value)\n  }\n\n  // function for loading the first property data\n  const loadProperty1 =  () => {\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${property1}`)\n        console.log('property 1 ->', data[0])\n        setProperty1Numbers(data[0])\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // load function\n  useEffect(() => {\n    if (property1) {\n      loadProperty1()\n    }\n  }, [property1])\n\n\n  // update values for second property comparison\n  const updateComparison2 = (e) => {\n    setProperty2(e.target.value)\n    console.log('property 2 value ->', e.target.value)\n  }\n\n  // function for loading the first property data\n  const loadProperty2 =  () => {\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${property2}`)\n        console.log('property 2 ->', data[0])\n        setProperty2Numbers(data[0])\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // load function\n  useEffect(() => {\n    if (property2) {\n      loadProperty2()\n    }\n  }, [property2])\n\n  return (\n    <>\n      {userData ?\n        <section className='agent-profile-page'>\n          <div className='desktop-nav'>\n            <WhiteNavbar\n              navbarColour='#FDF7F0'\n            />\n          </div>\n          <div className='mobile-nav'>\n            <NavBarRevised\n              setProfileContent={setProfileContent}\n              profileContent={profileContent}\n              profileDetail={profileDetail}\n              setProfileDetail={setProfileDetail}\n            />\n          </div>\n          <WhiteSidebar \n            setProfileDetail={setProfileDetail}\n            variableSide={variableSide} \n            setProfileContent={setProfileContent} \n            setVariableSide={setVariableSide}\n          />    \n          <div className='comparison-grid'>\n            <div className='comparison-title'>\n              <h1>Property 1</h1>\n              <h1 className='desktop-results'>Results</h1>\n              <h1>Property 2</h1>\n            </div>\n            <div className='comparison-subtitle'>\n              <select className='comparison-dropdown' onChange={updateComparison1}>\n                <option>Select property</option>\n                {propertyList.map((property, index) => <option key={index} value={property.postcode}>{property.name}</option>)}\n              </select>\n              <select className='comparison-dropdown' onChange={updateComparison2}>\n                <option>Select property</option>\n                {propertyList.map((property, index) => <option key={index} value={property.postcode}>{property.name}</option>)}\n              </select>\n            </div>\n            {/* {property1 || property2 ?\n        <> */}\n            {/* create section to be used on mobile */}\n            <div className='comparison-properties-mobile'>\n              {userData ? userData.white_properties.filter(property => property.postcode === property1).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n              {userData ? userData.white_properties.filter(property => property.postcode === property2).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n            </div>\n\n            {/* Main section used on desktop */}\n            {/* Property on the left hand side of the page */}\n            <div className='comparison-body' style={{ justifyContent: !property1 ? 'center' : 'inherit' }}>\n              {userData ? userData.white_properties.filter(property => property.postcode === property1).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n              <div className='comparison-results'>\n\n                {/* Secondary schools */}\n                <div className='result-title'>\n                  <h5>Secondary schools</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile && (\n                      [...Array(100 - Math.round((property1Numbers.secondaries.total_score_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile ? parseInt((property1Numbers.secondaries.total_score_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile && (\n                      [...Array(parseInt((property1Numbers.secondaries.total_score_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile) ?  parseInt(property1Numbers.secondaries.total_score_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile) ? parseInt(property2Numbers.secondaries.total_score_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.secondaries && property1Numbers.secondaries.total_score_percentile &&  (\n                      [...Array(parseInt(property2Numbers.secondaries.total_score_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile) ?  parseInt(property1Numbers.secondaries.total_score_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile) ? parseInt(property2Numbers.secondaries.total_score_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile ? Math.round(property2Numbers.secondaries.total_score_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Green space */}\n                <div className='result-title'>\n                  <h5>Green space</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0] && (\n                      [...Array(100 - property1Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0] ? (property1Numbers.parks_lsoa[0].london_percentile) : ''}%</h5>\n                    {property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] && (\n                      [...Array(property1Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0]) ?  parseInt(property1Numbers.parks_lsoa[0].london_percentile) : 0) \n                            < ((property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0]) ? parseInt(property2Numbers.parks_lsoa[0].london_percentile) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] && (\n                      [...Array(property2Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers) ?  parseInt(property1Numbers.parks_lsoa[0].london_percentile) : 0) \n                          > ((property2Numbers) ? parseInt(property2Numbers.parks_lsoa[0].london_percentile) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] ? Math.round(property2Numbers.parks_lsoa[0].london_percentile) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Restaurants */}\n                <div className='result-title'>\n                  <h5>Restaurants</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile && (\n                      [...Array(parseInt(100 - Math.round((property1Numbers.restaurants.normal_percentile * 100))))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile ? parseInt((property1Numbers.restaurants.normal_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile && (\n                      [...Array(parseInt((property1Numbers.restaurants.normal_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile) ?  parseInt(property1Numbers.restaurants.normal_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile) ? parseInt(property2Numbers.restaurants.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.restaurants && property1Numbers.restaurants.normal_percentile &&  (\n                      [...Array(parseInt(property2Numbers.restaurants.normal_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile) ?  parseInt(property1Numbers.restaurants.normal_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile) ? parseInt(property2Numbers.restaurants.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile ? Math.round(property2Numbers.restaurants.normal_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Pubs */}\n                <div className='result-title'>\n                  <h5>Pubs</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile && (\n                      [...Array(parseInt(100 - Math.round((property1Numbers.pubs.normal_percentile * 100))))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile ? parseInt((property1Numbers.pubs.normal_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile && (\n                      [...Array(parseInt((property1Numbers.pubs.normal_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile) ?  parseInt(property1Numbers.pubs.normal_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile) ? parseInt(property2Numbers.pubs.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.pubs && property1Numbers.pubs.normal_percentile &&  (\n                      [...Array(parseInt(property2Numbers.pubs.normal_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile) ?  parseInt(property1Numbers.pubs.normal_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile) ? parseInt(property2Numbers.pubs.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile ? Math.round(property2Numbers.pubs.normal_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* Fitness */}\n                <div className='result-title'>\n                  <h5>Fitness</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.fitness.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile ? parseInt((property1Numbers.fitness.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile && (\n                      [...Array(parseInt((property1Numbers.fitness.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile) ?  parseInt(property1Numbers.fitness.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile) ? parseInt(property2Numbers.fitness.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.fitness && property1Numbers.fitness.percentile &&  (\n                      [...Array(parseInt(property2Numbers.fitness.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile) ?  parseInt(property1Numbers.fitness.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile) ? parseInt(property2Numbers.fitness.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile ? Math.round(property2Numbers.fitness.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* EV */}\n                <div className='result-title'>\n                  <h5>EV</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.ev.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile ? parseInt((property1Numbers.ev.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile && (\n                      [...Array(parseInt((property1Numbers.ev.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile) ?  parseInt(property1Numbers.ev.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile) ? parseInt(property2Numbers.ev.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.ev && property1Numbers.ev.percentile &&  (\n                      [...Array(parseInt(property2Numbers.ev.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile) ?  parseInt(property1Numbers.ev.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile) ? parseInt(property2Numbers.ev.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile ? Math.round(property2Numbers.ev.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* Tubes */}\n                <div className='result-title'>\n                  <h5>Tubes</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.tubes.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile ? parseInt((property1Numbers.tubes.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile && (\n                      [...Array(parseInt((property1Numbers.tubes.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile) ?  parseInt(property1Numbers.tubes.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile) ? parseInt(property2Numbers.tubes.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.tubes && property1Numbers.tubes.percentile &&  (\n                      [...Array(parseInt(property2Numbers.tubes.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile) ?  parseInt(property1Numbers.tubes.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile) ? parseInt(property2Numbers.tubes.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile ? Math.round(property2Numbers.tubes.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Crime */}\n                <div className='result-title'>\n                  <h5>Crime</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.crime && property1Numbers.crime[0] && (\n                      [...Array(parseInt(property1Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.crime && property1Numbers.crime[0] ? 100 - parseInt(property1Numbers.crime[0].percentile * 100) : ''}%</h5>\n                    {property2Numbers && property2Numbers.crime && property2Numbers.crime[0] && (\n                      [...Array(100 - parseInt(property1Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.crime && property1Numbers.crime[0]) ?  100 - parseInt(property1Numbers.crime[0].percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.crime && property2Numbers.crime[0]) ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.crime && property2Numbers.crime[0] && (\n                      [...Array(100 - parseInt(property2Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers) ? 100 - parseInt(property1Numbers.crime[0].percentile * 100) : 0) \n                          > ((property2Numbers) ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.crime && property2Numbers.crime[0] ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n\n                {/* Supermarkets */}\n                <div className='result-title'>\n                  <h5>Supermarkets</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.supermarkets.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile ? parseInt((property1Numbers.supermarkets.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile && (\n                      [...Array(parseInt((property1Numbers.supermarkets.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile) ?  parseInt(property1Numbers.supermarkets.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile) ? parseInt(property2Numbers.supermarkets.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.supermarkets && property1Numbers.supermarkets.percentile &&  (\n                      [...Array(parseInt(property2Numbers.supermarkets.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile) ?  parseInt(property1Numbers.supermarkets.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile) ? parseInt(property2Numbers.supermarkets.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile ? Math.round(property2Numbers.supermarkets.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n                  \n              </div>\n\n\n            \n              {userData ? userData.white_properties.filter(property => property.postcode === property2).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n            </div>\n            {/* </> */}\n\n          </div>\n        </section>\n        :\n\n        ''\n  \n      }\n    </>\n  )\n}\n\nexport default WhiteComparison\n\n"],"names":["WhiteComparison","navigate","useNavigate","property1","setProperty1","useState","property2","setProperty2","userData","setUserData","propertyList","setPropertyList","property1Numbers","setProperty1Numbers","property2Numbers","setProperty2Numbers","errors","setErrors","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","propertyColours","setPropertyColours","property1_total","property2_total","property1_restaurant","property2_reestaurant","property1_pub","property2_pub","property1_cafe","property2_cafe","property1_takeaway","property2_takeaway","property1_tube","property2_tube","property1_train","property2_train","property1_supermarket","property2_supermarket","property1_gym","property2_gym","property1_park","property2_park","property1_primary","property2_primary","property1_secondary","property2_secondary","useEffect","loadUserData","isUserAuth","async","data","axios","get","getUserToken","headers","Authorization","getAccessToken","console","log","white_properties","getUser","error","loadProperty1","getPostcode","loadProperty2","_jsx","_Fragment","children","_jsxs","className","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","onChange","e","target","value","map","property","index","postcode","name","filter","onClick","style","backgroundImage","image","NumericFormat","price","displayType","thousandSeparator","prefix","bedrooms","type","justifyContent","secondaries","total_score_percentile","Array","Math","round","choice","parseInt","backgroundColor","parks_lsoa","london_percentile","restaurants","normal_percentile","pubs","fitness","percentile","ev","tubes","crime","supermarkets"],"sourceRoot":""}