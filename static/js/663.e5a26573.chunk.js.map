{"version":3,"file":"static/js/663.e5a26573.chunk.js","mappings":"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","sources":["components/helpers/Loading.js","components/tools/Footer.js","components/whiteLabel/WhiteSidebar.js","components/whiteLabel/propertyDetails/componentDetails/EVDetails.js","components/whiteLabel/propertyDetails/componentDetails/FitnessDetails.js","components/whiteLabel/propertyDetails/componentDetails/PrimaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/PubDetails.js","components/whiteLabel/propertyDetails/componentDetails/RestaurantDetails.js","components/whiteLabel/propertyDetails/componentDetails/SecondaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/SupermarketDetails.js","components/whiteLabel/variableSummaries/VariablesPage.js"],"sourcesContent":["import React from 'react'\n\nconst Loading = () => (\n  <div className=\"loading-gif\">\n    <img src={require('../../styles/loading-gif-2.gif')} alt=\"loading gif\"/>\n  </div>\n)\n\nexport default Loading","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import { useParams, useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\n\n\nconst WhiteSidebar = ({ setProfileDetail, variableSide, setProfileContent, setVariableSide, userData }) => {\n\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='profile-sidebar-open no-print remove-margin'>\n        <div className='logo'>\n          <h2 onClick={() => navigate('/')}>Wittle</h2>\n        </div>\n        <div className='profile-buttons'>\n          <div className='profile-button-title'>\n            <h2 onClick={() => {\n              setProfileDetail('My properties')\n              setProfileContent('My properties')\n              navigate('/agents/profile')\n            }}>🧘‍♂️ My properties</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Variables')\n              setProfileDetail('Variables')\n              setVariableSide(!variableSide)\n              navigate('/agents/explore')\n            }\n            }>🔎 Explore</h2>\n            {variableSide ? <h4>v</h4> : <h4>^</h4>}\n          </div>\n          {variableSide ?\n            <div className='profile-button-sub'>\n              <h3 onClick={() => setProfileDetail('Primary schools')}>🏫 Primary schools</h3>\n              <h3 onClick={() => setProfileDetail('Secondary schools')}>👨‍🏫 Secondary schools</h3>\n              <h3 onClick={() => setProfileDetail('Restaurants')}>🍽 Restaurants </h3>\n              <h3 onClick={() => setProfileDetail('Pubs')}>🍺 Pubs </h3>\n              <h3 onClick={() => setProfileDetail('Fitness')}>🏋️‍♂️ Fitness </h3>\n              <h3 onClick={() => setProfileDetail('Supermarkets')}>🛒 Supermarkets </h3>\n              <h3 onClick={() => setProfileDetail('EVs')}>⛽️ EVs </h3>\n              {/* <h3 onClick={() => setProfileDetail('6th forms')}>🎓 6th forms</h3> */}\n              {/* <h3 onClick={() => setProfileDetail('Saved searches')}>🔎 Saved searches</h3>\n              <h3 onClick={() => setProfileDetail('Property comparison')}>🧐 Property comparison</h3> */}\n            </div>\n            :\n            ''}\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Comparison')\n              setProfileDetail('Comparison')\n              navigate('/agents/compare')\n            }}>↔️ Comparison</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Account')\n              setProfileDetail('Account')\n            }}>🖥 Account details</h2>\n          </div>\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default WhiteSidebar","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst EVDetails = ({ propertyData, ev1, listType, setEv1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [evView, setEvView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [ev2, setEv2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedEvs, setSelectedEvs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleEvClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedEvs(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...ev1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setEv1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as ev2\n      setEv2([...ev1])\n    } else {\n      setEv2(\n        ev1.filter(item => {\n          return (\n            item.location.toLowerCase().includes(term.toLowerCase()) ||\n            // item.power.toLowerCase().includes(term.toLowerCase()) ||\n            item.fast_charging.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (ev1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, ev1])\n\n  \n\n  return (\n    <>\n      {ev1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">EV charging point details near {propertyData.name} </h1> : <h1>EV charging point long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setEvView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setEvView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {evView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('location')}>\n                  <h5>Charger location</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('power')}>\n                  <h5>Power</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Fast Charging</h5>\n              </div>\n              <div className='school-table-details'>\n                {ev2 ? ev2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.location}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.power} kW</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.fast_charging}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : evView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {ev2 ? ev2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.location}</h5>\n                              <h5>⛽️ Power: {item.power} kW</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {ev2 &&\n                    ev2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleEvClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedEvs ? \n                        <Popup\n                          longitude={selectedEvs.longitude}\n                          latitude={selectedEvs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedEvs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedEvs.location}</h5>\n                              <p>⛽️ Power:{selectedEvs.power} kW</p>\n                              <p>⛽️ Fast charging: {selectedEvs.fast_charging}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {ev2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(ev2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default EVDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst FitnessDetails = ({ propertyData, gyms1, listType, setGyms1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [fitnessView, setFitnessView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [gyms2, setGyms2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedGyms, setSelectedGyms] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleGymClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedGyms(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...gyms1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setGyms1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as gyms2\n      setGyms2([...gyms1])\n    } else {\n      setGyms2(\n        gyms1.filter(item => {\n          return (\n            item.gym_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.gym_group.toLowerCase().includes(term.toLowerCase()) ||\n            item.class_type.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (gyms1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, gyms1])\n\n  \n\n  return (\n    <>\n      {gyms1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Fitness details near {propertyData.name} </h1> : <h1>Fitness long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setFitnessView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setFitnessView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {fitnessView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('gym_name')}>\n                  <h5>Studio name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('gym_group')}>\n                  <h5>Studio group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Class types</h5>\n              </div>\n              <div className='school-table-details'>\n                {gyms2 ? gyms2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.gym_name}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.gym_group}</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.class_type}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : fitnessView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {gyms2 ? gyms2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.gym_name}</h5>\n                              <h5>{item.gym_group}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {gyms2 &&\n                    gyms2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.long}\n                        latitude={item.Lat}\n                        onClick={() => handleGymClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedGyms ? \n                        <Popup\n                          longitude={selectedGyms.long}\n                          latitude={selectedGyms.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedGyms(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedGyms.gym_name}</h5>\n                              <p>{selectedGyms.gym_group}</p>\n                              <p>{selectedGyms.class_type}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {gyms2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(gyms2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default FitnessDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PrimaryDetails = ({ propertyData, primaryData1, listType, setPrimaryData1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [primaryView, setPrimaryView] = useState('Table')\n\n  // state for storing new primary data \n  const [primaryData2, setPrimaryData2] = useState([])\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...primaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPrimaryData1(sortedData)\n  }\n  \n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as primaryData1\n      setPrimaryData2([...primaryData1])\n    } else {\n      setPrimaryData2(\n        primaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (primaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, primaryData1])\n\n\n  return (\n    <>\n      {primaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Primary school details near {propertyData.name} </h1> : <h1>Primary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPrimaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPrimaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {primaryView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('pupils_at_standard')}>\n                  <h5>At standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('pupils_exceeding_standard')}>\n                  <h5>Exceeding standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {primaryData2 ? primaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_at_standard * 100)}%</h5>}\n                        </div>\n                        <div className='column' id='column7'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_exceeding_standard * 100)}%</h5>}\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : primaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {primaryData2 ? primaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              {listType === 'short list' ?\n                                <>\n                                  <h5>🌍 {item.within_catchment}</h5>\n                                  <h5>⏰ {item.walkTimeMin} mins</h5>\n                                </>\n                                : listType === 'long list' ?\n                                  <h5>🌍 {item.max_distance}</h5>\n                                  : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {primaryData2 &&\n                    primaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ? \n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }} \n                              paint={{\n                                'text-color': '#051885',\n                              \n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {primaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(primaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n\n    </>\n  )\n}\n\nexport default PrimaryDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PubDetails = ({ propertyData, pubs1, listType, setPubs1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [pubView, setPubView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [pub2, setPub2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedPubs, setSelectedPubs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handlePubClick = (pub) => {\n    console.log('selected pub ->', pub)\n    setSelectedPubs(pub)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...pubs1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPubs1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as pub2\n      setPub2([...pubs1])\n    } else {\n      setPub2(\n        pubs1.filter(item => {\n          return (\n            item.name.toLowerCase().includes(term.toLowerCase()) ||\n            item.operator.toLowerCase().includes(term.toLowerCase()) ||\n            item.walkTimeMin.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (pubs1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, pubs1])\n\n  \n\n  return (\n    <>\n      {pubs1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Pub details near {propertyData.name} </h1> : <h1>Pub long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPubView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPubView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {pubView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('name')}>\n                  <h5>Pub name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='pub-group sort-section' onClick={() => handleSort('operator')}>\n                  <h5>Pub group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {pub2 ? pub2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.name}</h5>\n                        </div>\n                        <div className='column pub-group' id='column3'>\n                          <h5>{item.operator}</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : pubView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {pub2 ? pub2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.name}</h5>\n                              <h5>🍺 Pub group: {item.operator}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {pub2 &&\n                    pub2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handlePubClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedPubs ? \n                        <Popup\n                          longitude={selectedPubs.longitude}\n                          latitude={selectedPubs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedPubs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedPubs.name}</h5>\n                              <p>🍺 {selectedPubs.operator} pub group</p>\n                              <p>🍺 Distance: {selectedPubs.walkTimeMin} mins</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {pub2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(pub2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default PubDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst RestaurantDetails = ({ propertyData, restaurants1, listType, setRestaurants1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [restaurantView, setRestaurantView] = useState('Table')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedRestaurants, setSelectdRestaurant] = useState(null)\n\n\n  // state for storing new supermarket data \n  const [restaurants2, setRestaurants2] = useState([])\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSchoolClick = (restaurant) => {\n    console.log('selectd restaurant ->', restaurant)\n    setSelectdRestaurant(restaurant)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...restaurants1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setRestaurants1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as restaurants2\n      setRestaurants2([...restaurants1])\n    } else {\n      setRestaurants2(\n        restaurants1.filter(item => {\n          return (\n            item.restaurant_name.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (restaurants1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, restaurants1])\n\n  \n\n  return (\n    <>\n      {restaurants1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Restaurant details near {propertyData.name} </h1> : <h1>Restaurants long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setRestaurantView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setRestaurantView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {restaurantView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('restaurant_name')}>\n                  <h5>Restaurant name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {/* <div id='column3' className='sort-section' onClick={() => handleSort('rating')}>\n                  <h5>Rating (/5)</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>              */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5'>Website</h5>\n              </div>\n              <div className='school-table-details'>\n                {restaurants2 ? restaurants2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.restaurant_name}</h5>\n                        </div>\n                        {/* <div className='column' id='column3'>\n                          <h5>{item.rating}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins </h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column' id='column5'>\n                          <a href={item.url}>Visit website</a>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : restaurantView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {restaurants2 ? restaurants2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.restaurant_name}</h5>\n                              {/* <h5>📈 Rating: {item.rating} /5</h5> */}\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {restaurants2 &&\n                    restaurants2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedRestaurants ? \n                        <Popup\n                          longitude={selectedRestaurants.longitude}\n                          latitude={selectedRestaurants.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectdRestaurant(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedRestaurants.restaurant_name}</h5>\n                              <p>{selectedRestaurants.master_cuisine}</p>\n                              {/* <p>{selectedRestaurants.rating} /5</p> */}\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {restaurants2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(restaurants2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default RestaurantDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\nconst SecondaryDetails = ({ propertyData, secondaryData1, listType, setSecondaryData1, postcodeData }) => {\n\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new primary data \n  const [secondaryData2, setSecondaryData2] = useState([])\n\n\n  // states for handling the view type\n  const [secondaryView, setSecondaryView] = useState('Table')\n\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // trigger icon pop up\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n\n  // ? Section3: Ability to sort data by different column names\n  // function to sort data by column name\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...secondaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSecondaryData1(sortedData)\n  }\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as secondaryData1\n      setSecondaryData2([...secondaryData1])\n    } else {\n      setSecondaryData2(\n        secondaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (secondaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, secondaryData1])\n\n  \n\n  return (\n\n    <>\n      {secondaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Secondary school details near {propertyData.name} </h1> : <h1>Secondary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSecondaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSecondaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n          {secondaryView === 'Table' ? \n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('total_pass_rate')}>\n                  <h5>GCSE pass rate</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('total_top_rate')}>\n                  <h5>GCSE A/A*</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {secondaryData2 ? secondaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          <h5>{(item.total_pass_rate === null ? 'N/a' : item.total_pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column7'>\n                          <h5>{(item.total_top_rate === null ? 'N/a' : item.total_top_rate)}</h5>\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.school_type === 'Independent school' ? 'N/a' : item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n            </div>\n\n            : secondaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {secondaryData2 ? secondaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title' onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              <h5>🌍 {item.within_catchment}</h5>\n                              <h5>⏰ {item.walkTimeMin} mins</h5>\n                            </div>\n\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {secondaryData2 &&\n                    secondaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ? \n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }} \n                              paint={{\n                                'text-color': '#051885',\n                              \n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n              </div>\n\n              : '' }\n          {secondaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(secondaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SecondaryDetails","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst SupermarketDetails = ({ propertyData, supermarkets1, listType, setSupermarkets1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [supermarketsView, setSupermarketsView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [supermarkets2, setSupermarkets2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedSupermarkets, setSelectedSupermarkts] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSupermarketClick = (supermarket) => {\n    console.log('selectd supermarket ->', supermarket)\n    setSelectedSupermarkts(supermarket)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...supermarkets1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSupermarkets1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as supermarkets1\n      setSupermarkets2([...supermarkets1])\n    } else {\n      setSupermarkets2(\n        supermarkets1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.segment.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase()) \n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (supermarkets1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, supermarkets1])\n\n  \n\n  return (\n    <>\n      {supermarkets1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Supermarkets near {propertyData.name} </h1> : <h1>Supermarkets long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSupermarketsView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSupermarketsView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {supermarketsView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('cleansed_name')}>\n                  <h5>Supermarket name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>             \n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('segment')}>\n                  <h5>Segment</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>  \n                <div id='column4' className='sort-section' onClick={() => handleSort('size')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                \n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {supermarkets2 ? supermarkets2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.cleansed_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.segment}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.size}</h5>\n                        </div>\n                      \n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n  \n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : supermarketsView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {supermarkets2 ? supermarkets2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.cleansed_name}</h5>\n                              <h5>{item.size}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {supermarkets2 &&\n                    supermarkets2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.long}\n                        latitude={item.Lat}\n                        onClick={() => handleSupermarketClick(item)}\n\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n                      {selectedSupermarkets ? \n                        <Popup\n                          longitude={selectedSupermarkets.long}\n                          latitude={selectedSupermarkets.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedSupermarkts(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedSupermarkets.cleansed_name}</h5>\n                              <p>{selectedSupermarkets.size}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {supermarkets2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(supermarkets2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SupermarketDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport PrimaryDetails from '../propertyDetails/componentDetails/PrimaryDetails'\nimport SecondaryDetails from '../propertyDetails/componentDetails/SecondaryDetails'\nimport RestaurantDetails from '../propertyDetails/componentDetails/RestaurantDetails'\nimport FitnessDetails from '../propertyDetails/componentDetails/FitnessDetails'\nimport SupermarketDetails from '../propertyDetails/componentDetails/SupermarketDetails'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from '../propertyDetails/componentDetails/EVDetails'\nimport PubDetails from '../propertyDetails/componentDetails/PubDetails'\n\n\n\n\nconst VariablesPage = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [ev, setEv] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Variables')\n  const [profileDetail, setProfileDetail] = useState('Variables')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(true)\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        const sortedData = data.sort((a, b) => b.pupils_at_standard - a.pupils_at_standard)\n        setPrimaryData(sortedData)\n        console.log('all primaries ->', sortedData)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    loadPrimaryData()\n  }, [])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        const sortedData = data.sort((a, b) => b.total_pass_rate - a.total_pass_rate)\n        setSecondaryData(sortedData)\n        console.log('all secondaries ->', sortedData)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadSecondaryData()\n  }, [])\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        const sortedData = data.sort((a, b) => b.rating - a.rating)\n        setRestaurants(sortedData)\n        console.log('all restaurants ->', sortedData)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadRestaurantData()\n  }, [])\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadFitnessData()\n  }, [])\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadSupermarketData()\n  }, [])\n\n\n  // ? Section 8: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadEVdata()\n  }, [])\n\n\n  \n\n  // ? Section 8: Load and sort Pubs data\n  const loadPubs = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pubs data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPubs()\n  }, [])\n\n\n\n\n\n\n  return (\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n        />    \n        {profileDetail === 'Variables' ?  \n          <section className='variables-section'>\n\n            <h1>Explore the different variables</h1>\n            <div className='variables-list'>\n              <div className='variable' onClick={() => setProfileDetail('Primary schools')}>\n                <h1>🏫</h1>\n                <h3>Primary schools</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Secondary schools')}>\n                <h1>👨‍🏫</h1>\n                <h3>Secondary schools</h3>\n              </div>\n              <div className='variable'>\n                <h1>🎓</h1>\n                <h3>6th form colleges</h3>\n              </div>\n              <div className='variable'>\n                <h1>🌳</h1>\n                <h3>Green space</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Restaurants')}>\n                <h1>🍽</h1>\n                <h3>Restaurants</h3>\n              </div>\n              <div className='variable'>\n                <h1>🚇</h1>\n                <h3>Tube stations</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('EVs')}>\n                <h1>⛽️</h1>\n                <h3>Electric vehicles</h3>\n              </div>\n              <div className='variable'onClick={() => setProfileDetail('Pubs')}>\n                <h1>🍻</h1>\n                <h3>Pubs</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Fitness')}>\n                <h1>🏋️‍♂️</h1>\n                <h3>Fitness</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Supermarkets')}>\n                <h1>🛒</h1>\n                <h3>Supermarkets</h3>\n              </div>\n            </div>\n\n          </section>\n          : profileDetail === 'Primary schools' ?\n            <section  className='variables-single-section'>\n              <PrimaryDetails\n                primaryData1={primaryData}\n                setPrimaryData1={setPrimaryData}\n                listType={'long list'}\n                setProfileDetail={setProfileDetail}\n              />\n\n            </section>\n\n            : profileDetail === 'Secondary schools' ?\n              <section  className='variables-single-section'>\n                <SecondaryDetails\n                  secondaryData1={secondaryData}\n                  setSecondaryData1={setSecondaryData}\n                  listType={'long list'}\n                />\n\n              </section>\n\n              : profileDetail === 'Restaurants' ?\n                <section  className='variables-single-section'>\n                  <RestaurantDetails\n                    restaurants1={restaurants}\n                    setRestaurants1={setRestaurants}\n                    listType={'long list'}\n                  />\n\n                </section>\n\n                : profileDetail === 'Fitness' ?\n                  <section  className='variables-single-section'>\n                    <FitnessDetails\n                      gyms1={gyms}\n                      setGyms1={setGyms}\n                      listType={'long list'}\n                    />\n\n                  </section>\n\n                  : profileDetail === 'Supermarkets' ?\n                    <section className='variables-single-section'>\n                      <SupermarketDetails\n                        supermarkets1={supermarkets}\n                        setSupermarkets1={setSupermarkets}\n                        listType={'long list'}\n                      />\n\n                    </section>\n\n                    : profileDetail === 'EVs' ?\n                      <section className='variables-single-section'>\n                        <EVDetails\n                          ev1={ev}\n                          setEv1={setEv}\n                          listType={'long list'}\n                        />\n\n                      </section>\n\n                      : profileDetail === 'Pubs' ?\n                        <section className='variables-single-section'>\n                          <PubDetails\n                            pubs1={pubs}\n                            setPubs1={setPubs}\n                            listType={'long list'}\n                          />\n\n                        </section>\n\n\n\n                        : ''}\n    \n\n      </section>\n    </>\n  )\n}\n\nexport default VariablesPage"],"names":["className","src","require","alt","textColour","pageType","id","style","color","setProfileDetail","variableSide","setProfileContent","setVariableSide","userData","navigate","useNavigate","onClick","propertyData","ev1","listType","setEv1","postcodeData","evView","setEvView","useState","ev2","setEv2","sortField","setSortField","sortDirection","setSortDirection","selectedEvs","setSelectedEvs","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","console","log","parseInt","target","useEffect","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","item","location","toLowerCase","includes","fast_charging","name","type","value","onChange","placeholder","map","index","power","walkTimeMin","slice","onMouseEnter","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","handleEvClick","gym","closeOnClick","onClose","pageCount","Math","ceil","length","onPageChange","data","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","gyms1","setGyms1","fitnessView","setFitnessView","gyms2","setGyms2","selectedGyms","setSelectedGyms","gym_name","gym_group","class_type","long","Lat","handleGymClick","primaryData1","setPrimaryData1","primaryView","setPrimaryView","primaryData2","setPrimaryData2","selectedSchool","setSelectedSchool","school_name","local_authority","school_type","ofsted_results","toString","total_pass_rate","total_top_rate","within_catchment","max_distance","round","pupils_at_standard","pupils_exceeding_standard","turf","units","paint","geometry","coordinates","layout","pubs1","setPubs1","pubView","setPubView","pub2","setPub2","selectedPubs","setSelectedPubs","operator","handlePubClick","pub","restaurants1","setRestaurants1","restaurantView","setRestaurantView","selectedRestaurants","setSelectdRestaurant","restaurants2","setRestaurants2","restaurant_name","href","url","handleSchoolClick","restaurant","master_cuisine","secondaryData1","setSecondaryData1","secondaryData2","setSecondaryData2","secondaryView","setSecondaryView","supermarkets1","setSupermarkets1","supermarketsView","setSupermarketsView","supermarkets2","setSupermarkets2","selectedSupermarkets","setSelectedSupermarkts","cleansed_name","segment","size","handleSupermarketClick","supermarket","errors","setErrors","primaryData","setPrimaryData","secondaryData","setSecondaryData","restaurants","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","tubes","setTubes","ev","setEv","profileContent","profileDetail","async","axios","getPrimaries","error","loadPrimaryData","getSecondaries","loadSecondaryData","rating","getData","loadRestaurantData","loadFitnessData","loadSupermarketData","loadEVdata","loadPubs","navbarColour"],"sourceRoot":""}