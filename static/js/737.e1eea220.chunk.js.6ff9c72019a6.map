{"version":3,"file":"static/js/737.e1eea220.chunk.js","mappings":"wKAqDA,UAhDqB,KACnB,MAAOA,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAASC,IAAcF,EAAAA,EAAAA,aACbG,EAAAA,EAAAA,MAcjB,OACE,iCACE,SAAC,IAAM,CAACC,aAAa,aACrB,gBAAKC,UAAU,aAAY,UACzB,gBAAKA,UAAU,gBAAe,UAC5B,gBAAKA,UAAU,eAAc,UAC3B,kBAAMA,UAAU,cAAcC,SAlBZC,UAC1BC,EAAMC,iBAEN,IACE,MAAMC,QAAiBC,EAAAA,GAAAA,KAAW,oCAAqC,CAAEb,UACzEI,EAAWQ,EAASE,KAAKC,QACzBC,QAAQC,IAAIL,EAASE,KAAKC,OAG5B,CAFE,MAAOG,GACPF,QAAQE,MAAMA,EAChB,GASoE,WAC1D,8CACA,kCACA,kBACEC,KAAK,QACLC,KAAK,QACLC,MAAOrB,EACPsB,SAAWC,GAAMtB,EAASsB,EAAEC,OAAOH,OACnCI,UAAQ,KACV,mBAAQlB,UAAU,UAAUY,KAAK,SAAQ,4BACxChB,IAAW,cAAGI,UAAU,SAAQ,SAAEJ,eAW1C,C,qGCgPP,IAtRe,IAAuB,IAAtB,aAAEG,GAAc,EAG9B,MAQMoB,GAAWrB,EAAAA,EAAAA,OAOVsB,EAAUC,KAFGC,EAAAA,EAAAA,QAAO,OAEK3B,EAAAA,EAAAA,WAAS,KAOlC4B,EAAQC,IAAa7B,EAAAA,EAAAA,UAAS,CACnCF,MAAO,GAEPgC,SAAU,GACVC,qBAAsB,MAkCjBC,EAAmBC,IAAwBjC,EAAAA,EAAAA,UAAS,aACpDkC,EAAsBC,IAA2BnC,EAAAA,EAAAA,UAAS,aAsB1DoC,EAAUC,IAAerC,EAAAA,EAAAA,WAAS,IAclCsC,EAAcC,IAAmBvC,EAAAA,EAAAA,WAAS,IAa1CwC,EAAcC,IAAmBzC,EAAAA,EAAAA,UAAS,CAC/CF,MAAO,GACP4C,SAAU,GACVZ,SAAU,GACVa,sBAAuB,GACvBC,WAAY,GACZC,UAAW,MAINC,EAAeC,IAAoB/C,EAAAA,EAAAA,UAAS,CACjDF,MAAO,GACP4C,SAAU,GACVZ,SAAU,GACVa,sBAAuB,GACvBC,WAAY,GACZC,UAAW,GACXG,KAAM,KAiHR,OACE,iCACE,qBAAS3C,UAAU,cAAc4C,MAAO,CAAEC,gBAAiB9C,GAAe,WACxE,iBAAKC,UAAU,eAAc,WAC3B,gBAAKA,UAAU,OAAM,UACnB,eAAI8C,QAAS,IAAM3B,EAAS,KAAK,uBAGnC,eAAI2B,QAAS,IAAM3B,EAAS,WAAYnB,UAAU,eAAc,yBAChE,eAAI8C,QAAS,IAAM3B,EAAS,mCAAoCnB,UAAU,eAAc,0BAE1F,gBAAKA,UAAU,iBAAiB8C,QAhKf,KACrBd,GAAY,EAAK,EA+J2C,UACtD,gBAAKhC,UAAU,eAAc,UAC3B,2BACE,iBAAKA,UAAU,cAAa,WAC1B,eAAIA,UAAU,sBACd,eAAIA,UAAU,sBACd,eAAIA,UAAU,+BAKtB,mBAAQA,UAAU,cAAa,6BAEjC,SAAC,IAAS,CACR+B,SAAUA,EACVC,YAAaA,EACbe,gBArLkB,KACtBf,GAAY,EAAM,EAqLdgB,sBA5QyBC,IAC7BC,aAAaC,WAAW,qBACxBD,aAAaC,WAAW,mBACxBC,OAAOC,SAASC,SAChBjC,GAAY,EAAM,MA0Qf,C","sources":["components/auth/RequestReset.js","components/tools/NavBar.js"],"sourcesContent":["import React, { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport axios from 'axios'\nimport NavBar from '../tools/NavBar'\n\nconst RequestReset = () => {\n  const [email, setEmail] = useState('')\n  const [message, setMessage] = useState()\n  const navigate = useNavigate()\n\n  const handlePasswordReset = async (event) => {\n    event.preventDefault()\n\n    try {\n      const response = await axios.post('/api/auth/password-reset-request/', { email })\n      setMessage(response.data.detail)\n      console.log(response.data.detail)\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  return (\n    <>\n      <NavBar navbarColour='#051885' />\n      <div className='login-page'>\n        <div className='login-content'>\n          <div className='form-section'>\n            <form className='form-detail' onSubmit={handlePasswordReset}>\n              <h1>Recover password</h1>\n              <p>Email</p>\n              <input\n                type=\"email\"\n                name=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required />\n              <button className='sign-up' type=\"submit\">Reset Password</button>\n              {message && <p className='error1'>{message}</p>}\n            </form>\n\n\n          </div>\n\n\n\n        </div>\n\n      </div>\n    </>\n  )\n}\n\nexport default RequestReset\n","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst NavBar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  const responseMessage = (response) => {\n    console.log(response)\n  }\n\n  const errorMessage = (error) => {\n    console.log(error)\n  }\n\n\n  // post google information for authentication\n  const googleLogin = async (response) => {\n    try {\n      // await axios.post('/api/auth/google/', registerData)\n      const auth = { 'auth_token': response.credential }\n      console.log(auth)\n      const { data } = await axios.post('/api/auth/google/', {\n        body: JSON.stringify(auth),\n      })\n      console.log(data)\n    } catch (err) {\n      setErrors(err)\n      console.log(err)\n      console.log(err.response.data)\n    }\n  }\n\n  return (\n    <>\n      <section className='nav-section' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n          <h4 onClick={() => navigate('/agents')} className='agent-button'>For agents</h4>\n          <h4 onClick={() => navigate('/blogs/school-search-simplified')} className='agent-button'>Insights</h4>\n        </div>\n        <div className='menu-container' onClick={handleMenuShow}>\n          <div className=\"menu-trigger\">\n            <span>\n              <div className='burger-icon'>\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n              </div>\n            </span>\n          </div>\n        </div>\n        <button className='agent-login'>Agent login</button>\n      </section>\n      <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      />\n    </>\n  )\n\n}\n\nexport default NavBar"],"names":["email","setEmail","useState","message","setMessage","useNavigate","navbarColour","className","onSubmit","async","event","preventDefault","response","axios","data","detail","console","log","error","type","name","value","onChange","e","target","required","navigate","isActive","setIsActive","useRef","errors","setErrors","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","style","backgroundColor","onClick","handleMenuClose","removeItemFromStorage","token","localStorage","removeItem","window","location","reload"],"sourceRoot":""}