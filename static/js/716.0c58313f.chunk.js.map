{"version":3,"file":"static/js/716.0c58313f.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyList.js/LandingPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\n\nimport NavBar from '../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\nimport Footer from '../../tools/Footer'\nimport { NumericFormat } from 'react-number-format'\nimport WhiteSidebar from '../WhiteSidebar'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport VariablesPage from '../variableSummaries/VariablesPage'\nimport WhiteComparison from '../comparisonSection/WhiteComparison'\nimport NavBarRevised from '../../tools/NavBarRevised'\n\n\n\n\n\nconst LandingPage = () => {\n\n  // ? Section 1: Define states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for handling locations\n  const location = useLocation()\n  const [historyStack, setHistoryStack] = useState([])\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for company data\n  const [companyData, setCompany] = useState()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('My properties')\n  const [profileDetail, setProfileDetail] = useState('My properties')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n  // searchbar state\n  const [searchQuery, setSearchQuery] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n\n  // set state for lisrt of properties\n  const [propertyList, setPropertyList] = useState()\n\n  // Set state for the total value of properties\n  const [propertyValueSum, setPropertyValueSum] = useState(0)\n\n  // set state for determining the channel\n  const [channel, setChannel] = useState()\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n          console.log('company ->', data.company)\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n  \n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n  // ? Section 3: Get properties\n  const loadProperties = () => {\n    const getProperties = async () => {\n      try {\n        const { data } = await axios.get(`/api/white_properties/${companyData}`, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        console.log('agent property data ->', data)\n    \n        if (data && Array.isArray(data) && data.length > 0) {\n          setPropertyList(data)\n          const totalValue = data.reduce((acc, property) => acc + (property.price || 0), 0)\n          setPropertyValueSum(totalValue.toFixed(1))\n          setChannel(data[0].status === 'Let' ? 'Rent' : 'Sale')\n        } else {\n          console.log('No property data available')\n          // handle the case when data is not available or not in expected format\n        }\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    }\n    getProperties()\n  }\n  \n\n  // carry out calculation to load user data\n  useEffect(() => {\n    if (userData) {\n      loadProperties()\n    }\n  }, [userData])\n\n\n  \n\n\n  // ? Section4: Other useful functions\n  const sortByField = (field) => {\n    setSortField(field)\n  }\n\n\n\n  return (\n    <>\n      \n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />\n        {propertyList ? \n          <>\n            <section className='profile-summary'>\n              <div className='welcome'>\n                <h1>You have {propertyList ? propertyList.length : ''} properties saved</h1>\n              </div>\n\n            </section>\n          \n            <section className='profile-property-list'>\n              <div className='search-section'>\n                <div className='search-section-left'>\n                  <h3>Search</h3>\n                  <input value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} placeholder='Type property name'></input>\n                </div>\n                {/* <div className='search-section-right'>\n                <h3>Status</h3>\n                <input value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} placeholder='All'></input>\n              </div> */}\n              </div>\n              <div className='agent-property-list'>\n                <div className='property-block'>\n                  <div className='property-table-headers'>\n                    <h5 id='column1'>Property</h5>\n                    <div id='column2' className='sort-section'>\n                      <h5>Street name</h5>\n                      <h5 className='sort' onClick={() => sortByField('name')}>↕️</h5>\n                    </div>                    \n                    <div id='column3' className='sort-section'>\n                      <h5>Price</h5>\n                      <h5 className='sort' onClick={() => sortByField('price')}>↕️</h5>\n                    </div>\n                    <h5 id='column5'>Action</h5>\n                  </div>\n                  <div className='property-table-details'>\n                    {propertyList ? propertyList\n                      .filter((item) => item.name.toLowerCase().includes(searchQuery.toLowerCase()))\n                    // .filter((item) => item.status.toLowerCase().includes(statusFilter.toLowerCase()))\n                      .sort((a, b) => {\n                        if (sortField === 'name') {\n                          return a.name.localeCompare(b.name)\n                        } else if (sortField === 'price') {\n                          return a.price - b.price\n                        } else if (sortField === 'date') {\n                          return new Date(a.date) - new Date(b.date) // This works if your date is in format 'YYYY/MM/DD'\n                        }\n                        return 0\n                      })\n                      .map((item, index) => {\n                        return (\n                          <>\n                            <div className='property-content' key={index}>\n                              <div className='column' id='column1'>\n                                <div className='property-image' style={{ backgroundImage: `url(${item.image})` }}></div>\n                              </div>\n                              <div className='column' id='column2'>\n                                <h5>{item.name}</h5>\n                              </div>\n                              <div className='column' id='column3'>\n\n                                <h5><NumericFormat value={item.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /></h5>\n                              </div>\n                              {/* <div className='column' id='column4'>\n                              <h5>{item.status}</h5>\n                            </div> */}\n                              {/* <div className='column' id='column5'>\n                              <h5>2023/06/18</h5>\n                            </div> */}\n                              <div className='column' id='column6'>\n                                <button onClick={() => navigate(`/agents/property/${item.postcode}`)}>View</button>\n                              </div>\n                            </div>\n                            <hr className='property-divider' />\n                          </>\n                        )\n                      })\n                      : ''}\n                  </div>\n                </div>\n\n              </div>\n            </section>\n          </>\n          \n          : \n          <section className='profile-summary'>\n            <div className='welcome'>\n              <h1>You don&apos;t have any properties saved yet</h1>\n            </div>\n\n          </section>\n        }\n      </section>\n\n    </>\n  )\n}\n\nexport default LandingPage"],"names":["navigate","useNavigate","historyStack","setHistoryStack","useLocation","useState","userData","setUserData","companyData","setCompany","errors","setErrors","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","searchQuery","setSearchQuery","statusFilter","setStatusFilter","sortField","setSortField","propertyList","setPropertyList","propertyValueSum","setPropertyValueSum","channel","setChannel","useEffect","isUserAuth","async","data","axios","getUserToken","headers","Authorization","getAccessToken","console","log","company","error","getUser","Array","isArray","length","totalValue","reduce","acc","property","price","toFixed","status","getProperties","sortByField","field","className","navbarColour","value","onChange","e","target","placeholder","id","onClick","filter","item","name","toLowerCase","includes","sort","a","b","localeCompare","Date","date","map","index","style","backgroundImage","image","displayType","thousandSeparator","prefix","postcode"],"sourceRoot":""}