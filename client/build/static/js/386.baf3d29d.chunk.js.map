{"version":3,"file":"static/js/386.baf3d29d.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyDetails/componentHighlights/LifestyleHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/SchoolHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/TransportHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/NeighbourhoodHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/PropertySummary.js","components/whiteLabel/propertyDetails/helpers/PropertyDetailSlider.js","components/whiteLabel/propertyDetails/SinglePropertySummary.js","../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\n\nconst LifestyleHighlights = ({ restaurants1, cuisines, topRestaurants, gyms1, mainGyms, supermarkets1, mainSupermarkets, pubs1, topPubs }) => {\n\n  // ? Section 1: Define states\n\n  // state for errors\n  const [errors, setErrors] = useState()\n\n\n  return (\n\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Restaurants</h5>\n            {restaurants1 ? \n              <>\n                <h5>🍽 {restaurants1.length} restaurants within 15 mins walk</h5>\n                <h5>🍽 more than {cuisines} cuisines available</h5>\n                <h5>🍽 {topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</h5>\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Pubs</h5>\n            {pubs1 ? \n              <>\n                <h5>🍺 {pubs1.length} pubs within 15 mins walk</h5>\n                <h5>🍺 {topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</h5>\n              </>\n              : '' }\n          </div>\n        </div>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Fitness</h5>\n            {gyms1 ? \n              <>\n                <h5>🏋️‍♂️ {gyms1.length} gyms within 15 mins walk</h5>\n                {mainGyms.length === 3 ? <h5>🏋️‍♂️ includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</h5> : mainGyms.length === 2 ? <h5>🏋️‍♂️ includes {mainGyms[0]} & {mainGyms[1]} </h5> : mainGyms.length === 1 ? <h5>🏋️‍♂️ includes {mainGyms[0]}</h5> : '' }\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Supermarkets</h5>\n            {supermarkets1 ? \n              <>\n                <h5>🛒 {supermarkets1.length} supermarkets within 15 mins walk</h5>\n                {mainSupermarkets.length === 3 ? <h5>🛒 includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</h5> : mainSupermarkets.length === 2 ? <h5>🛒 includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </h5> : mainSupermarkets.length === 1 ? <h5>🛒 includes {mainSupermarkets[0]}</h5> : '' }\n              </>\n              : '' }\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default LifestyleHighlights","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\nconst SchoolHighlights = ({ topPrimaries, topSecondaries }) => {\n\n  // ? Section 1: Define states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n\n\n  return (\n\n    <>\n      <section className='school-highlights'>\n        <div className='school-block'>\n          <h5 className='block-title'>Primary schools</h5>\n          <div className='school-table-headers'>\n            <h5 id='column1'>#</h5>\n            <h5 id='column2'>School name</h5>\n            <h5 id='column3'>Ofsted</h5>\n            <h5 id='column4'>Catchment</h5>\n            <h5 id='column5'>Distance</h5>\n          </div>\n          <div className='school-table-details'>\n            {topPrimaries ? topPrimaries.map((item, index) => {\n              return (\n                <>\n                  <div className='school-content'>\n                    <div className='column' id='column1'>\n                      <h5>{index + 1}</h5>\n                    </div>\n                    <div className='column' id='column2'>\n                      <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)} >{item.school_name}</h5>\n                    </div>\n                    <div className='column' id='column3'>\n                      {item.ofsted_results !== null ? <h5>{item.ofsted_results}</h5> : <h5>N/a</h5>}\n                    </div>\n                    <div className='column' id='column4'>\n                      <h5>{item.within_catchment}</h5>\n                    </div>\n                    <div className='column' id='column5'>\n                      <h5>{item.walkTimeMin} mins</h5>\n                    </div>\n                  </div>\n        \n                </>\n              )\n            }) : ''}\n          </div>\n        </div>\n        <div className='school-block'>\n          <h5 className='block-title'>Secondary schools</h5>\n          <div className='school-table-headers'>\n            <h5 id='column1'>#</h5>\n            <h5 id='column2'>School name</h5>\n            <h5 id='column3'>Ofsted</h5>\n            <h5 id='column4'>Catchment</h5>\n            <h5 id='column5'>Distance</h5>\n          </div>\n          <div className='school-table-details'>\n            {topSecondaries ? topSecondaries.map((item, index) => {\n              return (\n                <>\n                  <div className='school-content'>\n                    <div className='column' id='column1'>\n                      <h5>{index + 1}</h5>\n                    </div>\n                    <div className='column' id='column2'>\n                      <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)} >{item.school_name}</h5>\n                    </div>\n                    <div className='column' id='column3'>\n                      {item.ofsted_results !== null ? <h5>{item.ofsted_results}</h5> : <h5>N/a</h5>}\n                    </div>\n                    <div className='column' id='column4'>\n                      <h5>{item.within_catchment}</h5>\n                    </div>\n                    <div className='column' id='column5'>\n                      <h5>{item.walkTimeMin} mins</h5>\n                    </div>\n                  </div>\n        \n                </>\n              )\n            }) : ''}\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default SchoolHighlights","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\n\nconst TransportHighlights = ({ postcodeData, tubes1 }) => {\n\n\n\n\n\n  return (\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Tubes</h5>\n            {tubes1 && tubes1.length > 0 ? \n              <>\n                <h5>🚇 {tubes1.length} tube stations within 20 mins walk</h5>\n                <h5>🚇 {tubes1[0].station_name} is {tubes1[0].walkTimeMin} mins away</h5>\n                {tubes1.length > 2 ? <h5>🚇 {tubes1[1].station_name} and {tubes1[2].station_name} are also nearby</h5> : tubes1.length === 1 ? <h5>🚇 {tubes1[1].station_name} is also nearby</h5> : '' }\n              </>\n              : \n              <h5>🚇 No tube stations within 20 min walk of this property</h5> }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Electric vehicles</h5>\n            {postcodeData ? \n              <>\n                <h5>🚇 {postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</h5>\n                <h5>🚇 in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</h5>\n              </>\n              : '' }\n          </div>\n        </div>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Trains</h5>\n            <h5>🚊 2 train stations within 20 mins walk</h5>\n            <h5>🚊 North Dulwich is 18 mins away</h5>\n\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default TransportHighlights","\n\n\n\n\nconst NeighbourhoodHighlights = ({ postcodeData }) => {\n\n\n  return (\n\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Green space</h5>\n            {postcodeData ? \n              <>\n                <h5>🌳 within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</h5>\n                <h5>🌳 {postcodeData[0].parks_postcode.park_name0} within {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</h5>\n                {/* {tubes1.length > 2 ? <h5>🚇 {tubes1[1].station_name} and {tubes1[2].station_name} are also nearby</h5> : tubes1.length === 1 ? <h5>🚇 {tubes1[1].station_name} is also nearby</h5> : '' } */}\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Crime</h5>\n            {postcodeData ? \n              <>\n                <h5>🚓 in the lowest {Math.round((postcodeData[0].crime[0].percentile) * 100)}% of areas in London for reported crimes</h5>\n                <h5>🚓 in the lowest {Math.round((postcodeData[0].crime[0].area_specific_percentile) * 100)}% of areas in {postcodeData[0].crime[0].borough} for reported crimes</h5>\n\n              </>\n              : '' }\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default NeighbourhoodHighlights","import { PieChart, Pie, Cell, Label, ResponsiveContainer } from 'recharts'\n\n\n\nconst PropertySummary = ({ neighbourhoodScore, postcodeData }) => {\n\n  // neighbourhood data\n  const data = [\n    { name: 'Score', value: neighbourhoodScore },\n    { name: 'Remainder', value: 100 - neighbourhoodScore }\n  ]\n\n  const COLORS = ['#051885', '#FFA7E5']\n\n\n  // greenspace data\n  const greenspaceData = [\n    { name: 'Score', value: postcodeData[0].parks_lsoa[0].london_percentile },\n    { name: 'Remainder', value: 100 - postcodeData[0].parks_lsoa[0].london_percentile }\n  ]\n\n  // restaurant data\n  const restaurantData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].restaurants.normal_percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].restaurants.normal_percentile) * 100) }\n  ]\n\n  // crime data\n  const crimeData = [\n    { name: 'Score', value: Math.round(postcodeData[0].crime[0].percentile * 100) },\n    { name: 'Remainder', value: Math.round((1 - postcodeData[0].crime[0].percentile) * 100) }\n  ]\n\n\n  // tubes data\n  const tubeData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].tubes.percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].tubes.percentile) * 100) }\n  ]\n\n  const secondariesData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].secondaries.total_score_percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].secondaries.total_score_percentile) * 100) }\n  ]\n\n\n\n  return (\n\n    <>\n      <section className=\"summary-section\">\n        <div className=\"row\">\n\n          {/* Neighbourhood score */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={data}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {data.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${neighbourhoodScore}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>Neighbourhood score</h1>\n            </div> \n          </div>  \n\n          {/* Greenspace stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={greenspaceData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {greenspaceData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${greenspaceData[0].value > 50 ? greenspaceData[1].value : greenspaceData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              {greenspaceData[0].value > 50 ?  <h1>within top {greenspaceData[1].value}% of areas of London for access to greenspace</h1> : <h1>within bottom {greenspaceData[0].value}% of areas of London for access to greenspace</h1>}\n            </div> \n          </div>  \n\n          {/* Secondaries stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={secondariesData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {secondariesData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - secondariesData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {100 - secondariesData[0].value}% of areas of London for secondary schools</h1>\n            </div> \n          </div>  \n\n          {/* Restaurant stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={restaurantData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {restaurantData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - restaurantData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within best {100 - restaurantData[0].value}% of areas of London for number of quality restaurants</h1>\n            </div> \n          </div>  \n\n          {/* <div className=\"row\"> */}\n\n          {/* Crime score */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={crimeData.reverse()}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {crimeData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${crimeData[1].value > 50 ? crimeData[0].value : crimeData[1].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              {(crimeData[1].value) > 50 ? <h1>In the highest {crimeData[0].value}% of areas in London for reported crimes</h1> : <h1>In the lowest {(crimeData[1].value)}% of areas in London for reported crimes</h1>}\n            </div> \n          </div>  \n\n          {/* Tubes stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={tubeData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {tubeData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - tubeData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {100 - tubeData[0].value}% of areas of London for access to tubes</h1>\n            </div> \n          </div>  \n\n          {/* Restaurant stat */}\n          {/* <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={restaurantData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {restaurantData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${restaurantData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {restaurantData[0].value}% of areas of London for restaurants</h1>\n            </div> \n          </div>   */}\n        </div>    \n      </section>\n    \n    </>\n  )\n}\n\nexport default PropertySummary","\n\n\n\n\nconst PropertyDetailSlider = ({ sliderSelection, setSliderSelection }) => {\n\n\n  return (\n\n    <>\n      <div className=\"detail-slider\">\n        <h5 onClick={() => setSliderSelection('Primary schools')} style={{ backgroundColor: sliderSelection === 'Primary schools' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Primary schools' ? 'bold' : 'initial' }} >Primary schools</h5>\n        <h5 onClick={() => setSliderSelection('Secondary schools')} style={{ backgroundColor: sliderSelection === 'Secondary schools' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Secondary schools' ? 'bold' : 'initial' }} >Secondary schools</h5>\n        {/* <h5 onClick={() => setSliderSelection('6th forms')} style={{ backgroundColor: sliderSelection === '6th forms' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === '6th forms' ? 'bold' : 'initial' }} >6th forms</h5> */}\n        {/* <h5 onClick={() => setSliderSelection('Greenspace')} style={{ backgroundColor: sliderSelection === 'Greenspace' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Greenspace' ? 'bold' : 'initial' }} >Greenspace</h5> */}\n        {/* <h5 onClick={() => setSliderSelection('Tubes')} style={{ backgroundColor: sliderSelection === 'Tubes' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Tubes' ? 'bold' : 'initial' }} >Tubes</h5> */}\n        <h5 onClick={() => setSliderSelection('Restaurants')} style={{ backgroundColor: sliderSelection === 'Restaurants' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Restaurants' ? 'bold' : 'initial' }} >Restaurants</h5>\n        <h5 onClick={() => setSliderSelection('Pubs')} style={{ backgroundColor: sliderSelection === 'Pubs' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Pubs' ? 'bold' : 'initial' }} >Pubs</h5>\n        <h5 onClick={() => setSliderSelection('Supermarkets')} style={{ backgroundColor: sliderSelection === 'Supermarkets' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Supermarkets' ? 'bold' : 'initial' }} >Supermarkets</h5>\n        <h5 onClick={() => setSliderSelection('Fitness')} style={{ backgroundColor: sliderSelection === 'Fitness' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'Fitness' ? 'bold' : 'initial' }} >Fitness</h5>\n        <h5 onClick={() => setSliderSelection('EVs')} style={{ backgroundColor: sliderSelection === 'EVs' ? 'rgba(255, 167, 229, 1)' : 'initial', fontWeight: sliderSelection === 'EVs' ? 'bold' : 'initial' }} >EVs</h5>\n      </div>\n    </>\n  )\n}\n\nexport default PropertyDetailSlider\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'\nimport NavBar from '../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Footer from '../../tools/Footer'\nimport LifestyleHighlights from './componentHighlights/LifestyleHighlights'\nimport SchoolHighlights from './componentHighlights/SchoolHighlights'\nimport TransportHighlights from './componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from './componentHighlights/NeighbourhoodHighlights'\nimport PropertySummary from './componentHighlights/PropertySummary'\nimport PropertyDetailSlider from './helpers/PropertyDetailSlider'\nimport PrimaryDetails from './componentDetails/PrimaryDetails'\nimport SecondaryDetails from './componentDetails/SecondaryDetails'\nimport WhiteSidebar from '../WhiteSidebar'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport RestaurantDetails from './componentDetails/RestaurantDetails'\nimport FitnessDetails from './componentDetails/FitnessDetails'\nimport SupermarketDetails from './componentDetails/SupermarketDetails'\nimport VariablesPage from '../variableSummaries/VariablesPage'\nimport WhiteComparison from '../comparisonSection/WhiteComparison'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from './componentDetails/EVDetails'\nimport PubDetails from './componentDetails/PubDetails'\n\nconst SinglePropertySummary = () => {\n\n  // ? Section 1: Define states\n  // state for switching page\n  const { postcode } = useParams()\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n  \n  // state for handling moving back between pages\n  const location = useLocation()\n  const [historyStack, setHistoryStack] = useState([])\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('My properties')\n  const [profileDetail, setProfileDetail] = useState('My properties')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for what information is shown\n  const [propertyContent, setPropertyContent] = useState('Property overview')\n\n  // states for opening and closing the sections\n  const [summarySection, setSummarySection] = useState(false)\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants]  = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n\n  // neghbourhood score\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  // slider selection\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  // set state for lisrt of properties\n  const [propertyList, setPropertyList] = useState()\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${postcode}`)\n        console.log('postcode data ->', data)\n        setPostcodes(data)\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPostcodeData()\n  }, [])\n\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          \n          let totalValue = 0\n          data.white_properties.forEach(item => {\n            totalValue += item.price\n          })\n\n          const updatedData = { ...data, total_value: totalValue }\n          setUserData(updatedData)\n          setPropertyList(data.white_properties)\n          console.log('user data ->', updatedData)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n  // extract property information\n  const currentProperty = () => {\n    const matchedProperty = userData.white_properties.find(item => item.postcode === postcode)\n    setPropertyData(matchedProperty)\n    console.log('current-property ->', matchedProperty)\n  }\n\n  // load property data\n  useEffect(() => {\n    if (postcodeData && userData) {\n      currentProperty()\n    }\n  }, [postcodeData, userData])\n\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n  \n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n      if (item.school_type ===  'Independent school') {\n        item.within_catchment =  'N/a'\n      } else if (item.max_distance === 'Check' || item.max_distance === 'Religion' || item.max_distance === null) {\n        item.within_catchment = 'Check'\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n  \n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n      if (item.school_type ===  'Independent school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Check' || item.max_distance === 'Religion' || item.max_distance === null) {\n        item.within_catchment = 'Check'\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n  \n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n  \n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n    \n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n    // extract the key studios\n    const topThreeStudios = []\n  \n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n        \n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s food', 'waitrose', 'aldi', 'lidl', 'sainsbury\\'s', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n    \n    // extract the key studios\n    const topThreeSupermarkets = []\n  \n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.cleansed_name.toLowerCase()) && !uniqueSupermarkets.has(supermarket.cleansed_name)) {\n        topThreeSupermarkets.push(supermarket.cleansed_name)\n        uniqueSupermarkets.add(supermarket.cleansed_name)\n        \n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    console.log('Nearby supermarkets ->', nearbySupermarkets)\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n  \n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n    \n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n  \n  // function for restaurants with least walking distance\n  const getNearbyChargers = () => {\n\n    // Average walking speed is 5km/h. \n    const walkDistanceKm10 = 5 * (10 / 60)\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyChargers = ev.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm10\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n\n    setEv1(nearbyChargers)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (ev) {\n      getNearbyChargers()\n    }\n  }, [ev])\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  \n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n  \n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Calculate a neighbourhood score\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n                                postcodeData[0].ev.percentile +\n                                postcodeData[0].fitness.percentile +\n                                (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n                                postcodeData[0].restaurants.normal_percentile +\n                                postcodeData[0].supermarkets.percentile +\n                                postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n\n\n  // ?Section 12: Other helpful functions\n  // handle moving to the oprevious page\n  // When location changes, add the new location to the history stack\n  useEffect(() => {\n    setHistoryStack((prevStack) => [...prevStack, location.pathname])\n  }, [location])\n\n\n  // To navigate back:\n  const goBack = () => {\n    // Remove the current location from the stack\n    const newStack = [...historyStack]\n    newStack.pop()\n    setHistoryStack(newStack)\n\n    // Get the last location from the new stack\n    const lastLocation = newStack[newStack.length - 1]\n\n    // Navigate to the last location, or to a default location if the stack is empty\n    navigate(lastLocation || '/')\n  }\n\n  useEffect(() => {\n    console.log(`profileContent updated to: ${profileContent}`)\n  }, [profileContent])\n\n  return (\n\n    <>\n      <section className='agent-specific-property print-container' >\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n        />\n        <div className='go-back-button no-print remove-margin'>\n          <h5 onClick={() =>  navigate('/agents/profile')}>&lt;- back to profile</h5>\n        </div>\n        <div className='property-options no-print'>\n          <div className='left-section'>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property overview')} style={{ textDecoration: propertyContent === 'Property overview' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property overview' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property overview' ? '700' : '400' }}>Property overview</h5>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property details')} style={{ textDecoration: propertyContent === 'Property details' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property details' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property details' ? '700' : '400'  }}>Property details</h5>\n          </div>\n          <h1 className='print-button no-print' onClick={() => window.print()}>🖨</h1>\n        </div>\n\n        {propertyContent === 'Property overview' ?\n          <section className='property-wrapper'>\n\n            {propertyData ?\n              <section className='property-details remove-margin'>\n                <img className='property-image' src={propertyData.image} alt='property-image' />\n\n                <div className='property-content'>\n                  <div className='content-blocks'>\n                    <div className='content-summary'>\n                      <div className='content-top-line'>\n                        <h1>{propertyData.name}</h1>\n                        <h1><NumericFormat value={propertyData.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /></h1>\n                      </div>\n                      <h3>{propertyData.address}</h3>\n                    </div>\n                    <div className='content-details'>\n                      <div className='content-details-top'>\n                        <h4>🏠 {propertyData.type}</h4>\n                        <h4>📦 {propertyData.size}</h4>\n                      </div>\n                      <div className='content-details-bottom'>\n                        <h4>🛌 x {propertyData.bedrooms}</h4>\n                        <h4>🛁 x {propertyData.bathrooms}</h4>\n                        <h4>🛋 x {propertyData.living_rooms}</h4>\n                      </div>\n                    </div>\n\n\n                  </div>\n\n\n                </div>\n              </section>\n              : '' }\n\n            <section className='property-summary-sections remove-margin'>\n              <div className='property-highlight' onClick={() => setSummarySection(!summarySection)}>\n                <h3>Property Summary</h3>\n                <div className='click-downs'>\n                  {summarySection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              { postcodeData && summarySection ?\n                <PropertySummary \n                  neighbourhoodScore={neighbourhoodScore}\n                  postcodeData={postcodeData}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School Highlights</h3>\n                <div className='click-downs'>\n                  {schoolSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n\n              {schoolSection ? \n                <SchoolHighlights \n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle Highlights</h3>\n                <div className='click-downs'>\n                  {lifestyleSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {lifestyleSection ? \n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport Highlights</h3>\n                <div className='click-downs'>\n                  {transportSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {transportSection ? \n                <TransportHighlights \n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                />\n                : '' }\n\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhood Highlights</h3>\n                <div className='click-downs'>\n                  {neighbourhoodSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {neighbourhoodSection ? \n                <NeighbourhoodHighlights \n                  postcodeData={postcodeData}\n                />\n                : '' }\n\n            </section>\n\n          </section>\n\n          : propertyContent === 'Property details' ?\n            <section className='property-wrapper'>\n              <PropertyDetailSlider \n                sliderSelection={sliderSelection}\n                setSliderSelection={setSliderSelection}\n              />\n\n              {sliderSelection === 'Primary schools' ? \n                <PrimaryDetails\n                  primaryData1={primaryData1}\n                  setPrimaryData1={setPrimaryData1}\n                  propertyData={propertyData}\n                  listType={'short list'}\n                  postcodeData={postcodeData}\n                />\n\n                : sliderSelection === 'Secondary schools' ?\n                  <SecondaryDetails\n                    secondaryData1={secondaryData1}\n                    setSecondaryData1={setSecondaryData1}\n                    propertyData={propertyData}\n                    listType={'short list'}\n                    postcodeData={postcodeData}\n                  />\n              \n                  : sliderSelection === 'Restaurants' ?\n                    <RestaurantDetails\n                      restaurants1={restaurants1}\n                      setRestaurants1={setRestaurants1}\n                      propertyData={propertyData}\n                      listType={'short list'}\n                      postcodeData={postcodeData}\n                    />\n              \n                    : sliderSelection === 'Fitness' ?\n                      <FitnessDetails\n                        gyms1={gyms1}\n                        setGyms1={setGyms1}\n                        propertyData={propertyData}\n                        listType={'short list'}\n                        postcodeData={postcodeData}\n                      />\n              \n                      : sliderSelection === 'Supermarkets' ?\n                        <SupermarketDetails\n                          supermarkets1={supermarkets1}\n                          setSupermarkets1={setSupermarkets1}\n                          propertyData={propertyData}\n                          listType={'short list'}\n                          postcodeData={postcodeData}\n                        />\n              \n                        : sliderSelection === 'EVs' ?\n                          <EVDetails\n                            ev1={ev1}\n                            setEv1={setEv1}\n                            propertyData={propertyData}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                          />\n              \n                          : sliderSelection === 'Pubs' ?\n                            <PubDetails\n                              pubs1={pubs1}\n                              setPubs1={setPubs1}\n                              propertyData={propertyData}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                            />\n                            : '' }\n                \n            </section>\n            : propertyContent === 'Variables' ?\n              <>\n                <VariablesPage \n                  profileDetail={profileDetail}  \n                  setProfileDetail={setProfileDetail}\n                  profileContent={profileContent}\n                />\n    \n  \n          \n              </>\n              : profileContent === 'Comparison' ?\n\n                <>\n                  <WhiteComparison\n                    userData={userData}\n                    propertyList={propertyList}\n\n                  />\n             \n                </>\n\n                : '' \n\n        }\n\n\n      </section>\n    </>\n  )\n\n\n}\n\nexport default SinglePropertySummary","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  }\n  // Binding \"this\" is important for shallow renderer support.\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(\n      prevProps,\n      prevState\n    );\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n}\n\n// React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (\n    typeof Component.getDerivedStateFromProps !== 'function' &&\n    typeof prototype.getSnapshotBeforeUpdate !== 'function'\n  ) {\n    return Component;\n  }\n\n  // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n  if (\n    foundWillMountName !== null ||\n    foundWillReceivePropsName !== null ||\n    foundWillUpdateName !== null\n  ) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName =\n      typeof Component.getDerivedStateFromProps === 'function'\n        ? 'getDerivedStateFromProps()'\n        : 'getSnapshotBeforeUpdate()';\n\n    throw Error(\n      'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' +\n        componentName +\n        ' uses ' +\n        newApiName +\n        ' but also contains the following legacy lifecycles:' +\n        (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') +\n        (foundWillReceivePropsName !== null\n          ? '\\n  ' + foundWillReceivePropsName\n          : '') +\n        (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') +\n        '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' +\n        'https://fb.me/react-async-component-lifecycle-hooks'\n    );\n  }\n\n  // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  }\n\n  // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error(\n        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'\n      );\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(\n      prevProps,\n      prevState,\n      maybeSnapshot\n    ) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag\n        ? this.__reactInternalSnapshot\n        : maybeSnapshot;\n\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };\n"],"names":["restaurants1","cuisines","topRestaurants","gyms1","mainGyms","supermarkets1","mainSupermarkets","pubs1","topPubs","errors","setErrors","useState","className","length","topPrimaries","topSecondaries","navigate","useNavigate","id","map","item","index","onClick","school_name","ofsted_results","within_catchment","walkTimeMin","postcodeData","tubes1","station_name","ev","ev_10_mins","Math","round","percentile","parks_lsoa","london_percentile","parks_postcode","park_name0","ceil","distance0","crime","area_specific_percentile","borough","neighbourhoodScore","data","name","value","COLORS","greenspaceData","restaurantData","restaurants","normal_percentile","crimeData","tubeData","tubes","secondariesData","secondaries","total_score_percentile","PieChart","width","height","Pie","cx","cy","innerRadius","outerRadius","fill","paddingAngle","dataKey","startAngle","entry","Cell","endAngle","Label","position","fontSize","fontWeight","reverse","sliderSelection","setSliderSelection","style","backgroundColor","postcode","useParams","location","useLocation","historyStack","setHistoryStack","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","setPostcodes","userData","setUserData","propertyData","setPropertyData","propertyContent","setPropertyContent","summarySection","setSummarySection","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","primaryData","setPrimaryData","primaryData1","setPrimaryData1","secondaryData","setSecondaryData","secondaryData1","setSecondaryData1","setTopPrimaries","setTopSecondaries","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","setEv","setRestaurants1","setGyms1","setPubs1","setSupermarkets1","ev1","setEv1","setCuisines","setTopRestaurants","setTopPubs","setMainGyms","setMainSupermarkets","setTubes","setTubes1","setNeighbourhoodScore","propertyList","setPropertyList","useEffect","async","axios","console","log","getPostcode","error","loadPostcodeData","isUserAuth","getUserToken","headers","Authorization","getAccessToken","totalValue","white_properties","forEach","price","updatedData","total_value","getUser","loadUserData","matchedProperty","find","currentProperty","getPrimaries","loadPrimaryData","walkDistanceKm20","R","toRad","PI","kmPerMinute","nearbyPrimaries","filter","dLat","parseFloat","latitude","longitude","dLon","a","sin","cos","c","atan2","sqrt","distanceKm","distance_between","distancePercent","max_distance","school_type","sort","b","firstSchoolNames","slice","getNearbyPrimaries","getSecondaries","loadSecondaryData","nearbySecondaries","getNearbySecondaries","getData","loadRestaurantData","walkDistanceKm15","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","restaurant_name","Set","size","countUniqueCuisines","getNearbyRestaurants","loadFitnessData","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","gym","gym_group","includes","toLowerCase","has","push","add","getNearbyStudios","loadSupermarketData","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","cleansed_name","getNearbySupermatkets","loadTubesData","nearbyTubes","lat","getNearbyTubes","loadEVdata","nearbyChargers","getNearbyChargers","loadPubsData","nearbyPubs","topThreePubs","pub","getNearbyPubs","calculation","fitness","calculateScore","prevStack","pathname","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","textDecoration","textUnderlineOffset","window","print","src","image","alt","displayType","thousandSeparator","prefix","address","type","bedrooms","bathrooms","living_rooms","PrimaryDetails","listType","SecondaryDetails","RestaurantDetails","FitnessDetails","SupermarketDetails","EVDetails","PubDetails","VariablesPage","WhiteComparison","componentWillMount","state","this","constructor","getDerivedStateFromProps","props","undefined","setState","componentWillReceiveProps","nextProps","prevState","bind","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","polyfill","Component","prototype","isReactComponent","Error","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","newApiName","componentDidUpdate","maybeSnapshot","snapshot","call","__suppressDeprecationWarning"],"sourceRoot":""}