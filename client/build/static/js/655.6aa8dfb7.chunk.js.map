{"version":3,"file":"static/js/655.6aa8dfb7.chunk.js","mappings":"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","sources":["components/helpers/modals/AgentSignup.js","components/helpers/modals/AgentSubmitted.js","components/AgentsLanding.js","components/tools/Footer.js","components/tools/NavBar.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { isEmail, isLength, matches } from 'validator'\nimport axios from 'axios'\n\n\n\n\n\nconst AgentSignup = ({ agentShow, handleAgentClose, handleAgentShow, submitError, handleChange, handleSubmit, agentSubmitted }) => {\n\n\n\n\n  return (\n    <>\n      {/* <section className=\"waitlist-wrapper\"> */}\n      <Modal show={agentShow} onHide={handleAgentClose} backdrop='static' className='agent-modal'>\n        <Modal.Body>\n          <>          \n            <div className='header-section'>\n              <h3>üìù Share some details so we can contact you</h3>\n              <h3 className='close-button' onClick={handleAgentClose}>x</h3>\n            </div>\n            <div className='body-section'>\n              <div className='body-row'>\n                <h4>Name</h4>\n                <input name='name' onChange={handleChange}></input>\n                {submitError.name && <p className=\"error\">* {submitError.name}</p>}\n\n              </div>\n              <div className='body-row'>\n                <h4>Email</h4>\n                <input name='email' onChange={handleChange}></input>\n                {submitError.email && <p className=\"error\">* {submitError.email}</p>}\n\n              </div>\n              <div className='body-row'>\n                <h4>Company</h4>\n                <input name='company' onChange={handleChange}></input>\n                {submitError.company && <p className=\"error\">* {submitError.company}</p>}\n\n              </div>\n              <div className='body-row'>\n                <h4>Position</h4>\n                <input name='position' onChange={handleChange}></input>\n                {submitError.position && <p className=\"error\">* {submitError.position}</p>}\n\n              </div>\n            </div>\n            <button className='waitlist-close' onClick={handleSubmit}>Submit</button>\n            {submitError.post && <p className=\"error\" id='submit'>* {submitError.post}</p>}\n          </>\n\n        </Modal.Body>\n      </Modal>\n      {/* </section> */}\n    </>\n  )\n}\n\nexport default AgentSignup","import React, { useState, useEffect, useRef } from 'react'\nimport { Modal } from 'react-bootstrap'\nimport { isEmail, isLength, matches } from 'validator'\nimport axios from 'axios'\n\n\nconst AgentSubmitted = ({ handleSubmitClose, handleSubmitShow, agentSubmittedShow }) => {\n\n\n  return (\n\n    <>\n      <Modal show={agentSubmittedShow} onHide={handleSubmitClose} backdrop='static' className='agent-success-modal'>\n        <Modal.Body>\n\n          <div className='agent-signed-up'>\n            <h3>ü§ù thanks, we&apos;ll be in touch soon to discuss</h3>\n            <button className='waitlist-close' onClick={handleSubmitClose}>Close</button>\n          </div>\n        </Modal.Body>\n\n      </Modal>\n    </>\n  )\n}\n\nexport default AgentSubmitted","import Footer from './tools/Footer'\nimport NavBar from './tools/NavBar'\nimport axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport { isEmail, isLength, matches } from 'validator'\nimport AgentSignup from './helpers/modals/AgentSignup'\nimport AgentSubmitted from './helpers/modals/AgentSubmitted'\nimport ReactGA from 'react-ga'\n\n\n\nconst AgentsHome = () => {\n\n\n  // track page view with google analytics\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname)\n  }, [])\n\n  // state for errors\n  const [errors, setErrors] = useState(false)\n\n  // state for submitting\n  const [agentSubmitted, setAgentSubmitted] = useState(false)\n\n  // set the state for the waitlist signup data capture\n  const [agentData, setAgentData] = useState({\n    email: '',\n    name: '',\n    company: '',\n  })\n  \n  const [submitError, setSubmitError] = useState({\n    email: '',\n    name: '',\n    company: '',\n    position: '',\n    post: '',\n  })\n  \n  // set state if email is valid\n  const [validEmail, setValidEmail] = useState(false)\n  \n  // determine whether the waitlist email entered is valid\n  \n  // update registration data\n  const handleChange = (e) => {\n    setAgentData({ ...agentData, [e.target.name]: e.target.value })\n    if (e.target.name === 'name') {\n      if (e.target.value.length < 1) {\n        setSubmitError({ ...submitError, name: 'Add name' })\n      } else {\n        setSubmitError({ ...submitError, name: '' })\n      }\n  \n    } else if (e.target.name === 'email') {\n      if (!isEmail(agentData.email)) {\n        setSubmitError({ ...submitError, email: 'Invalid email address' })\n      } else {\n        setSubmitError({ ...submitError, email: '' })\n      }\n    \n    } else if (e.target.name === 'company') {\n      if (e.target.value.length < 1) {\n        setSubmitError({ ...submitError, company: 'Add company' })\n      } else {\n        setSubmitError({ ...submitError, company: '' })\n      }\n    \n    } else if (e.target.name === 'position') {\n      if (e.target.value.length < 1) {\n        setSubmitError({ ...submitError, position: 'Add position' })\n      } else {\n        setSubmitError({ ...submitError, position: '' })\n      }\n    } \n  }\n  \n  // submit email address to waitlist\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/agentsignup/', agentData)\n      handleAgentClose()\n      setAgentSubmitted(true)\n      handleSubmitShow()\n      setAgentData(false)\n    } catch (err) {\n      setSubmitError({ ...submitError, post: 'Make sure you\\'ve populated all fields before you submit' })\n    }\n  \n  }\n  \n\n  // manageing the modal pop up for property search\n  const [agentShow, setAgentShow] = useState(false)\n\n  // close modal\n  const handleAgentClose = () => {\n    setAgentShow(false)\n    setSubmitError(false)\n    setAgentSubmitted(false)\n    setAgentData(false)\n  }\n\n  // show the modal\n  const handleAgentShow = (e) => {\n    setAgentSubmitted(false)\n    setAgentShow(true)\n  }\n\n  // manageing modal for submitted \n  const [agentSubmittedShow, setAgentSubmittedShow] = useState(false)\n\n  // close modal\n  const handleSubmitClose = () => {\n    setAgentSubmittedShow(false)\n    setSubmitError(false)\n    setAgentSubmitted(false)\n  }\n  \n  // show the modal\n  const handleSubmitShow = (e) => {\n    setAgentSubmittedShow(true)\n  }\n\n\n\n  return (\n\n    <>\n      <section className='homepage-wrapper'>\n        <section className='agents-home'>\n          <NavBar />\n          <section className='agent-top-section'>\n            <h3>Wittle sales companion. Loved by estate agents.</h3>\n            <h1>Impress your customers and supercharge your property sales</h1>\n            <h5>In one click, get access to all the information you need to deliver exceptional value to your customers and increase your sales.</h5>\n            <button className='agent-access' onClick={handleAgentShow}>Get early access for free</button>\n            <AgentSignup \n              agentShow={agentShow}\n              handleAgentClose={handleAgentClose}\n              handleAgentShow={handleAgentShow}\n              submitError={submitError}\n              handleChange={handleChange}\n              handleSubmit={handleSubmit}\n              agentSubmitted={agentSubmitted}\n              handleSubmitShow={handleSubmitShow}\n            />\n            <AgentSubmitted\n              handleSubmitClose={handleSubmitClose}\n              agentSubmittedShow={agentSubmittedShow}\n              handleSubmitShow={handleSubmitShow}\n            />\n\n          </section>\n          <section className='agent-image-section'>\n            <div className='agent-portal-image' id='agent1'></div>\n            <div className='agent-portal-image' id='agent2'></div>\n            <div className='agent-portal-image' id='agent3'></div>\n          </section>\n          <section className='agent-detail-section'>\n            <div className='agent-summary'>\n              <h3>In seconds, get access to 40,000 data points which are converted to usable insights, giving you what you need for quality sales conversations that help you stand out from the crowd.</h3>\n            </div>\n            <div className='agent-summary-stats'>\n              <div className='summary-row' id='row1'>\n                <div className='summary-box'>\n                  <div className='summary-icon' id='icon1'></div>\n                  <h3>Summarise properties</h3>\n                  <p>Get a summary of everything there is to know about a property across 20+ variables.</p>\n                </div>\n                <div className='summary-box'>\n                  <div className='summary-icon' id='icon2'></div>\n                  <h3>Get detailed insights</h3>\n                  <p>Drill down into each variable to understand more.</p>\n                </div>\n              </div>\n              <div className='summary-row' id='row2'>\n                <div className='summary-box'>\n                  <div className='summary-icon' id='icon3'></div>\n                  <h3>Compare performance</h3>\n                  <p>See how the property or local area compares to other properties and areas in London.</p>\n                </div>\n                <div className='summary-box'>\n                  <div className='summary-icon' id='icon4'></div>\n                  <h3>Customise views</h3>\n                  <p>Create customised summaries of properties based on the things your clients care about the most.</p>\n                </div>\n              </div>\n              <div className='summary-row' id='row3'>\n                <div className='summary-box'>\n                  <div className='summary-icon' id='icon5'></div>\n                  <h3>Enable better conversations</h3>\n                  <p>Unlock the ability for every agent to have a high quality conversation with every potential customer.</p>\n                </div>\n                <div className='summary-box'>\n                  <div className='summary-icon' id='icon6'></div>\n                  <h3>Generate efficiencies</h3>\n                  <p>Spend less time researching and more time having effective conversations.</p>\n                </div>\n              </div>\n\n            </div>\n          </section>\n          <section className='agent-bottom'>\n            <button className='agent-access' onClick={handleAgentShow}>Get early access for free</button>\n\n          </section>\n          <Footer \n            textColour={'#051885'}\n          />\n        </section>\n      </section>\n\n    </>\n  )\n}\n\nexport default AgentsHome","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright ¬© Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst NavBar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  const responseMessage = (response) => {\n    console.log(response)\n  }\n\n  const errorMessage = (error) => {\n    console.log(error)\n  }\n\n\n  // post google information for authentication\n  const googleLogin = async (response) => {\n    try {\n      // await axios.post('/api/auth/google/', registerData)\n      const auth = { 'auth_token': response.credential }\n      console.log(auth)\n      const { data } = await axios.post('/api/auth/google/', {\n        body: JSON.stringify(auth),\n      })\n      console.log(data)\n    } catch (err) {\n      setErrors(err)\n      console.log(err)\n      console.log(err.response.data)\n    }\n  }\n\n  return (\n    <>\n      <section className='nav-section' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n          <h4 onClick={() => navigate('/agents')} className='agent-button'>For agents</h4>\n          <h4 onClick={() => navigate('/blogs/school-search-simplified')} className='agent-button'>Insights</h4>\n        </div>\n        <div className='menu-container' onClick={handleMenuShow}>\n          <div className=\"menu-trigger\">\n            <span>\n              <div className='burger-icon'>\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n              </div>\n            </span>\n          </div>\n        </div>\n        <button className='agent-login'>Agent login</button>\n      </section>\n      <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      />\n    </>\n  )\n\n}\n\nexport default NavBar"],"names":["agentShow","handleAgentClose","handleAgentShow","submitError","handleChange","handleSubmit","agentSubmitted","Modal","show","onHide","backdrop","className","onClick","name","onChange","email","company","position","post","id","handleSubmitClose","handleSubmitShow","agentSubmittedShow","useEffect","ReactGA","window","location","pathname","errors","setErrors","useState","setAgentSubmitted","agentData","setAgentData","setSubmitError","validEmail","setValidEmail","setAgentShow","e","setAgentSubmittedShow","NavBar","target","value","length","isEmail","async","preventDefault","data","axios","err","Footer","textColour","pageType","style","color","navbarColour","navigate","useNavigate","isActive","setIsActive","useRef","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","backgroundColor","handleMenuClose","removeItemFromStorage","token","localStorage","removeItem","reload"],"sourceRoot":""}