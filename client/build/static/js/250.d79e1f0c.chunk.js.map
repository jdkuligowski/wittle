{"version":3,"file":"static/js/250.d79e1f0c.chunk.js","mappings":"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","sources":["components/whiteLabel/LandingPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\n\nimport NavBar from '../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken\n} from '../auth/Auth'\nimport Footer from '../tools/Footer'\nimport { NumericFormat } from 'react-number-format'\nimport WhiteSidebar from './WhiteSidebar'\nimport WhiteNavbar from '../tools/WhiteNavbar'\nimport VariablesPage from './variableSummaries/VariablesPage'\nimport WhiteComparison from './comparisonSection/WhiteComparison'\nimport NavBarRevised from '../tools/NavBarRevised'\n\n\n\n\n\nconst LandingPage = () => {\n\n  // ? Section 1: Define states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for handling locations\n  const location = useLocation()\n  const [historyStack, setHistoryStack] = useState([])\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('My properties')\n  const [profileDetail, setProfileDetail] = useState('My properties')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n  // searchbar state\n  const [searchQuery, setSearchQuery] = useState('')\n  const [statusFilter, setStatusFilter] = useState('')\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n\n  // set state for lisrt of properties\n  const [propertyList, setPropertyList] = useState()\n\n  // Set state for the total value of properties\n  const [propertyValueSum, setPropertyValueSum] = useState(0)\n\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setPropertyList(data.white_properties)\n\n          // Calculate the total value of properties in millions\n          const totalValue = data.white_properties.reduce((acc, property) => acc + property.price, 0) / 1000000\n          setPropertyValueSum(totalValue.toFixed(1))\n\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n    console.log('carrying out userData load')\n  }, [])\n\n\n  // ? Section3: Other useful functions\n  const sortByField = (field) => {\n    setSortField(field)\n  }\n\n\n\n  return (\n    <>\n      \n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n        />\n        {/* {profileContent === 'My properties' ? */}\n        <>\n          <section className='profile-summary'>\n            <div className='welcome'>\n              {userData ? <h1>👋 Welcome back {userData.first_name}!</h1> : ''}\n            </div>\n            <div className='summary-boxes'>\n              <div className='summary-box'>\n                {userData ?\n                  <>\n                    <h1>{userData.white_properties.length}</h1>\n                    <h5>Properties under management</h5>\n                  </>\n                  : ''}\n              </div>\n              <div className='summary-box'>\n                {userData ?\n                  <>\n                    <h1>£<NumericFormat value={propertyValueSum} displayType={'text'} thousandSeparator={true} prefix={''} />m</h1>\n                    <h5>Properties under management</h5>\n                  </>\n                  : ''}\n              </div>\n              <div className='summary-box'>\n                <h1>36</h1>\n                <h5>Properties sold</h5>\n              </div>\n            </div>\n\n          </section>\n          \n          <section className='profile-property-list'>\n            <div className='search-section'>\n              <div className='search-section-left'>\n                <h3>Search</h3>\n                <input value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} placeholder='Type property name'></input>\n              </div>\n              <div className='search-section-right'>\n                <h3>Status</h3>\n                <input value={statusFilter} onChange={(e) => setStatusFilter(e.target.value)} placeholder='All'></input>\n              </div>\n            </div>\n            <div className='agent-property-list'>\n              <div className='property-block'>\n                <div className='property-table-headers'>\n                  <h5 id='column1'></h5>\n                  <div id='column2' className='sort-section'>\n                    <h5>Street name</h5>\n                    <h5 className='sort' onClick={() => sortByField('name')}>↕️</h5>\n                  </div>                    \n                  <div id='column3' className='sort-section'>\n                    <h5>Price</h5>\n                    <h5 className='sort' onClick={() => sortByField('price')}>↕️</h5>\n                  </div>\n                  <h5 id='column4'>Status</h5>\n                  <div id='column5' className='sort-section'>\n                    <h5>Date added</h5>\n                    <h5 className='sort' onClick={() => sortByField('date')}>↕️</h5>\n                  </div>\n                  <h5 id='column5'>Action</h5>\n                </div>\n                <div className='property-table-details'>\n                  {userData && userData.white_properties ? userData.white_properties\n                    .filter((item) => item.name.toLowerCase().includes(searchQuery.toLowerCase()))\n                    // .filter((item) => item.status.toLowerCase().includes(statusFilter.toLowerCase()))\n                    .sort((a, b) => {\n                      if (sortField === 'name') {\n                        return a.name.localeCompare(b.name)\n                      } else if (sortField === 'price') {\n                        return a.price - b.price\n                      } else if (sortField === 'date') {\n                        return new Date(a.date) - new Date(b.date) // This works if your date is in format 'YYYY/MM/DD'\n                      }\n                      return 0\n                    })\n                    .map((item, index) => {\n                      return (\n                        <>\n                          <div className='property-content' key={index}>\n                            <div className='column' id='column1'>\n                              <div className='property-image' style={{ backgroundImage: `url(${item.image})` }}></div>\n                            </div>\n                            <div className='column' id='column2'>\n                              <h5>{item.name}</h5>\n                            </div>\n                            <div className='column' id='column3'>\n\n                              <h5><NumericFormat value={item.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /></h5>\n                            </div>\n                            <div className='column' id='column4'>\n                              <h5>{item.status}</h5>\n                            </div>\n                            <div className='column' id='column5'>\n                              <h5>2023/06/18</h5>\n                            </div>\n                            <div className='column' id='column6'>\n                              <button onClick={() => navigate(`/agents/property/${item.postcode}`)}>View</button>\n                            </div>\n                          </div>\n                          <hr className='property-divider' />\n                        </>\n                      )\n                    })\n                    : ''}\n                </div>\n              </div>\n\n            </div>\n          </section>\n        </>\n      </section>\n\n    </>\n  )\n}\n\nexport default LandingPage"],"names":["navigate","useNavigate","historyStack","setHistoryStack","useLocation","useState","userData","setUserData","errors","setErrors","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","searchQuery","setSearchQuery","statusFilter","setStatusFilter","sortField","setSortField","propertyList","setPropertyList","propertyValueSum","setPropertyValueSum","useEffect","isUserAuth","async","data","axios","getUserToken","headers","Authorization","getAccessToken","console","log","white_properties","totalValue","reduce","acc","property","price","toFixed","getUser","error","loadUserData","sortByField","field","className","navbarColour","first_name","length","value","displayType","thousandSeparator","prefix","onChange","e","target","placeholder","id","onClick","filter","item","name","toLowerCase","includes","sort","a","b","localeCompare","Date","date","map","index","style","backgroundImage","image","status","postcode"],"sourceRoot":""}