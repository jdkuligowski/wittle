{"version":3,"file":"static/js/649.91a71007.chunk.js","mappings":"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","sources":["components/auth/Login.js","components/tools/NavBar.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport { isEmail, isLength, matches } from 'validator'\nimport NavBar from '../tools/NavBar'\n\n\n\n\nconst Login = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    password: '',\n    account: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n\n    if (errors.email || errors.password) {\n      return\n    }\n\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      navigate('/agents/profile')\n    } catch (error) {\n      // Here you should handle the error returned by your API when account does not exist\n      // Assuming your API returns a response with error details in error.response.data\n      const errorData = error.response.data.detail\n      if (errorData && errorData === 'Invalid credentials') { // change this condition based on your API response\n        setErrors({ ...errors, account: 'Account not found' })\n      }\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    let error = ''\n\n    if (name === 'email' && !isEmail(value)) {\n      error = 'Invalid email address'\n    } else if (name === 'password') {\n      error = validatePassword(value)\n    }\n\n    setRegisterData({ ...registerData, [name]: value })\n    setErrors({ ...errors, [name]: error })\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n\n  return (\n    <>\n      <NavBar\n        navbarColour='#051885'\n      />\n\n      <section className='login-page'>\n        <section className='login-content'>\n          <section className='form-section'>\n            <form className='form-detail' onSubmit={handleSubmit}>\n\n              <h1>Sign in to Wittle</h1>\n              {/* Email */}\n\n              <p>Email address</p>\n              <input type='email' name='email' className='input' value={registerData.email} onChange={handleChange} />\n              {errors.email && <p className=\"error\">* {errors.email}</p>}\n              {/* Password */}\n              <p>Password</p>\n              <div className='login-input'>\n\n                <input type={loginPasswordType} name='password' className='password-input' value={registerData.password} onChange={handleChange} />\n\n                <div className='password-icon-container' onClick={passwordReveal}>\n                  <div className='password-icon'></div>\n                </div>\n              </div>\n              {errors.password && <p className=\"error\">* {errors.password}</p>}\n\n\n              {/* Submit */}\n              <button className='sign-up' type='submit'>Sign in</button>\n              {errors.account && <p className=\"error\" id='account'>* {errors.account}</p>}\n\n            </form>\n          </section>\n          <h5>Forgotten your login details? <Link to={'/password-reset-request/'}>\n            <span>Request reset</span></Link> </h5>\n        </section>\n      </section>\n    </>\n  )\n}\n\nexport default Login\n","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst NavBar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  const responseMessage = (response) => {\n    console.log(response)\n  }\n\n  const errorMessage = (error) => {\n    console.log(error)\n  }\n\n\n  // post google information for authentication\n  const googleLogin = async (response) => {\n    try {\n      // await axios.post('/api/auth/google/', registerData)\n      const auth = { 'auth_token': response.credential }\n      console.log(auth)\n      const { data } = await axios.post('/api/auth/google/', {\n        body: JSON.stringify(auth),\n      })\n      console.log(data)\n    } catch (err) {\n      setErrors(err)\n      console.log(err)\n      console.log(err.response.data)\n    }\n  }\n\n  return (\n    <>\n      <section className='nav-section' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n          <h4 onClick={() => navigate('/agents')} className='agent-button'>For agents</h4>\n          <h4 onClick={() => navigate('/blogs/school-search-simplified')} className='agent-button'>Insights</h4>\n        </div>\n        <div className='menu-container' onClick={handleMenuShow}>\n          <div className=\"menu-trigger\">\n            <span>\n              <div className='burger-icon'>\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n              </div>\n            </span>\n          </div>\n        </div>\n        <button className='agent-login'>Agent login</button>\n      </section>\n      <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      />\n    </>\n  )\n\n}\n\nexport default NavBar"],"names":["navigate","useNavigate","errors","setErrors","useState","email","password","account","handleChange","e","name","value","target","error","isEmail","validatePassword","setRegisterData","registerData","loginPasswordType","setLoginPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","hasUppercase","matches","hasLowercase","hasDigit","hasSpecialChar","isLength","min","navbarColour","className","onSubmit","async","token","preventDefault","data","axios","window","localStorage","setItem","errorData","response","detail","type","onChange","onClick","id","to","isActive","setIsActive","useRef","passwordConfirmation","registerPasswordType","setRegisterPasswordType","style","backgroundColor","handleMenuClose","removeItemFromStorage","removeItem","location","reload"],"sourceRoot":""}