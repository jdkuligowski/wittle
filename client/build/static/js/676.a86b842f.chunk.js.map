{"version":3,"file":"static/js/676.a86b842f.chunk.js","mappings":"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","sources":["components/helpers/modals/LivingSignup.js","components/Home.js","components/tools/Footer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport 'react-slideshow-image/dist/styles.css'\nimport { Slide } from 'react-slideshow-image'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { NumericFormat } from 'react-number-format'\nimport { getUserToken, getAccessToken, isUserAuth } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport ReactSwitch from 'react-switch'\nimport { isEmail, isLength, matches } from 'validator'\nimport AutoCompleteSearch from '../../tools/AutoCompleteSearch'\n\n\nconst LivingSignup = ({ livingRegisterShow, handleLivingRegisterClose, loadUserData, setComplete2 }) => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to determine which page of the flow we're on\n  const [formFlow, setFormFlow] = useState('Page 1')\n\n  // state to identify whether user is already a member\n  const [member, setMember] = useState(0)\n\n  // inputs for function in autocomplete\n  const [lifestyleLong, setLifestyleLong] = useState()\n  const [lifestyleLat, setLifestyleLat] = useState()\n  const [loading, setLoading] = useState()\n  const [click, setClick] = useState()\n  const [viewport, setViewport] = useState()\n\n  // ? Section 1: Log in and register functions\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // update registration data\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value, email: userEmail.email_address })\n    if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'email') {\n      if (!isEmail(registerData.email)) {\n        setRegisterError({ ...registerError, email: 'Invalid email address' })\n      } else {\n        setRegisterError({ ...registerError, email: '' })\n      }\n  \n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      setRegisterData()\n      setFormFlow('Page 3')\n    } catch (err) {\n      setRegisterError({ ...registerError, post: err.response.statusText })\n      console.log(err.response.statusText)\n    }\n  }\n\n  // submit login\n  const loginSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      window.localStorage.setItem('wittle-email', data.email)\n      console.log('username ->', data.username)\n      setFormFlow('Page 3')\n    } catch (err) {\n      setRegisterError({ ...registerError, post: err.response.statusText })\n      console.log(err.response.statusText)\n    }\n  }\n\n  \n  // ? Section 3: Contains functions that allow users to change the form\n  // user email\n  const [userEmail, setUserEmail] = useState({\n    email_address: '',\n    long: '',\n    lat: '',\n    email_confirmation: 0,\n  })\n\n  // user email errors\n  const [userErrors, setUserErrors] = useState({\n    email_address: '',\n    address: '',\n    post: '',\n  })\n\n  // wittle living inputs form\n  const [livingData, setLivingData] = useState({\n    email_address: null,\n    long: null,\n    lat: null,\n    email_status: 0,\n    subscription_type: 1,\n    admin_status: 0,\n    lifestyle_status: 0,\n    property_status: 0,\n    mortgage_status: 0,\n    mortgage_provider: '',\n    mortgage_value: null,\n    mortgage_date: null,\n    boiler_status: 0,\n    boiler_provider: '',\n    boiler_value: null,\n    boiler_date: null,\n    insurance_status: 0,\n    insurance_provider: '',\n    insurance_value: null,\n    insurance_date: null,\n    energy_status: 0,\n    energy_detail: 1,\n    energy_provider: '',\n    energy_value: null,\n    energy_date: null,\n    gas_provider: '',\n    gas_value: null,\n    gas_date: null,\n    electric_provider: '',\n    electric_value: null,\n    electric_date: null,\n    council_tax_status: 0,\n    council_tax_value: null,\n    council_tax_date: null,\n    broadband_status: 0,\n    broadband_provider: '',\n    broadband_value: null,\n    broadband_date: null,\n    sky_status: 0,\n    sky_provider: '',\n    sky_value: null,\n    sky_date: null,\n    netflix_status: 0,\n    netflix_value: null,\n    netflix_date: null,\n    amazon_status: 0,\n    amazon_value: null,\n    amazon_date: null,\n    disney_status: 0,\n    disney_value: null,\n    disney_date: null,\n    apple_status: 0,\n    apple_value: null,\n    apple_date: null,\n    tv_status: 0,\n    tv_value: null,\n    tv_date: null,\n    phone_status: 0,\n    phone_provider: '',\n    phone_value: null,\n    phone_date: null,\n    gym_status: 0,\n    gym_provider: '',\n    gym_value: null,\n    gym_date: null,\n    other_status_1: 0,\n    other_type_1: '',\n    other_provider_1: '',\n    other_value_1: null,\n    other_date_1: null,\n    other_status_2: 0,\n    other_type_2: '',\n    other_provider_2: '',\n    other_value_2: null,\n    other_date_2: null,\n    other_status_3: 0,\n    other_type_3: '',\n    other_provider_3: '',\n    other_value_3: null,\n    other_date_3: null,\n  })\n\n\n  // function to update data based on email address\n  const emailChange = (e) => {\n    setUserEmail({ ...userEmail, email_address: e.target.value })\n    setLivingData({ ...livingData, email_address: e.target.value })\n    setRegisterData({ ...registerData, email: e.target.value })\n  }\n\n  // function to update data based on checkbox\n  const checkboxChange = (e) => {\n    if (userEmail.email_confirmation === 0) {\n      setUserEmail({ ...userEmail, email_confirmation: 1 })\n      setLivingData({ ...livingData, email_status: 1 })\n    } else if (userEmail.email_confirmation === 1) {\n      setUserEmail({ ...userEmail, email_confirmation: 0 })\n      setLivingData({ ...livingData, email_status: 0 })\n    }\n  }\n\n  // function for toggling login and register info\n  const memberCheck = () => {\n    if (member === 0) {\n      setMember(1)\n    } else if (member === 1) {\n      setMember(0)\n    }\n  }\n\n\n  // ? Section 4: Functions to post form to the database\n  // functoin to change the page from 1 to 2 and push form to database\n  const firstSubmit = async (e) => {\n    if (!isEmail(userEmail.email_address)) {\n      setUserErrors({ ...userErrors, email_address: 'Invalid email address' })\n    } else if (userEmail.lat === '' || userEmail.lat === undefined) {\n      setUserErrors({ ...userErrors, email_address: '' })\n      setUserErrors({ ...userErrors, address: 'Enter valid address' })\n    } else {\n      try {\n        const { data } = await axios.post('/api/emails/', userEmail)\n        console.log('email-data ->', data)\n        setFormFlow('Page 2')\n      } catch (err) {\n        console.log(err)\n        setUserErrors({ ...userErrors, email_address: 'Living account with this email already exists' })\n      }\n    }\n  }\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // toggle for admin\n  const adminToggle = () => {\n    if (livingData.admin_status === 0) {\n      setLivingData({ ...livingData, admin_status: 1 })\n    } else {\n      setLivingData({ ...livingData, admin_status: 0 })\n    }\n  }\n\n  // toggle for lifestyle\n  const lifestyleToggle = () => {\n    if (livingData.lifestyle_status === 0) {\n      setLivingData({ ...livingData, lifestyle_status: 1 })\n    } else {\n      setLivingData({ ...livingData, lifestyle_status: 0 })\n    }\n  }\n\n  // toggle for property market\n  const marketToggle = () => {\n    if (livingData.property_status === 0) {\n      setLivingData({ ...livingData, property_status: 1 })\n    } else {\n      setLivingData({ ...livingData, property_status: 0 })\n    }\n  }\n\n\n  // submit registration form\n  const livingSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/living/', livingData, {\n        headers: {\n          Authorization: `Bearer ${getAccessToken()}`,\n        },\n      })\n      window.localStorage.setItem('wittle-living-data', data)\n      console.log('wittle living info ->', data)\n      navigate(`/profile/${getUserToken()}/`)\n      loadUserData()\n      setComplete2(true)\n      handleLivingRegisterClose(true)\n    } catch (err) {\n      // setErrors(err)\n      console.log(err)\n      console.log(err.response.data)\n    }\n  }\n\n\n  return (\n    <>\n\n\n      <div className='wittle-living-signup'>\n        <Modal show={livingRegisterShow} onHide={handleLivingRegisterClose} backdrop='static' className='wittle-living-signup-modal'>\n          <Modal.Body>\n            {formFlow === 'Page 1' ?\n              <>\n                <section className='content-section'>\n                  <div className='nav-section'>\n                    <div className='logo'>\n                      <h2 onClick={() => navigate('/')}>Wittle</h2>\n                    </div>\n                    <h1 className='mobile-close' onClick={handleLivingRegisterClose}>x</h1>\n                  </div>\n                  <div className='body-section'>\n                    <div className='body-title'>\n                      <h1>Step One</h1>\n                      <h5>Add your contact email and let us know the area you want to know about</h5>\n                    </div>\n                    <div className='body-detail'>\n                      <div className='body-block'>\n                        <h5>Enter email</h5>\n                        <input type='text' name='email_address' value={userEmail.email_address} onChange={emailChange}></input>\n                        {userErrors.email_address && <p className=\"error\">* {userErrors.email_address}</p>}\n                      </div>\n                      <div className='body-block'>\n                        <h5>Enter address</h5>\n                        <AutoCompleteSearch\n                          livingData={livingData}\n                          setLivingData={setLivingData}\n                          userEmail={userEmail}\n                          setUserEmail={setUserEmail}\n                          setLifestyleLat={setLifestyleLat}\n                          setLifestyleLong={setLifestyleLong}\n                          setLoading={setLoading}\n                          setClick={setClick}\n                          setViewport={setViewport}\n                        />\n                        {userErrors.address && <p className=\"error\">* {userErrors.address}</p>}\n\n                      </div>\n                      <div className='body-block'>\n                        <h5>Our default catchment area is a 20 min walk in all directions</h5>\n                        <div className='map-radius'></div>\n                      </div>\n                      <div className='tick-block'>\n                        <input type='checkbox' name='email_confirmation' onChange={checkboxChange} checked={userEmail.email_confirmation === 1 ? true : false}></input>\n                        <h5>I&apos;d like a weekly email giving me insights about my area</h5>\n                      </div>\n                      <button className='living-next' onClick={firstSubmit}>Continue</button>\n                      <h5 className='terms'>By continuing, you accept you have read our terms and privacy notice</h5>\n                    </div>\n                  </div>\n                </section>\n                <section className='image-section'>\n                  <h1 className='desktop-close' onClick={handleLivingRegisterClose}>x</h1>\n                  <div className='image-flow-1'></div>\n                </section>\n              </>\n\n              : formFlow === 'Page 2' ?\n                <>\n                  <section className='content-section'>\n                    <div className='nav-section'>\n                      <div className='logo'>\n                        <h2 onClick={() => navigate('/')}>Wittle</h2>\n                      </div>\n                      <h1 className='mobile-close' onClick={handleLivingRegisterClose}>x</h1>\n                    </div>\n                    <div className='body-section'>\n                      <div className='body-title'>\n                        <h1>Step Two</h1>\n                        <h5>Log in to your account or register with Wittle</h5>\n\n                      </div>\n                      <div className='body-detail'>\n                        <div className='tick-block'>\n                          <h5>Are you a member of Wittle?</h5>\n                          <ReactSwitch\n                            checked={member === 1}\n                            onChange={memberCheck}\n                          />\n                        </div>\n                        {member === 0 ?\n                          <>\n                            <div className='body-block'>\n                              <h5>First name</h5>\n                              <input type='text' name='first_name' className='input' placeholder='First name' value={registerData.first_name} onChange={registerChange} />\n                              {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n                            </div>\n                            <div className='body-block'>\n                              <h5>Last name</h5>\n                              <input type='text' name='last_name' className='input' placeholder='Last name' value={registerData.last_name} onChange={registerChange} />\n                              {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n                            </div>\n                            <div className='body-block'>\n                              <h5>Username</h5>\n                              <input type='text' name='username' className='input' placeholder='Username' value={registerData.username} onChange={registerChange} />\n                              {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n                            </div>\n                            <div className='body-block'>\n                              <h5>Enter password</h5>\n                              <input type='password' name='password' className='input' placeholder='Password' value={registerData.password} onChange={registerChange} />\n                              {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n                            </div>\n                            <div className='body-block'>\n                              <h5>Confrm password</h5>\n                              <input type='password' name='password_confirmation' className='input' placeholder='Password confirmation' value={registerData.password_confirmation} onChange={registerChange} />\n                              {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n                            </div>\n                            <button className='living-next' onClick={registerSubmit}>Continue</button>\n                          </>\n                          : member === 1 ?\n                            <>\n                              <div className='body-block'>\n                                <h5>Enter email</h5>\n                                <input type='text' name='email_address' value={userEmail.email_address} onChange={registerChange}></input>\n                              </div>\n                              <div className='body-block'>\n                                <h5>Confrm password</h5>\n                                <input type='password' name='password' className='input' placeholder='Password password' value={registerData.password} onChange={registerChange} />\n                              </div>\n                              <button className='living-next' onClick={loginSubmit}>Continue</button>\n\n                            </>\n                            : ''}\n                      </div>\n                    </div>\n                    {/* <div className='ghosts'>\n                      <h1 className='order-box' onClick={() => setFormFlow('Page 1')}>1</h1>\n                    </div> */}\n                  </section>\n                  <section className='image-section'>\n                    <h1 className='desktop-close' onClick={handleLivingRegisterClose}>x</h1>\n                    <div className='image-flow-2'></div>\n                  </section>\n                </>\n                : formFlow === 'Page 3' ?\n                  <>\n                    <section className='content-section'>\n                      <div className='nav-section'>\n                        <div className='logo'>\n                          <h2 onClick={() => navigate('/')}>Wittle</h2>\n                        </div>\n                        <h1 className='mobile-close' onClick={handleLivingRegisterClose}>x</h1>\n\n                      </div>\n                      <div className='body-section'>\n                        <div className='body-title'>\n                          <h1>Step Three</h1>\n                          <h5>Finally, tell us what you want to see</h5>\n                        </div>\n                        <div className='body-detail'>\n                          <div className='body-block' id='final-step'>\n                            <div className='block-left'>\n                              <h5>Lifestyle</h5>\n                              <p>Find out about what&apos;s going on near you and in all of London</p>\n                            </div>\n                            <ReactSwitch\n                              checked={livingData.lifestyle_status === 1}\n                              onChange={lifestyleToggle}\n                            />\n                          </div>\n                          <div className='body-block' id='final-step'>\n                            <div className='block-left'>\n                              <h5>Property management</h5>\n                              <p>Manage and get insights on your bills in one place, keep on top of maintenance, insurance and more</p>\n                            </div>\n                            <ReactSwitch\n                              checked={livingData.admin_status === 1}\n                              onChange={adminToggle}\n                            />\n                          </div>\n                          <div className='body-block' id='final-step'>\n                            <div className='block-left'>\n                              <h5>Area metrics</h5>\n                              <p>Keep on top of individual property sales in the area, average pricing and more</p>\n                            </div>\n                            <ReactSwitch\n                              checked={livingData.property_status === 1}\n                              onChange={marketToggle}\n                            />\n                          </div>\n                          <button className='living-next' onClick={livingSubmit}>Submit</button>\n\n                        </div>\n                      </div>\n                      {/* <div className='ghosts'>\n                        <h1 className='order-box' onClick={() => setFormFlow('Page 1')}>1</h1>\n                        <h1 className='order-box' onClick={() => setFormFlow('Page 2')}>2</h1>\n                      </div> */}\n                    </section>\n                    <section className='image-section'>\n                      <h1 className='desktop-close' onClick={handleLivingRegisterClose}>x</h1>\n                      <div className='image-flow-3'></div>\n                    </section>\n                  </>\n                  :\n                  ''}\n\n          </Modal.Body>\n        </Modal>\n      </div>\n    </>\n  )\n}\n\nexport default LivingSignup","import { useNavigate, Link, useParams } from 'react-router-dom'\nimport axios from 'axios'\nimport React, { useState, useEffect } from 'react'\nimport NavBar from './tools/NavBar'\nimport NormalPropertySearchModal from './helpers/modals/NormalPropertySearchModal'\nimport LivingSignup from './helpers/modals/LivingSignup'\nimport Footer from './tools/Footer'\nimport WaitlistSignup from './helpers/modals/WaitlistSignup'\nimport { isEmail, isLength, matches } from 'validator'\nimport ReactGA from 'react-ga'\n\nimport schoolsImage from '../images/school-pencils-2.png'\nimport richmondImage from '../images/richmond.webp'\nimport londonImage from '../images/london-image-2.png'\n\nconst Home = () => {\n\n  const [pageType, setPageType] = useState('Consumer')\n\n  // state for switching page\n  const { borough } = useParams()\n\n  // track page view with google analytics\n  useEffect(() => {\n    ReactGA.pageview(window.location.pathname)\n  }, [])\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for errors\n  const [errors, setErrors] = useState(false)\n\n  // state for completion\n  const [complete, setComplete] = useState(false)\n\n  // manageing the modal pop up for property search\n  const [waitlistShow, setWaitlistShow] = useState(false)\n\n  // cstate for whether email eexists\n  const [emailExists, setEmailExists] = useState(false)\n\n  // borough states\n  const [boroughs, setBoroughs] = useState()\n\n  // close modal\n  const handleWaitlistClose = () => {\n    setWaitlistShow(false)\n  }\n\n  // show the modal\n  const handleWaitlistShow = (e) => {\n    setErrors(true)\n    setComplete(false)\n    setWaitlistShow(true)\n  }\n\n  // set the state for the waitlist signup data capture\n  const [waitlistData, setWaitlistData] = useState({\n    email: '',\n    channel: 'consumer',\n    preferences: false,\n  })\n\n  // set state if email is valid\n  const [validEmail, setValidEmail] = useState(false)\n\n  // determine whether the waitlist email entered is valid\n  const handleChange = (e) => {\n    setWaitlistData({ ...waitlistData, [e.target.name]: e.target.value.toLowerCase() })\n    // console.log(e.target.value)\n  }\n\n  useEffect(() => {\n    if (isEmail(waitlistData.email)) {\n      setValidEmail(true)\n      setErrors(false)\n    } else if (!isEmail(waitlistData.email)) {\n      setValidEmail(false)\n    }\n  }, [waitlistData.email])\n\n  // submit email address to waitlist\n  const handleSubmit = async (e) => {\n    setErrors(false)\n    e.preventDefault()\n    // console.log('trying')\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked Button',\n      label: 'Submit join waitlist',\n    })\n\n    try {\n      // console.log('trying')\n      const { data } = await axios.post('/api/waitlist/', waitlistData)\n      setComplete(true)\n    } catch (err) {\n      // console.log('incorrect data error')\n      setErrors(true)\n    }\n  }\n\n\n  // cheeck email\n  const checkEmail = async (e) => {\n    e.preventDefault()\n    setComplete(false)\n    setWaitlistShow(true)\n    ReactGA.event({\n      category: 'User',\n      action: 'Clicked Button',\n      label: 'Join waitlist',\n    })\n\n    try {\n      const response = await axios.post('/api/waitlist/check-email/', waitlistData)\n      setEmailExists(true)\n    } catch (err) {\n      console.error('An error occurred while making the request:', err)\n      if (err.response) {\n        setEmailExists(false)\n      }\n    }\n  }\n\n\n  // load in borughs\n  const loadBoroughs = () => {\n    const getBoroughs = async () => {\n      try {\n        const { data } = await axios.get('/api/boroughs/')\n        const richmondBorough = data.filter(object => object.borough === 'Richmond upon Thames')\n\n        console.log('borough data ->', richmondBorough[0])\n        setBoroughs(richmondBorough[0])\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    }\n    getBoroughs()\n  }\n\n  // carry out calculation\n  useEffect(() => {\n    loadBoroughs()\n  }, [])\n\n\n\n  return (\n    <>\n      <head>\n        <title>Wittle</title>\n        <meta name=\"description\" content=\"Wittle helps you find properties based on things you care about. Tell us about your lifestyle and we'll find a property that suits.\" />\n\n        {/* Open Graph/ Facbook */}\n        <meta property=\"og:type\" content=\"website\" />\n        <meta property=\"og:url\" content=\"https://www.wittle.co/\" />\n        <meta property=\"og:title\" content=\"Wittle\" />\n        <meta property=\"og:description\" content=\"Wittle helps you find properties based on things you care about. Tell us about your lifestyle and we'll find a property that suits.\" />\n        {/* <meta property=\"og:image\" content=\"https://yourwebsite.com/images/og-image.jpg\" /> */}\n\n        {/* Twitter */}\n        {/* <meta property=\"twitter:card\" content=\"summary_large_image\" /> */}\n        <meta property=\"twitter:url\" content=\"https://www.wittle.co/\" />\n        <meta property=\"twitter:title\" content=\"Wittle\" />\n        <meta property=\"twitter:description\" content=\"Wittle helps you find properties based on things you care about. Tell us about your lifestyle and we'll find a property that suits.\" />\n        {/* <meta property=\"twitter:image\" content=\"https://yourwebsite.com/images/twitter-image.jpg\" /> */}\n      </head>\n      <>\n        <section className='homepage-wrapper'>\n          {/* Home page section 1: Opening section to site - introduction page and call to a ction for different user journies */}\n          <section className='website-opening'>\n            <NavBar\n              burgerColour={'#FDF7F0'}\n              loginColour={'#1A276C'}\n              pageType={'Consumer'}\n            />\n            <section className='content-wrapper'>\n\n              <div className='headline-title-section'>\n                <div className='headline-left'>\n                  <div className='mobile-logo'></div>\n                  <div className='headline-description'>\n                    <h5>Wittle will redefine your property search experience. Launching soon.</h5>\n                  </div>\n                  <h1>Matchmaking Homes & Lifestyles.</h1>\n                  <div className='headline-description'>\n                    <h4>Find a home that suits your interests in an area that you love - because you can&apos;t renovate the location.</h4>\n                    {/* <h5>Wittle will redefine your property search experience. Launching soon.</h5> */}\n                  </div>\n\n                  <div className='waitlist-consumer'>\n                    <input className='waitlist-email' name='email' placeholder='✉️ Join the waitlist' onChange={handleChange}></input>\n                    <button className='consumer-sign-up' onClick={checkEmail}>Join</button>\n                    <WaitlistSignup\n                      waitlistShow={waitlistShow}\n                      handleWaitlistClose={handleWaitlistClose}\n                      validEmail={validEmail}\n                      errors={errors}\n                      handleSubmit={handleSubmit}\n                      handleChange={handleChange}\n                      complete={complete}\n                      emailExists={emailExists} />\n                  </div>\n                </div>\n                <div className='headline-right'>\n                  <div className='headline-image'></div>\n                </div>\n\n\n              </div>\n              <div className='consumer-process'>\n                <div className='process-steps'>\n                  <h5 className='mobile-description'>Start by telling us what matters to you.</h5>\n                  <div className='arrow' id='arrow1'></div>\n                  <div className='process-item'>\n                    <div className='process-text'>\n                      <h5>Start by telling us what matters to you</h5>\n                      <div className='process-line'></div>\n                    </div>\n                    <div className='process-screen' id='screen1'></div>\n                  </div>\n                  <div className='process-item'>\n                    <div className='process-screen' id='screen2'></div>\n                    <div className='process-text'>\n                      <h5>Flesh it out... what food, what vibe, how far?</h5>\n                      <div className='process-line'></div>\n                    </div>\n                  </div>\n                  <div className='arrow' id='arrow2'></div>\n                  <h5 className='mobile-description'>Flesh it out... what food, what vibe, how far?</h5>\n\n                </div>\n                <div className='process-steps'>\n                  <h5 className='mobile-description'>...and we&apos;ll Wittle it down for you, giving you unparalelled insights...</h5>\n                  <div className='arrow' id='arrow3'></div>\n                  <div className='process-item'>\n                    <div className='process-text'>\n                      <h5>...and we&apos;ll Wittle it down for you, giving you unparalelled insights...</h5>\n                      <div className='process-line'></div>\n                    </div>\n                    <div className='process-screen' id='screen3'></div>\n                  </div>\n                  <div className='process-item'>\n                    <div className='process-screen' id='screen4'></div>\n                    <div className='process-text'>\n                      <h5>...then we&apos;ll help you decide on the perfect home.</h5>\n                      <div className='process-line'></div>\n                    </div>\n                  </div>\n                  <div className='arrow' id='arrow4'></div>\n                  <h5 className='mobile-description'>...then we&apos;ll help you decide on the perfect home.</h5>\n\n                </div>\n              </div>\n\n\n              <section className='blog-section-summary'>\n                <h1 className='blog-section-title'>Insights</h1>\n                <div className='blog-list'>\n                  <div className='blog-item' onClick={() => navigate('/blogs/school-search-simplified')}>\n                    <img className='blog-image-box' alt='school-search-img' src={schoolsImage} id='box-1' loading='lazy' />\n                    <div className='blog-content'>\n                      <h2>Lifestyle insights</h2>\n                      <h3 className='blog-item-summary'>School Search Simplified: An In-Depth Analysis of London&apos;s Primary Schools</h3>\n                      <p>We disect everything you neeed to know if primary schools are a factor in your property search.</p>\n                    </div>\n                  </div>\n                  <div className='blog-item' onClick={() => navigate('/blogs/redefining-property-search')}>\n                    <img className='blog-image-box' alt='school-search-img' src={londonImage} id='box-2' loading='lazy' />\n                    <div className='blog-content'>\n                      <h2>Perspective</h2>\n                      <h3 className='blog-item-summary'>Redefining Property Search: Our Blueprint for the Future</h3>\n                      <p>Our take on what&apos;s wrong with property search and what we&apos;re doing to change it.</p>\n                    </div>\n                  </div>\n                  <div className='blog-item' onClick={() => navigate(`/blogs/borough-guides/${boroughs.borough}`)}>\n                    <img className='blog-image-box' alt='school-search-img' src={richmondImage} id='box-3' loading='lazy' />\n                    <div className='blog-content'>\n                      <h2>Borough guides</h2>\n                      <h3 className='blog-item-summary'>Richmond upon Thames</h3>\n                      <p>The stats on everything you neeed to know about Richmond, including schools, where to eat, where to live, and more.</p>\n                    </div>\n                  </div>\n\n\n                </div>\n\n\n              </section>\n              <section className='consumer-bottom'>\n                <div className='wittle-logo'></div>\n                <div className='waitlist-consumer'>\n                  <input className='waitlist-email' name='email' placeholder='✉️ Join the waitlist' onChange={handleChange}></input>\n                  <button className='consumer-sign-up' onClick={handleWaitlistShow}>Join</button>\n                  <WaitlistSignup\n                    waitlistShow={waitlistShow}\n                    handleWaitlistClose={handleWaitlistClose}\n                    validEmail={validEmail}\n                    errors={errors}\n                    handleSubmit={handleSubmit}\n                    handleChange={handleChange}\n                    complete={complete}\n                    emailExists={emailExists} />\n                </div>\n              </section>\n              <Footer textColour={'#ED6B86'} />\n            </section>\n\n\n          </section>\n        </section>\n\n      </></>\n  )\n}\n\nexport default Home\n\n","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer"],"names":["Home","pageType","setPageType","useState","borough","useParams","useEffect","ReactGA","window","location","pathname","navigate","useNavigate","errors","setErrors","complete","setComplete","waitlistShow","setWaitlistShow","emailExists","setEmailExists","boroughs","setBoroughs","handleWaitlistClose","waitlistData","setWaitlistData","email","channel","preferences","validEmail","setValidEmail","handleChange","e","target","name","value","toLowerCase","isEmail","handleSubmit","async","preventDefault","category","action","label","data","axios","post","err","get","richmondBorough","filter","object","console","log","error","getBoroughs","_jsxs","_Fragment","children","_jsx","content","property","className","NavBar","burgerColour","loginColour","placeholder","onChange","onClick","response","WaitlistSignup","id","alt","src","loading","richmondImage","Footer","textColour","_ref","style","color"],"sourceRoot":""}