{"version":3,"file":"static/js/331.6d6dc4b6.chunk.js","mappings":"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","sources":["components/helpers/AccessDenied.js","components/tools/NavBar.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../auth/Auth'\nimport NavBar from '../tools/NavBar'\nimport { Modal } from 'react-bootstrap'\n\n\n\nconst AccessDenied = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  })\n\n  // set error state\n  const [errors, setErrors] = useState(false)\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', formData)\n      console.log(formData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // update registration data\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    console.log(e.target.name)\n    console.log(e.target.value)\n    // setErrors({ ...errors, [e.target.name]: '' })\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      handleRegisterClose()\n    } catch (err) {\n      // setErrors(err.response.status + ' ' + err.response.statusText)\n    }\n  }\n\n  return (\n    <>\n      <section className='denied-page'>\n        <NavBar />\n        <section className='denied-section'>\n          <div className='denied-top'>\n            <h1>Oops! Dead end</h1>\n            <h3>There&apos;s no content here. You need to carry out a fresh search to unlock the Wittle Magic.</h3>\n            {/* <h3>This content is for our registered users only. Want to see it? <span onClick={handleRegisterShow}>Join Wittle.</span> If you don&apos;t, there&apos;s still plenty for you to do..</h3> */}\n            <div className='button-section'>\n              <button onClick={() => navigate('/property-search')}>Search properties</button>\n              <button onClick={() => navigate('/wittle-search')}>Wittle search</button>\n            </div>\n          </div>\n        </section>\n      </section>\n      <div className='register-modal-container'>\n        <Modal show={registerShow} onHide={handleRegisterClose} backdrop='static' className='register-modal'>\n          <Modal.Body>\n            <form className='form-detail' onSubmit={registerSubmit} >\n              <h1>Unlock the benefits of Wittle</h1>\n              <p>Set up an account to help you find the perfect home</p>\n              <hr />\n              <input type='text' name='first_name' className='input' placeholder='First name' value={registerData.first_name} onChange={registerChange} />\n              <input type='text' name='last_name' className='input' placeholder='Last name' value={registerData.last_name} onChange={registerChange} />\n              <input type='text' name='username' className='input' placeholder='Username' value={registerData.username} onChange={registerChange} />\n              {/* {errors && <p className = 'denied-text'>Please input username</p>} */}\n              <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={registerChange} />\n              {/* {errors && <p className = 'denied-text'>Please input email</p>} */}\n              <input type='password' name='password' className='input' placeholder='Password' value={registerData.password} onChange={registerChange} />\n              {/* {errors && <p className = 'denied-text'>Please input password</p>} */}\n              <input type='password' name='password_confirmation' className='input' placeholder='Password confirmation' value={registerData.password_confirmation} onChange={registerChange} />\n              {/* Submit */}\n              {/* <hr/> */}\n              <button type='submit'>Register</button>\n            </form>\n            <div className='register-bottom'>\n              <button className='register-close' onClick={handleRegisterClose}>Close</button>\n            </div>\n          </Modal.Body>\n        </Modal>\n      </div>\n    </>\n\n  )\n}\n\nexport default AccessDenied","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst NavBar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state to manage navbar colour depending on page\n  // const [navbarColour, setNavBarColour] = useState('#051885')\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  const responseMessage = (response) => {\n    console.log(response)\n  }\n\n  const errorMessage = (error) => {\n    console.log(error)\n  }\n\n\n  // post google information for authentication\n  const googleLogin = async (response) => {\n    try {\n      // await axios.post('/api/auth/google/', registerData)\n      const auth = { 'auth_token': response.credential }\n      console.log(auth)\n      const { data } = await axios.post('/api/auth/google/', {\n        body: JSON.stringify(auth),\n      })\n      console.log(data)\n    } catch (err) {\n      setErrors(err)\n      console.log(err)\n      console.log(err.response.data)\n    }\n  }\n\n  return (\n    <>\n      <section className='nav-section' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n          <h4 onClick={() => navigate('/agents')} className='agent-button'>For agents</h4>\n        </div>\n        <div className='menu-container' onClick={handleMenuShow}>\n          <div className=\"menu-trigger\">\n            <span>\n              <div className='burger-icon'>\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n                <hr className='burger-icon-line' />\n              </div>\n            </span>\n          </div>\n        </div>\n      </section>\n      <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      />\n    </>\n  )\n\n}\n\nexport default NavBar"],"names":["navigate","useNavigate","isActive","setIsActive","useRef","useState","formData","setFormData","email","password","errors","setErrors","registerShow","setRegisterShow","handleRegisterClose","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerChange","e","target","name","value","console","log","className","onClick","show","onHide","backdrop","onSubmit","async","preventDefault","axios","err","type","placeholder","onChange","navbarColour","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerError","setRegisterError","post","style","backgroundColor","handleMenuClose","removeItemFromStorage","token","localStorage","removeItem","window","location","reload"],"sourceRoot":""}