{"version":3,"file":"static/js/556.288241a2.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyDetails/PropertyInsightsOverview.js","components/whiteLabel/propertyList.js/SavedListings.js","components/whiteLabel/b2bModals/KYCInput.js","components/whiteLabel/propertyList.js/TopProperties.js","components/whiteLabel/propertyList.js/ListingGenerator.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport PropertySummary from './componentHighlights/PropertySummary'\nimport SchoolHighlights from './componentHighlights/SchoolHighlights'\nimport LifestyleHighlights from './componentHighlights/LifestyleHighlights'\nimport TransportHighlights from './componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from './componentHighlights/NeighbourhoodHighlights'\nimport PropertyDetailSlider from './helpers/PropertyDetailSlider'\nimport PrimaryDetails from './componentDetails/PrimaryDetails'\nimport SecondaryDetails from './componentDetails/SecondaryDetails'\nimport TubeDetails from './componentDetails/TubeDetails'\nimport RestaurantDetails from './componentDetails/RestaurantDetails'\nimport PubDetails from './componentDetails/PubDetails'\nimport SupermarketDetails from './componentDetails/SupermarketDetails'\nimport FitnessDetails from './componentDetails/FitnessDetails'\nimport EVDetails from './componentDetails/EVDetails'\n\n\n\n\nconst PropertyInsightsOverview = ({ addressSubstring, postcodeSubstring, listingFields, postcodeData, topPrimaries, topSecondaries,\n  restaurants1, cuisines, topRestaurants, gyms1, mainGyms, supermarkets1, mainSupermarkets, pubs1, topPubs, tubes1, trains1, setInsightView,\n  primaryData1, setPrimaryData1, secondaryData1, setSecondaryData1, setTubes1, setRestaurants1, setPubs1, setSupermarkets1, setGyms1,\n  ev1, setEv1, secondaryDetail, setSecondaryDetail, primaryDetail, setPrimaryDetail }) => {\n\n  const [propertyView, setPropertyView] = useState('Overview')\n\n\n\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  const [tableMapView, setTableMapView] = useState('Table')\n\n\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n      postcodeData[0].ev.percentile +\n      postcodeData[0].fitness.percentile +\n      (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n      postcodeData[0].restaurants.normal_percentile +\n      postcodeData[0].supermarkets.percentile +\n      postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n  // overview navigation\n  const goToOverview = () => {\n    setPropertyView('Overview')\n    setPrimaryDetail('Table')\n    setSecondaryDetail('Table')\n  }\n\n  return (\n    <>\n      <section className=\"insights-results-wrapper remove-margin\">\n        <section className=\"insights-navigation remove-some-margin\">\n          <div className=\"direction-arrow no-print\" onClick={() => setInsightView('Search')}></div>\n          <div className=\"navigation-input\">\n            <h3 className=\"title\">Postcode</h3>\n            <h3 className=\"result\">{postcodeSubstring}</h3>\n          </div>\n          <div className=\"navigation-input\">\n            <h3 className=\"title\">Address</h3>\n            <h3 className=\"result\">{addressSubstring}</h3>\n          </div>\n          <div className=\"navigation-input no-print\">\n            <h3 className=\"title\">Channel</h3>\n            <h3 className=\"result\">{listingFields.channel}</h3>\n          </div>\n        </section>\n\n        <section className=\"property-insights-wrapper\">\n          <div className=\"property-insight-nav no-print remove-margin\">\n            <div className=\"property-insight-buttons no-print remove-margin\">\n              <h3 className={`insight-button ${propertyView === 'Overview' ? 'active' : 'inactive'}`} id='left' onClick={() => goToOverview()}>Property overview</h3>\n              <h3 className={`insight-button ${propertyView === 'Details' ? 'active' : 'inactive'}`} id='right' onClick={() => setPropertyView('Details')}>Property details</h3>\n            </div>\n            <div className='print-section' onClick={() => window.print()}>\n              <div className=\"print-icon\"></div>\n              <h3 >Print</h3>\n\n            </div>\n          </div>\n          {propertyView === 'Overview' ?\n            <div className='insight-dropdowns'>\n              <div className='summary-header'>\n                <h3>Property Summary</h3>\n                <hr className='header-line' />\n              </div>\n              <PropertySummary\n                neighbourhoodScore={neighbourhoodScore}\n                postcodeData={postcodeData}\n              />\n              <div className='summary-header' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {schoolSection ?\n                <SchoolHighlights\n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                  setPropertyView={setPropertyView}\n                  setSecondaryDetail={setSecondaryDetail}\n                  setPrimaryDetail={setPrimaryDetail}\n                  setSliderSelection={setSliderSelection}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {lifestyleSection ?\n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {transportSection ?\n                <TransportHighlights\n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                  trains1={trains1}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhoood highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {neighbourhoodSection ?\n                <NeighbourhoodHighlights\n                  postcodeData={postcodeData}\n                />\n                : ''\n              }\n            </div>\n\n            : propertyView === 'Details' ?\n              <>\n\n                <div className='property-details-wrapper'>\n                  <PropertyDetailSlider\n                    sliderSelection={sliderSelection}\n                    setSliderSelection={setSliderSelection}\n                    setSecondaryDetail={setSecondaryDetail}\n                    setPrimaryDetail={setPrimaryDetail}\n                  />\n                  {secondaryDetail === 'School' ?\n                    <h3 className='go-back' onClick={() => setSecondaryDetail('Table')}>&lt;- Back to secondary school long list</h3>\n                    :\n                    primaryDetail === 'School' ?\n                      <h3 className='go-back' onClick={() => setPrimaryDetail('Table')}>&lt;- Back to primary school long list</h3>\n                      :\n                      <div className='detail-table-title'>\n                        <h3>{sliderSelection} list</h3>\n                        <hr className='table-title-line' />\n                        <input placeholder='Explore the data'></input>\n                        <div className={`icon-box ${tableMapView === 'Table' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Table')}>\n                          <div className='icon' id='table'></div>\n                        </div>\n                        <div className={`icon-box ${tableMapView === 'Map' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Map')}>\n                          <div className='icon' id='map'></div>\n                        </div>\n\n                      </div>\n                  }\n                  <div className='insight-tables'>\n                    {sliderSelection === 'Primary schools' ?\n                      <PrimaryDetails\n                        primaryData1={primaryData1}\n                        setPrimaryData1={setPrimaryData1}\n                        postcodeData={postcodeData}\n                        tableMapView={tableMapView}\n                        listType={'short list'}\n                        primaryDetail={primaryDetail}\n                        setPrimaryDetail={setPrimaryDetail}\n                        setSliderSelection={setSliderSelection}\n                        setPropertyView={setPropertyView}\n                      />\n\n                      : sliderSelection === 'Secondary schools' ?\n\n                        <SecondaryDetails\n                          secondaryData1={secondaryData1}\n                          setSecondaryData1={setSecondaryData1}\n                          postcodeData={postcodeData}\n                          tableMapView={tableMapView}\n                          listType={'short list'}\n                          secondaryDetail={secondaryDetail}\n                          setSecondaryDetail={setSecondaryDetail}\n                          setSliderSelection={setSliderSelection}\n                          setPropertyView={setPropertyView}\n                        />\n\n                        : sliderSelection === 'Tubes' ?\n                          <TubeDetails\n                            tubes1={tubes1}\n                            setTubes1={setTubes1}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                            tableMapView={tableMapView}\n                          />\n\n                          : sliderSelection === 'Restaurants' ?\n                            <RestaurantDetails\n                              restaurants1={restaurants1}\n                              setRestaurants1={setRestaurants1}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                              tableMapView={tableMapView}\n                            />\n\n                            : sliderSelection === 'Pubs' ?\n                              <PubDetails\n                                pubs1={pubs1}\n                                setPubs1={setPubs1}\n                                listType={'short list'}\n                                postcodeData={postcodeData}\n                                tableMapView={tableMapView}\n\n                              />\n\n                              : sliderSelection === 'Supermarkets' ?\n                                <SupermarketDetails\n                                  supermarkets1={supermarkets1}\n                                  setSupermarkets1={setSupermarkets1}\n                                  listType={'short list'}\n                                  postcodeData={postcodeData}\n                                  tableMapView={tableMapView}\n\n                                />\n\n                                : sliderSelection === 'Fitness' ?\n                                  <FitnessDetails\n                                    gyms1={gyms1}\n                                    setGyms1={setGyms1}\n                                    listType={'short list'}\n                                    postcodeData={postcodeData}\n                                    tableMapView={tableMapView}\n\n                                  />\n\n                                  : sliderSelection === 'EVs' ?\n                                    <EVDetails\n                                      ev1={ev1}\n                                      setEv1={setEv1}\n                                      listType={'short list'}\n                                      postcodeData={postcodeData}\n                                      tableMapView={tableMapView}\n\n                                    />\n                                    :\n                                    ''}\n                  </div>\n\n\n\n                </div>\n\n\n\n              </>\n\n              : ''}\n        </section>\n\n      </section>\n\n    </>\n\n  )\n}\n\n\nexport default PropertyInsightsOverview","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken, getAccessToken } from '../../auth/Auth'\n\n\n\n\n\nconst SavedListings = ({ userData, loadUserData, setListingSelection }) => {\n\n  // ? Section 1: Define states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for handling locations\n  const location = useLocation()\n\n  // set state for determineing which favourites you see\n  const [favouriteTab, setFavouriteTab] = useState('Property prospects')\n\n\n\n  // ? Section 2: Functions to access\n  // function to delete favourites\n  const deleteListingFavourite = async (property) => {\n    if (isUserAuth()) {\n      try {\n        // Use the ID in the endpoint URL\n        const { data } = await axios.delete(`/api/listing_favourites/${property.id}/`, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        loadUserData()\n      } catch (error) {\n        console.error('Error deleting favourite:', error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('logged out')\n    }\n  }\n\n\n  // function to move to the listings\n  const goToListing = (item) => {\n    console.log('postcode ->', item.postcode)\n    window.localStorage.setItem('listing-postcode', JSON.stringify(item.postcode))\n    window.localStorage.setItem('listing-route', JSON.stringify('On'))\n    setListingSelection('Property insights')\n    navigate('/agents/listing-generator')\n  }\n\n\n\n  return (\n    <>\n      <section className='saved-listings'>\n        {userData && userData.listing_favourites.length > 0 ?\n          <>\n            <div className='favourite-count'>\n              <h3>You have {userData ? userData.listing_favourites.length : ''} {userData && userData.listing_favourites.length === 1 ? 'listing' : 'listings'} saved</h3>\n\n            </div>\n\n            <div className='table-section'>\n              <div className='table-headers'>\n                <h5 id='column1' className='column'>#</h5>\n                <div id='column2' className='column'>\n                  <h5>Address</h5>\n                </div>\n                <div id='column3' className='column'>\n                  <h5>Postcode</h5>\n                </div>\n                <div id='column4' className='column'>\n                  <h5>Channel</h5>\n                </div>\n                <div id='column5' className='column'>\n                  <h5>Date saved</h5>\n                </div>\n                <div id='column6' className='column'>\n                  <h5>Action</h5>\n                </div>\n              </div>\n              <hr className='property-divider' />\n              <div className='table-details'>\n                {userData ? userData.listing_favourites\n                  .map((item, index) => {\n                    return (\n                      <>\n                        <div key={index}\n                          className='results-content'\n                        >\n                          <div className='column' id='column1'>\n                            <h5>{index + 1}</h5>\n                          </div>\n                          <div className='column' id='column2' onClick={() => goToListing(item)}>\n                            <h5>{item.address === '' ? 'N/a' : item.address}</h5>\n                          </div>\n                          <div className='column' id='column3'>\n                            <h5>{item.postcode === '' ? 'N/a' : item.postcode}</h5>\n                          </div>\n                          <div className='column' id='column4'>\n                            <h5>{item.channel}</h5>\n                          </div>\n                          <div className='column' id='column5'>\n                            <h5>{item.date_added}</h5>\n                          </div>\n                          <div className='column' id='column6' onClick={() => deleteListingFavourite(item)}>\n                            <h5 className='remove'>🗑</h5>\n                          </div>\n                        </div>\n                        <hr className='property-divider' />\n                      </>\n                    )\n                  })\n                  : ''}\n\n              </div>\n\n            </div>\n          </>\n          : favouriteTab === 'Listings' && userData && userData.listing_favourites.length === 0 ?\n            <>\n              <div className='favourite-count'>\n                <h3>😕 You don&apos;t have any properties saved here. Head to the listing generator tab to get started!</h3>\n              </div>\n            </>\n            : ''}\n      </section>\n    </>\n  )\n}\n\nexport default SavedListings","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Loading from '../../helpers/Loading'\nimport { Modal } from 'react-bootstrap'\n\n\nconst KYCInput = ({ propertyInputShow, handlePropertyInputClose, propertyFilters, setPropertyFilters, boroughs, rentalPrices, salesPrices, propertyTypeList, loadProperties }) => {\n\n\n\n  return (\n\n    <>\n      <Modal show={propertyInputShow} onHide={handlePropertyInputClose} backdrop='static' className='KYC-input-modal'>\n        <Modal.Body>\n          <section className='overall-body'>\n            <section className='input-header'>\n              <div className='input-title'>\n                <h1>Find a property based on what matters to you</h1>\n                <h1 className='close-modal' onClick={handlePropertyInputClose}>X</h1>\n              </div>\n            </section>\n\n            <section className='input-main'>\n              <div className='input-section'>\n                <h2 className='section-sub-title'>Search details</h2>\n                <div className='selection-block-single'>\n                  <h3>Channel</h3>\n                  <select className='dropdown' value={propertyFilters.channel || 'Sales'} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, channel: e.target.value }))}>\n                    <option>Sales</option>\n                    <option>Rental</option>\n                  </select>\n                </div>\n                <div className='selection-block-single'>\n                  <h3>Area</h3>\n                  <select className='dropdown' value={propertyFilters.area || ''} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, area: e.target.value }))}>\n                    <option value=''>All</option>\n                    {boroughs.map((borough, index) => (\n                      <option key={index} value={borough}>{borough}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div className='input-section'>\n                <h2 className='section-sub-title'>Property details</h2>\n                <div className='selection-block-double'>\n                  <h3>Price</h3>\n                  {propertyFilters.channel === 'Rental' ?\n                    <div className='double-dropdowns'>\n                      <select\n                        className='dropdown'\n                        value={propertyFilters.rental_price_min || ''}\n                        onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_min: e.target.value }))}\n                      >\n                        <option value={0}>No min</option>\n                        {rentalPrices.map((price, index) => (\n                          <option key={index} value={price}>\n                            <NumericFormat\n                              value={price}\n                              displayType={'text'}\n                              thousandSeparator={true}\n                              prefix={'£'}\n                            />\n                          </option>\n                        ))}\n                      </select>\n                      <select\n                        className='dropdown'\n                        value={propertyFilters.rental_price_max || ''}\n                        onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_max: e.target.value }))}\n                      >\n                        <option value={10000000}>No max</option>\n                        {rentalPrices.map((price, index) => (\n                          <option key={index} value={price}>\n                            <NumericFormat\n                              value={price}\n                              displayType={'text'}\n                              thousandSeparator={true}\n                              prefix={'£'}\n                            />\n                          </option>\n                        ))}\n                      </select>\n\n                    </div>\n                    : propertyFilters.channel === 'Sales' ?\n                      <div className='double-dropdowns'>\n                        <select\n                          className='dropdown'\n                          value={propertyFilters.rental_price_min || ''}\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_min: e.target.value }))}\n                        >\n                          <option value={0}>No min</option>\n                          {salesPrices.map((price, index) => (\n                            <option key={index} value={price}>\n                              <NumericFormat\n                                value={price}\n                                displayType={'text'}\n                                thousandSeparator={true}\n                                prefix={'£'}\n                              />\n                            </option>\n                          ))}\n                        </select>\n                        <select\n                          className='dropdown'\n                          value={propertyFilters.rental_price_max || ''}\n                          onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, rental_price_max: e.target.value }))}\n                        >\n                          <option value={10000000}>No max</option>\n                          {salesPrices.map((price, index) => (\n                            <option key={index} value={price}>\n                              <NumericFormat\n                                value={price}\n                                displayType={'text'}\n                                thousandSeparator={true}\n                                prefix={'£'}\n                              />\n                            </option>\n                          ))}\n                        </select>\n\n                      </div>\n                      : ''}\n                </div>\n                <div className='selection-block-double'>\n                  <h3>Bedrooms</h3>\n                  <div className='double-dropdowns'>\n                    <select\n                      className='dropdown'\n                      value={propertyFilters.bedrooms_min || ''}\n                      onChange={(e) => setPropertyFilters(prevData => ({\n                        ...prevData,\n                        bedrooms_min: e.target.value === '' ? null : e.target.value,\n                      }))}\n                    >\n                      <option value=''>No min</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                      <option value=\"3\">3</option>\n                      <option value=\"4\">4</option>\n                      <option value=\"5\">5</option>\n                      <option value=\"6\">6</option>\n                    </select>\n                    <select\n                      className='dropdown'\n                      value={propertyFilters.bedrooms_max || ''}\n                      onChange={(e) => setPropertyFilters(prevData => ({\n                        ...prevData,\n                        bedrooms_max: e.target.value === '' ? null : e.target.value,\n                      }))}\n                    >\n                      <option value=''>No max</option>\n                      <option value=\"1\">1</option>\n                      <option value=\"2\">2</option>\n                      <option value=\"3\">3</option>\n                      <option value=\"4\">4</option>\n                      <option value=\"5\">5</option>\n                      <option value=\"6\">6</option>\n                      <option value=\"7\">7</option>\n                    </select>\n                  </div>\n                </div>\n                <div className='selection-block-single'>\n                  <h3>Property type</h3>\n                  <select className='dropdown' value={propertyFilters.propertyType || ''} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, propertyType: e.target.value }))}>\n                    <option value=''>All</option>\n                    {propertyTypeList.map((property, index) => (\n                      <option key={index} value={property}>{property}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n                <div className='selection-block-single'>\n                  <h3>Features</h3>\n                  <div className='select-box'>\n                    <input type=\"checkbox\" id=\"myCheckbox\" name=\"myCheckbox\" checked={propertyFilters.garden} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, garden: e.target.checked }))} />\n                    <label htmlFor=\"myCheckbox\">Garden</label>\n                  </div>\n                </div>\n                <div className='selection-block-single'>\n                  <h3>Size</h3>\n                  <input placeholder='Input min size' className='dropdown' value={propertyFilters.size || ''} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, size: e.target.value }))}></input>\n                </div>\n              </div>\n              <div className='input-section'>\n                <h2 className='section-sub-title'>Lifestyle details</h2>\n                <div className='selection-block-single'>\n                  <h3>Persona</h3>\n                  <select className='dropdown' value={propertyFilters.persona || 'Young families'} onChange={(e) => setPropertyFilters(prevData => ({ ...prevData, persona: e.target.value }))}>\n                    <option>Young families</option>\n                    <option>Young professionals</option>\n                    <option>Vibes</option>\n                    <option>Commuter convenience</option>\n                  </select>\n                </div>\n              </div>\n\n            </section>\n\n            <section className='input-footer'>\n              <button className='load-properties' onClick={loadProperties}>Load results</button>\n            </section>\n          </section>\n\n\n        </Modal.Body>\n      </Modal >\n\n    </>\n\n  )\n}\n\nexport default KYCInput","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Loading from '../../helpers/Loading'\nimport KYCInput from '../b2bModals/KYCInput'\n\n\nconst TopProperties = ({ setListingSelection, fetchData }) => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  const [loading, setLoading] = useState(false)\n\n  const [properties, setProperties] = useState()\n\n  // managing modal for properties to be removed from list\n  const [propertyInputShow, setPropertyInputShow] = useState(false)\n\n  // filter array for proeprties to search\n  const [propertyFilters, setPropertyFilters] = useState({\n    channel: 'Sales',\n    area: '',\n    persona: 'Young families',\n    propertyType: '',\n    garden: false,\n    size: '',\n    bedrooms_min: '',\n    bedrooms_max: '',\n    rental_price_min: '',\n    rental_price_max: '',\n  })\n\n\n  // create \n  useEffect(() => {\n    const filters = JSON.parse(localStorage.getItem('top-property-filters'))\n    const propertyData = JSON.parse(localStorage.getItem('top-properties'))\n    if (filters) {\n      setPropertyFilters(filters)\n      setProperties(propertyData)\n    }\n  }, [])\n\n  //  Loading latest data from the database based on the postcode areas applied by the user\n  const loadProperties = async () => {\n    setLoading(true)\n    handlePropertyInputClose()\n    const channelValue = propertyFilters.channel\n    const areaValue = propertyFilters.area\n    const personaValue = propertyFilters.persona\n    const propertyTypeValue = propertyFilters.propertyType\n    const gardenValue = propertyFilters.garden\n    const sizeValue = propertyFilters.size\n    const bedroomsMin = propertyFilters.bedrooms_min\n    const bedroomsMax = propertyFilters.bedrooms_max\n    const priceMin = propertyFilters.rental_price_min\n    const priceMax = propertyFilters.rental_price_max\n    const personaAttributeToSortBy = personaValue.toLowerCase().replace(/ /g, '_')\n\n    try {\n      if (channelValue === 'Rental') {\n        const url = `/api/personas/rental/?area=${areaValue}&persona=${personaValue}&min_bedrooms=${bedroomsMin}&max_bedrooms=${bedroomsMax}&rental_price_min=${priceMin}&rental_price_max=${priceMax}&garden=${gardenValue}&property_type=${propertyTypeValue}`\n        // extract data based on url\n        const { data } = await axios.get(url, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        // Sort data based on the adjusted persona attribute\n        data.sort((a, b) => {\n          const personaValueA = a.persona_data_list[0][personaAttributeToSortBy]\n          const personaValueB = b.persona_data_list[0][personaAttributeToSortBy]\n          return personaValueB - personaValueA // Sorting in descending order\n        })\n        console.log('combined data ->', data)\n        setProperties(data)\n        window.localStorage.setItem('top-properties', JSON.stringify(data))\n\n      } else if (channelValue === 'Sales') {\n        const url = `/api/personas/sales/?area=${areaValue}&persona=${personaValue}&min_bedrooms=${bedroomsMin}&max_bedrooms=${bedroomsMax}&rental_price_min=${priceMin}&rental_price_max=${priceMax}&garden=${gardenValue}&propertyTypeValue=${propertyTypeValue}&size=${sizeValue}`\n        // extract data based on url\n        const { data } = await axios.get(url, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        // Sort data based on the adjusted persona attribute\n        data.sort((a, b) => {\n          const personaValueA = a.persona_data_list[0][personaAttributeToSortBy]\n          const personaValueB = b.persona_data_list[0][personaAttributeToSortBy]\n          return personaValueB - personaValueA // Sorting in descending order\n        })\n        console.log('combined data ->', data)\n        setProperties(data)\n        window.localStorage.setItem('top-properties', JSON.stringify(data))\n      }\n      window.localStorage.setItem('top-property-filters', JSON.stringify(propertyFilters))\n      setLoading(false)\n    } catch (error) {\n      console.error('can\\'t access combined data ->', error)\n    }\n  }\n\n\n  // go to url in table\n  const handleVisitUrl = (url) => {\n    // window.open(url, '_blank') // This will open the URL in a new tab\n    const windowFeatures = 'width=1200,height=800,resizable=yes,scrollbars=yes,status=yes'\n    // Open the URL in a new window\n    window.open(url, '_blank', windowFeatures)\n  }\n\n  // function to move to the listings\n  const goToListing = (item) => {\n    console.log('postcode ->', item.property_data.postcode)\n    window.localStorage.setItem('listing-postcode', JSON.stringify(item.property_data.postcode))\n    window.localStorage.setItem('listing-route', JSON.stringify('On'))\n    fetchData()\n    setListingSelection('Property insights')\n    navigate('/agents/listing-generator')\n  }\n\n  // close modal\n  const handlePropertyInputShow = () => {\n    setPropertyInputShow(true)\n  }\n\n  // show the modal\n  const handlePropertyInputClose = (e) => {\n    setPropertyInputShow(false)\n  }\n\n\n\n  // sales prices\n  const salesPrices = [\n    '200000', '300000', '400000', '500000', '600000', '700000', '800000', '900000', '1000000', '1250000', '1500000', '1750000', '2000000', '2250000', '2500000',\n    '2750000', '3000000', '3500000', '4000000', '5000000', '7500000', '10000000', '12500000', '15000000', '20000000', '30000000', '40000000', '50000000'\n  ]\n\n  // rental prices\n  const rentalPrices = [\n    '500', '600', '700', '800', '900', '1000', '1100', '1200', '1300', '1400', '1500', '1600', '1700', '1800', '1900', '2000', '2250', '2500', '2750', '3000', '3250', '3500',\n    '4000', '4500', '5000', '5500', '6000', '7000', '8000', '9000', '10000', '12500', '15000', '20000', '25000', '30000', '40000', '50000', '60000'\n  ]\n\n  // borough list\n  const boroughs = ['Barking and Dagenham', 'Barnet', 'Bexley', 'Brent', 'Camden', 'Croydon', 'Ealing', 'Enfield', 'Greenwich', 'Havering', 'Kensington and Chelsea',\n    'Hertfordshire', 'Hillingdon', 'Hounslow', 'Islington', 'Lambeth', 'Lewisham', 'Merton', 'Southwark', 'Sutton', 'Waltham Forest', 'Westminster',\n    'Hackney', 'City of London', 'Hammersmith and Fulham', 'Wandsworth', 'Tower Hamlets', 'Bromley', 'Haringey', 'Kingston upon Thames', 'Newham', 'Redbridge', 'Richmond upon Thames']\n\n  // property type list\n  const propertyTypeList = ['Flat', 'Apartment', 'Terraced', 'Semi-Detached', 'Detached', 'House', 'End of Terrace', 'Maisonette', 'Studio', 'Retirement Property', 'Ground Flat',\n    'Penthouse', 'Bungalow', 'Town House', 'Detached Bungalow', 'Duplex']\n\n\n\n\n\n\n\n  return (\n\n    <>\n      <section className='top-properties'>\n\n        <section className='top-properties-filters'>\n          <div className='filter-block'>\n            <button onClick={handlePropertyInputShow}>Edit inputs</button>\n          </div>\n\n        </section>\n\n        {!loading ?\n          <section className='top-property-results'>\n            <div className='top-property-title'>\n              <h3>{properties ? `Here are ${properties.length} properties that match your criteria` : ''}</h3>\n            </div>\n\n            <div className='top-property-table'>\n              <div className='table-headers'>\n                <div id='column1' className='column'>\n                  <h5>#</h5>\n\n                </div>\n                <div id='column2' className='column' >\n                  <h5>Address</h5>\n                </div>\n                <div id='column3' className='column'>\n                  <h5>Postcode</h5>\n                  {/* <h5>⬇️</h5> */}\n                </div>\n                <div id='column4' className='column'>\n                  <h5>Area</h5>\n                </div>\n                <div id='column5' className='column'>\n                  <h5>Added</h5>\n                </div>\n                <div id='column6' className='column'>\n                  <h5>Price</h5>\n                  {/* <h5>⬇️</h5> */}\n                </div>\n                <div id='column7' className='column'>\n                  <h5>Bedrooms</h5>\n                </div>\n                <div id='column8' className='column'>\n                  <h5>Agent</h5>\n                </div>\n                <div id='column9' className='column'>\n                  <h5>Score</h5>\n                </div>\n\n              </div>\n              <hr className='property-divider' />\n\n              <div className='table-detail'>\n                {properties ? properties.map((item, index) => {\n                  return (\n                    <>\n                      <div className='table-content'>\n                        <div className='column' id='column1' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{item.property_data.displayAddress}</h5>\n                        </div>\n                        <div className='column' id='column3' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{item.property_data.postcode}</h5>\n                        </div>\n                        <div className='column' id='column4' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{item.persona_data_list[0].lsoa}</h5>\n                        </div>\n                        <div className='column' id='column5' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{item.property_data.added_revised === null ? `Reduced ${item.property_data.reduced_revised}` : item.property_data.added_revised}</h5>\n                        </div>\n                        <div className='column' id='column6' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{item.property_data.price}</h5>\n                        </div>\n                        <div className='column' id='column7' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{item.property_data.bedrooms}</h5>\n                        </div>\n                        <div className='column' id='column8' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          <h5>{item.property_data.agent}</h5>\n                        </div>\n                        <div className='column' id='column9' onClick={() => handleVisitUrl(item.property_data.url)}>\n                          {propertyFilters.persona === 'Young families' ? <h5>{(item.persona_data_list[0].young_families).toFixed(4)}</h5> :\n                            propertyFilters.persona === 'Young professionals' ? <h5>{(item.persona_data_list[0].young_professionals).toFixed(4)}</h5> :\n                              propertyFilters.persona === 'Vibes' ? <h5>{(item.persona_data_list[0].vibes).toFixed(4)}</h5> :\n                                propertyFilters.persona === 'Commuter convenience' ? <h5>{(item.persona_data_list[0].commuter_convenience).toFixed(4)}</h5> : ''}\n                        </div>\n                        <div id='column10' className='column'>\n                          <button onClick={() => goToListing(item)}>Go</button>\n                        </div>\n                      </div>\n                      <hr className='property-divider' />\n\n                    </>\n                  )\n                }) : ''}\n              </div>\n            </div>\n          </section>\n          : loading ?\n            <div className='property-table-loading'>\n              <Loading />\n            </div>\n            : ''}\n      </section>\n      <KYCInput\n        propertyInputShow={propertyInputShow}\n        handlePropertyInputClose={handlePropertyInputClose}\n        propertyFilters={propertyFilters}\n        setPropertyFilters={setPropertyFilters}\n        boroughs={boroughs}\n        salesPrices={salesPrices}\n        rentalPrices={rentalPrices}\n        propertyTypeList={propertyTypeList}\n        loadProperties={loadProperties}\n      />\n\n\n    </>\n\n  )\n}\n\nexport default TopProperties","import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport { NumericFormat } from 'react-number-format'\nimport NavBar from '../../tools/NavBar'\nimport ProfileMobileSlider from '../../tools/ProfileMobileSlider'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport ReactSwitch from 'react-switch'\nimport AIListingGenrator from './AIListingGenrator'\nimport PropertyInsightsOverview from '../propertyDetails/PropertyInsightsOverview'\nimport SavedListings from './SavedListings'\nimport TopProperties from './TopProperties'\n\n\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nconst ListingGenerator = () => {\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for loading\n  const [loading, setLoading] = useState()\n\n\n  // Create a reference to the div\n  const textDivRef = useRef(null)\n\n  // set state for completing a search\n  const [search, setSearch] = useState(false)\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Listing generator')\n  const [profileDetail, setProfileDetail] = useState('Listing generator')\n\n  // state for changing the view to insights results\n  const [insightView, setInsightView] = useState('Search')\n\n  // lisrting options\n  const [listingSelection, setListingSelection] = useState('Property insights')\n\n  const [postcodeSubstring, setPostcodeSubstring] = useState('')\n\n  const [addressSubstring, setAddressSubstring] = useState('')\n\n  const [listingRoute, setListingRoute] = useState('Off')\n\n  // listing generator form\n  const [listingFields, setListingFields] = useState({\n    postcode: '',\n    address: '',\n    description: '',\n    channel: '',\n    bedrooms: '',\n    bathrooms: '',\n    property_type: '',\n    tenure: '',\n    size: '',\n    on_road_parking: '',\n    off_road_parking: '',\n    balcony: '',\n    primary_schools: 0,\n    secondary_schools: 0,\n    tubes: 0,\n    trains: 0,\n    restaurants: 0,\n    pubs: 0,\n    supermarkets: 0,\n    gyms: 0,\n    parks: 0,\n    evs: 0,\n    crime: 0,\n  })\n\n\n  // ai listing fields\n  const [aiFields, setAiFields] = useState({\n    'location': '',\n    'size': '',\n    'property_type': '',\n    'bedrooms': '',\n    'bathrooms': '',\n    'en_suites': '',\n    'amenities': [],\n    'channel': '',\n    'additional_info': '',\n    'price': '',\n    'restaurants': '',\n    'pubs': '',\n    'supermarkets': '',\n    'tube': '',\n    'trains': '',\n    'parks': '',\n    'evs': '',\n    'primary_schools': '',\n    'secondary_schools': '',\n    'gyms': '',\n  })\n\n  // features to include in checkbox: \n  const features = [\n    'balcony', 'on-road parking', 'off-road parking',\n    'private gated', 'private garage', 'shared garage',\n    'lift', 'open-plan', 'concierge', 'gym',\n    'pool & spa', 'penthouse', 'duplex', 'garden'\n  ]\n\n\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants] = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  const [aiSearch, setAiSearch] = useState()\n\n  const [aiReady, setAiReady] = useState(false)\n\n  // start ai seearch\n  const [searchGo, setSearchGo] = useState(false)\n\n  const [secondaryDetail, setSecondaryDetail] = useState('Table')\n  const [primaryDetail, setPrimaryDetail] = useState('Table')\n\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = async (listingType) => {\n    try {\n\n      // if its an ai load, then we need to set a state to organise the loading of the dataset\n      if (listingType === 'listing_ai_total') {\n        setAiReady(false) // Before loading the data for AI\n      }\n\n      // we need to access the postcode data in all eventualities\n      const { data } = await axios.post('/api/postcodes/', { postcode: postcodeSubstring })\n      console.log('postcode data ->', data)\n      setPostcodes(data)\n\n      increaseUsageCount(listingType) // Pass the listing type to the increaseUsageCount function\n\n      // if the postcode data arrives and its an ai search, we want to load the rest of the data\n      if (listingType === 'listing_ai_total') {\n        setSearchGo(true)\n      }\n\n      // if its just an insights load, wee want to add this to th db then navigate to the insights page\n      if (listingType === 'listing_insight_total') {\n        // const { data } = await axios.get(`/api/postcodes/${postcodeSubstring}`)\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Insights',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        setResultsToLocalStorage()\n      }\n\n      // if its a normal listing build, then we want to run the code for that\n      if (listingType === 'listing_normal_total') {\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Listing',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n      }\n\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n\n  // define function for setting results to storage\n  const setResultsToLocalStorage = (token) => {\n    window.localStorage.setItem('listing-postcode', JSON.stringify(postcodeSubstring))\n  }\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n\n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n\n      // handle independent schools\n      if (item.school_type === 'Independent school') {\n        item.within_catchment = 'N/a'\n\n        // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n\n        // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n\n        // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n\n        // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n\n        // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n\n        // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n\n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      } else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n        // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n        // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n        // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    // console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n\n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n\n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    // console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n    if (listingFields.restaurants === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        restaurants: `${nearbyRestaurants.length} restaurants within 15 min walk, with more than ${cuisines} cuisines available`,\n      }))\n    }\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n    // extract the key studios\n    const topThreeStudios = []\n\n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n\n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n    if (listingFields.gyms === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        gyms: `${nearbyStudios.length} gyms within 15 min walk, including ${topThreeStudios[0]} and  ${topThreeStudios[1]}`,\n      }))\n    }\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n\n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n\n    // extract the key studios\n    const topThreeSupermarkets = []\n\n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_brand)) {\n        topThreeSupermarkets.push(supermarket.supermarket_brand)\n        uniqueSupermarkets.add(supermarket.supermarket_brand)\n\n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    // console.log('Nearby supermarkets ->', nearbySupermarkets)\n    if (listingFields.supermarkets === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        supermarkets: `${nearbySupermarkets.length} supermarkets within 15 min walk, including ${topThreeSupermarkets[0]} and ${topThreeSupermarkets[1]}`,\n      }))\n    }\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n\n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n\n    if (listingFields.tubes === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        tubes: `${nearbyTubes.length} within 15 min walk, including ${nearbyTubes[0].station_name} and ${nearbyTubes[1].station_name}`,\n      }))\n    }\n\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        // console.log('ev data ->', data)\n        setEv(data)\n        // Average walking speed is 5km/h. \n        const walkDistanceKm10 = 5 * (10 / 60)\n\n        // filter out restaurants firther than 15 mins walk away\n        const nearbyChargers = data.filter(item => {\n          const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n          const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n          const a =\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2)\n          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n          const distanceKm = R * c\n\n          item.distance_between = distanceKm\n          item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n          return distanceKm <= walkDistanceKm10\n        }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n        setEv1(nearbyChargers)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        // console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n\n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    // console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Load and sort tubes data\n  const loadTrainsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        // console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTrains1(nearbyTrains)\n    // console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n\n  // calculation to determine the inputs on the form and the toggle\n  const toggleStatus = (key) => {\n    setListingFields(prevData => ({\n      ...prevData,\n      [key]: prevData[key] === 1 ? 0 : 1,\n    }))\n  }\n\n\n  // Copy function\n  const handleCopyText = () => {\n    const htmlContent = textDivRef.current.innerHTML\n    const el = document.createElement('div')\n    el.contentEditable = true\n    el.innerHTML = htmlContent\n    document.body.appendChild(el)\n    const range = document.createRange()\n    range.selectNodeContents(el)\n    const sel = window.getSelection()\n    sel.removeAllRanges()\n    sel.addRange(range)\n    el.focus()\n    document.execCommand('copy')\n    document.body.removeChild(el)\n  }\n\n\n\n  // Increase value in db based on successful response\n  const increaseUsageCount = async (listingType) => {\n    // console.log('trying to increase')\n    try {\n      const { data } = await axios.post('/api/usage/listing/', { column: listingType }, {\n        headers: {\n          Authorization: `Bearer ${getAccessToken()}`,\n        },\n      })\n      console.log(data)\n      if (data.status === 'success') {\n        // console.log('Usage count increased successfully')\n      } else {\n        // console.error('Failed to increase usage count:', data.message)\n      }\n    } catch (error) {\n      console.error('Error:', error)\n    }\n  }\n\n\n\n  const handleCheckboxChange = (feature) => {\n    setAiFields(prev => {\n      // Check if the feature is already in the amenities array\n      if (prev.amenities.includes(feature)) {\n        // If it is, remove it\n        return {\n          ...prev,\n          amenities: prev.amenities.filter(a => a !== feature),\n        }\n      } else {\n        // If it isn’t, add it\n        return {\n          ...prev,\n          amenities: [...prev.amenities, feature],\n        }\n      }\n    })\n  }\n\n\n  const handleInsightClick = () => {\n    loadPostcodeData('listing_insight_total')\n    setListingFields(prevState => ({ ...prevState, request_type: 'insights' }))\n    setInsightView('Results')\n  }\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    navigate('/login')\n  }\n\n\n  // check to see if the user has come from the favourites section\n  // useEffect(() => {\n  //   const listing = JSON.parse(localStorage.getItem('listing-route'))\n  //   setListingRoute(listing)\n  //   console.log(listing)\n  // }, [])\n\n\n  // useEffect(() => {\n  //   const listing = JSON.parse(localStorage.getItem('listing-route'))\n  //   console.log('listing route ->', listing)\n\n  const fetchData = async () => {\n    const listing = JSON.parse(localStorage.getItem('listing-route'))\n    console.log('listing route ->', listing)\n    if (listing === 'On') {\n      setInsightView('Results')\n      const postcodeRoute = JSON.parse(localStorage.getItem('listing-postcode'))\n      console.log('postcode-route', postcodeRoute)\n      try {\n        const { data } = await axios.post('/api/postcodes/', { postcode: postcodeRoute })\n        console.log('postcode data ->', data)\n        setPostcodes(data)\n        window.localStorage.setItem('listing-route', JSON.stringify('Off'))\n        setListingRoute('Off')\n      } catch (error) {\n        console.error('Error fetching postcodes:', error)\n      }\n    }\n  }\n  //   fetchData()\n  // }, [])\n\n\n  // load data to trigger data load if user comes from the favourites section\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     if (listingRoute === 'On') {\n  //       setInsightView('Results')\n  //       const postcodeRoute = JSON.parse(localStorage.getItem('listing-postcode'))\n  //       try {\n  //         const { data } = await axios.post('/api/postcodes/', { postcode: postcodeRoute })\n  //         console.log('postcode data ->', data)\n  //         setPostcodes(data)\n  //         window.localStorage.setItem('listing-route', JSON.stringify('Off'))\n  //         setListingRoute('Off')\n  //       } catch (error) {\n  //         console.error('Error fetching postcodes:', error)\n  //       }\n  //     }\n  //   }\n\n  //   fetchData()\n  // }, [listingRoute])\n\n\n\n\n  return (\n\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar\n          setProfileDetail={setProfileDetail}\n          setProfileContent={setProfileContent}\n          userData={userData}\n        />\n        <section className='main-body remove-margin' style={{ height: insightView === 'Results' ? 'auto' : 'none', marginTop: insightView === 'Results' ? '3%' : 'none' }}>\n          <section className='main-body-details'  >\n            <section className='listing-generator'>\n              {/* <h1>Wittle listing generator</h1> */}\n              {/* <h1>Insert your property details to build a listing or explore insights</h1> */}\n\n              <div className='listing-options'>\n                <div className='listing-buttons'>\n                  <h5 className='no-print' onClick={() => setListingSelection('Property insights')} style={{ borderBottom: listingSelection === 'Property insights' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Property insights' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Property insights' ? '700' : '400' }}>Property insights</h5>\n                  <h5 className='no-print' onClick={() => setListingSelection('Listing generator')} style={{ borderBottom: listingSelection === 'Listing generator' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Listing generator' ? '700' : '400' }}>Listing generator</h5>\n                  <h5 className='no-print' onClick={() => setListingSelection('AI listing generator')} style={{ borderBottom: listingSelection === 'AI listing generator' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'AI listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'AI listing generator' ? '700' : '400' }}>AI listing generator</h5>\n                  <h5 className='no-print' onClick={() => setListingSelection('Saved searches')} style={{ borderBottom: listingSelection === 'Saved searches' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Saved searches' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Saved searches' ? '700' : '400' }}>Saved searches</h5>\n                  {userData && (userData.id === 1 || userData.id === 62) ? <h5 className='no-print' onClick={() => setListingSelection('Top properties')} style={{ borderBottom: listingSelection === 'Top properties' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Top properties' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Top properties' ? '700' : '400' }}>Top properties</h5> : ''}\n                </div>\n                <div className='logout-button' onClick={removeItemFromStorage}>\n                  <div className='logout-icon'></div>\n                </div>\n\n\n              </div>\n              <hr className='title-line' />\n\n              {listingSelection === 'Property insights' && userData &&\n                ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                  (userData.usage_stats[0].package === 'Unlimited') ||\n                  (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n                <>\n                  {insightView === 'Search' ?\n                    <div className='basic-listing-wrapper'>\n\n                      <div className='property-insight-inputs'>\n                        <h3 className='insight-title'>Insert full postcode to extract details about property</h3>\n                        <div className='double-input-block'>\n                          <div className='input-block small'>\n                            <h3>Postcode</h3>\n                            <input\n                              type=\"text\"\n                              value={postcodeSubstring}\n                              onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                              placeholder=\"Enter postcode\"></input>\n                          </div>\n                          <div className='input-block medium'>\n                            <h3>Address</h3>\n                            <input\n                              type=\"text\"\n                              value={addressSubstring}\n                              onChange={e => {\n                                const value = e.target.value\n                                setAddressSubstring(value)\n                                setListingFields(prevData => ({ ...prevData, address: value }))\n                              }}\n                              placeholder=\"Enter address\"></input>\n                          </div>\n                        </div>\n\n                        <div className='input-block large'>\n                          <h3>Channel</h3>\n\n                          <select className='listing-dropdown' onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                            <option>--- Select ---</option>\n                            <option>Sales</option>\n                            <option>Rental</option>\n                          </select>\n                        </div>\n                        <div className='search-section'>\n                          <button className='load-insights' onClick={handleInsightClick}>See insights</button>\n\n                        </div>\n                      </div>\n                    </div>\n                    : insightView === 'Results' ?\n                      <PropertyInsightsOverview\n                        postcodeSubstring={postcodeSubstring}\n                        addressSubstring={addressSubstring}\n                        listingFields={listingFields}\n                        postcodeData={postcodeData}\n                        topPrimaries={topPrimaries}\n                        topSecondaries={topSecondaries}\n                        restaurants1={restaurants1}\n                        cuisines={cuisines}\n                        topRestaurants={topRestaurants}\n                        setRestaurants1={setRestaurants1}\n                        gyms1={gyms1}\n                        setGyms1={setGyms1}\n                        mainGyms={mainGyms}\n                        supermarkets1={supermarkets1}\n                        setSupermarkets1={setSupermarkets1}\n                        mainSupermarkets={mainSupermarkets}\n                        pubs1={pubs1}\n                        topPubs={topPubs}\n                        tubes1={tubes1}\n                        setTubes1={setTubes1}\n                        trains1={trains1}\n                        insightView={insightView}\n                        setInsightView={setInsightView}\n                        primaryData1={primaryData1}\n                        setPrimaryData1={setPrimaryData1}\n                        secondaryData1={secondaryData1}\n                        setSecondaryData1={setSecondaryData1}\n                        ev1={ev1}\n                        setEv1={setEv1}\n                        secondaryDetail={secondaryDetail}\n                        setSecondaryDetail={setSecondaryDetail}\n                        primaryDetail={primaryDetail}\n                        setPrimaryDetail={setPrimaryDetail}\n                      />\n                      : ''}\n                </>\n\n\n                : listingSelection === 'Listing generator' && userData &&\n                  ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                    (userData.usage_stats[0].package === 'Unlimited') ||\n                    (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n                  <>\n                    <div className='full-listing-wrapper'>\n                      <div className='full-listing-inputs'>\n\n                        <div className='property-insight-inputs'>\n                          <h3 className='insight-title'>Input details and select features you want to include in your listing</h3>\n                          <div className='double-input-block'>\n                            <div className='input-block small'>\n                              <h3>Postcode</h3>\n                              <input\n                                type=\"text\"\n                                value={postcodeSubstring}\n                                onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                                placeholder=\"Enter postcode...\"></input>\n                            </div>\n                            <div className='input-block medium'>\n                              <h3>Address</h3>\n                              <input\n                                type=\"text\"\n                                value={addressSubstring}\n                                onChange={e => {\n                                  const value = e.target.value\n                                  setAddressSubstring(value)\n                                  setListingFields(prevData => ({ ...prevData, address: value }))\n                                }}\n                                placeholder=\"Enter address\"></input>\n                            </div>\n                          </div>\n                          <div className='single-input-block'>\n\n                            <div className='input-block large'>\n                              <h3>Channel</h3>\n\n                              <select className='listing-dropdown' onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                                <option>--- Select ---</option>\n                                <option>Sales</option>\n                                <option>Rental</option>\n                              </select>\n                            </div>\n                          </div>\n                          <div className='single-input-block'>\n\n                            <div className='input-block large'>\n                              <h3>Description</h3>\n                              <textarea id=\"description\" value={listingFields.description} rows=\"4\" placeholder='Enter description' onChange={e => setListingFields(prevState => ({ ...prevState, description: e.target.value }))}></textarea>\n                            </div>\n                          </div>\n                          <div className='lifestyle-input-block'>\n                            <h3 className='insight-title'>Lifestyle elements to include</h3>\n\n                            <div className='lifestyle-input-wrap'>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='primaries'></div>\n                                <h3>Primary schools</h3>\n                                <ReactSwitch\n                                  checked={listingFields.primary_schools === 1}\n                                  onChange={() => toggleStatus('primary_schools')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='secondaries'></div>\n                                <h3>Secondary schools</h3>\n                                <ReactSwitch\n                                  checked={listingFields.secondary_schools === 1}\n                                  onChange={() => toggleStatus('secondary_schools')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='tubes'></div>\n                                <h3>Tubes</h3>\n                                <ReactSwitch\n                                  checked={listingFields.tubes === 1}\n                                  onChange={() => toggleStatus('tubes')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='trains'></div>\n                                <h3>Trains</h3>\n                                <ReactSwitch\n                                  checked={listingFields.trains === 1}\n                                  onChange={() => toggleStatus('trains')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='evs'></div>\n                                <h3>Electric vehicles</h3>\n                                <ReactSwitch\n                                  checked={listingFields.evs === 1}\n                                  onChange={() => toggleStatus('evs')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n\n\n                                <div className='lifestyle-icon' id='restaurants'></div>\n                                <h3>Restaurants</h3>\n                                <ReactSwitch\n                                  checked={listingFields.restaurants === 1}\n                                  onChange={() => toggleStatus('restaurants')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n\n                                <div className='lifestyle-icon' id='pubs'></div>\n                                <h3>Pubs</h3>\n                                <ReactSwitch\n                                  checked={listingFields.pubs === 1}\n                                  onChange={() => toggleStatus('pubs')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='parks'></div>\n                                <h3>Parks</h3>\n                                <ReactSwitch\n                                  checked={listingFields.parks === 1}\n                                  onChange={() => toggleStatus('parks')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='gyms'></div>\n                                <h3>Gyms</h3>\n                                <ReactSwitch\n                                  checked={listingFields.gyms === 1}\n                                  onChange={() => toggleStatus('gyms')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='supermarkets'></div>\n                                <h3>Supermarkets</h3>\n                                <ReactSwitch\n                                  checked={listingFields.supermarkets === 1}\n                                  onChange={() => toggleStatus('supermarkets')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                              <div className='input-block-icons'>\n                                <div className='lifestyle-icon' id='crime'></div>\n                                <h3>Crime</h3>\n                                <ReactSwitch\n                                  checked={listingFields.crime === 1}\n                                  onChange={() => toggleStatus('crime')}\n                                  onColor='#ED6B86'\n                                  offColor='#D5D5D5'\n\n                                  uncheckedIcon={null}\n                                  checkedIcon={null}\n                                />\n                              </div>\n                            </div>\n\n                          </div>\n                          <div className='listing-search-section'>\n                            <button className='load-insights' onClick={() => loadPostcodeData('listing_normal_total')}>Load description</button>\n                          </div>\n                        </div>\n                      </div>\n                      <section className='full-listing-outputs'>\n                        <div className='results-header'>\n                          <div className='header-text'>\n                            <h3 className='results-title'>Your listing</h3>\n                          </div>\n                          <div className='header-cta'>\n                            <div className='copy-button' onClick={handleCopyText}>\n                              <div className='copy-icon'></div>\n                              <h3>Copy</h3>\n                            </div>\n                          </div>\n\n                        </div>\n\n                        {/* Results that you will see on the page */}\n                        <div className='results-section'>\n                          <div className='results-description'>\n                            {postcodeData && listingFields.description !== '' ? <h3>{listingFields.description}</h3> : ''}\n\n                          </div>\n                          {postcodeData ? <h3 className='results-sub-title'>What you should know about this area</h3> : ''}\n\n                          {restaurants1 && listingFields.restaurants === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='restaurants'></div>\n                                  <h3>Restaurants</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{restaurants1.length} restaurants within 15 mins walk</li>\n                                    <li>more than {cuisines} cuisines available</li>\n                                    <li>{topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</li>\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {pubs1 && listingFields.pubs === 1 ?\n\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='pubs'></div>\n                                  <h3>Pubs</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{pubs1.length} pubs within 15 mins walk</li>\n                                    <li>{topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</li>\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {primaryData1 && listingFields.primary_schools === 1 ?\n\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='primaries'></div>\n                                  <h3>Primary schools</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    {primaryData1.slice(0, 5).map((school, index) => (\n                                      <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                    ))}\n                                  </ul>\n\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n\n                          {secondaryData1 && listingFields.secondary_schools === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='secondaries'></div>\n                                  <h3>Secondary schools</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    {secondaryData1.slice(0, 5).map((school, index) => (\n                                      <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                    ))}\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {gyms1 && listingFields.gyms === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='gyms'></div>\n                                  <h3>Gyms</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{gyms1.length} gyms within 15 mins walk</li>\n                                    {mainGyms.length === 3 ? <li>includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</li> : mainGyms.length === 2 ? <li>includes {mainGyms[0]} & {mainGyms[1]} </li> : mainGyms.length === 1 ? <li>includes {mainGyms[0]}</li> : ''}\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {supermarkets1 && listingFields.supermarkets === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='supermarkets'></div>\n                                  <h3>Supermarkets</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>🛒 {supermarkets1.length} supermarkets within 15 mins walk</li>\n                                    {mainSupermarkets.length === 3 ? <li>🛒 includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</li> : mainSupermarkets.length === 2 ? <li>🛒 includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </li> : mainSupermarkets.length === 1 ? <li>🛒 includes {mainSupermarkets[0]}</li> : ''}\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {tubes1 && listingFields.tubes === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='tubes'></div>\n                                  <h3>Tubes</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{tubes1.length} stations within 20 mins walk</li>\n                                    {\n                                      tubes1.slice(0, 3).map((train, index) => (\n                                        <li key={index}>{train.station_name} - {train.line} - {train.walkTimeMin} mins walk</li>\n                                      ))\n                                    } </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {trains1 && listingFields.trains === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='trains'></div>\n                                  <h3>Trains</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{trains1.length} stations within 20 mins walk</li>\n                                    {\n                                      trains1.slice(0, 3).map((train, index) => (\n                                        <li key={index}>{train.station} - {train.walkTimeMin} mins walk</li>\n                                      ))\n                                    }\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {postcodeData && listingFields.parks === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='parks'></div>\n                                  <h3>Parks</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name0} - {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name1} - {Math.ceil((((postcodeData[0].parks_postcode.distance1) / 1000) / 5) * 60)} mins walk</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name2} - {Math.ceil((((postcodeData[0].parks_postcode.distance2) / 1000) / 5) * 60)} mins walk</li>\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {ev1 && listingFields.evs === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='evs'></div>\n                                  <h3>Electric vehicle charging</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</li>\n                                    <li>in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</li>\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                        </div>\n\n\n                        {/* Results that you will get when you click export */}\n                        <div className='results-section-icons' ref={textDivRef}>\n                          <div className='results-description'>\n                            {postcodeData && listingFields.description !== '' ? <h3>{listingFields.description}</h3> : ''}\n\n                          </div>\n                          {postcodeData ? <h3 className='results-sub-title'>What you should know about this area</h3> : ''}\n\n                          {restaurants1 && listingFields.restaurants === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='restaurants'></div>\n                                  <h3>🥘 Restaurants</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    {/* <li>{restaurants1.length} restaurants within 15 mins walk</li> */}\n                                    <li>more than {cuisines} cuisines available</li>\n                                    <li>{topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</li>\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {pubs1 && listingFields.pubs === 1 ?\n\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='pubs'></div>\n                                  <h3>🍺 Pubs</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{pubs1.length} pubs within 15 mins walk</li>\n                                    <li>{topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</li>\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {primaryData1 && listingFields.primary_schools === 1 ?\n\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='primaries'></div>\n                                  <h3>👶 Primary schools</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    {primaryData1.slice(0, 5).map((school, index) => (\n                                      <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                    ))}\n                                  </ul>\n\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n\n                          {secondaryData1 && listingFields.secondary_schools === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='secondaries'></div>\n                                  <h3>🎓 Secondary schools</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    {secondaryData1.slice(0, 5).map((school, index) => (\n                                      <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                    ))}\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {gyms1 && listingFields.gyms === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='gyms'></div>\n                                  <h3>🏋️‍♂️ Gyms</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{gyms1.length} gyms within 15 mins walk</li>\n                                    {mainGyms.length === 3 ? <li>includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</li> : mainGyms.length === 2 ? <li>includes {mainGyms[0]} & {mainGyms[1]} </li> : mainGyms.length === 1 ? <li>includes {mainGyms[0]}</li> : ''}\n                                  </ul>\n                                </>\n                              </div><hr className='results-divider' />\n                            </>\n                            : ''}\n                          {supermarkets1 && listingFields.supermarkets === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='supermarkets'></div>\n                                  <h3>🛒 Supermarkets</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{supermarkets1.length} supermarkets within 15 mins walk</li>\n                                    {mainSupermarkets.length === 3 ? <li>includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</li> : mainSupermarkets.length === 2 ? <li>Includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </li> : mainSupermarkets.length === 1 ? <li>Iincludes {mainSupermarkets[0]}</li> : ''}\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {tubes1 && listingFields.tubes === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='tubes'></div>\n                                  <h3>🚇 Tubes</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{tubes1.length} stations within 20 mins walk</li>\n                                    {\n                                      tubes1.slice(0, 3).map((train, index) => (\n                                        <li key={index}>{train.station_name} - {train.line} - {train.walkTimeMin} mins walk</li>\n                                      ))\n                                    } </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {trains1 && listingFields.trains === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='trains'></div>\n                                  <h3>🚈 Trains</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{trains1.length} stations within 20 mins walk</li>\n                                    {\n                                      trains1.slice(0, 3).map((train, index) => (\n                                        <li key={index}>{train.station} - {train.walkTimeMin} mins walk</li>\n                                      ))\n                                    }\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {postcodeData && listingFields.parks === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='parks'></div>\n                                  <h3>🌳 Parks</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name0} - {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name1} - {Math.ceil((((postcodeData[0].parks_postcode.distance1) / 1000) / 5) * 60)} mins walk</li>\n                                    <li>{postcodeData[0].parks_postcode.park_name2} - {Math.ceil((((postcodeData[0].parks_postcode.distance2) / 1000) / 5) * 60)} mins walk</li>\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                          {ev1 && listingFields.evs === 1 ?\n                            <>\n                              <div className='results-block'>\n                                <div className='result-block-header'>\n                                  <div className='lifestyle-icon' id='evs'></div>\n                                  <h3>⛽️ Electric vehicle charging</h3>\n                                </div>\n                                <>\n                                  <ul className='results-details'>\n                                    <li>{postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</li>\n                                    <li>in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</li>\n                                  </ul>\n                                </>\n                              </div>\n                              <hr className='results-divider' />\n                            </>\n                            : ''}\n                        </div>\n                      </section>\n                    </div>\n                  </>\n\n                  : listingSelection === 'AI listing generator' && userData &&\n                    ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                      (userData.usage_stats[0].package === 'Unlimited') ||\n                      (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n\n                    <>\n                      <AIListingGenrator />\n                    </>\n\n\n                    : listingSelection === 'Saved searches' && userData && userData.listing_favourites.length > 0 ?\n\n                      <SavedListings\n                        userData={userData}\n                        loadUserData={loadUserData}\n                        setListingSelection={setListingSelection}\n                      />\n\n\n                      : listingSelection === 'Top properties' && userData ?\n\n                        <TopProperties\n                          userData={userData}\n                          loadUserData={loadUserData}\n                          setListingSelection={setListingSelection}\n                          fetchData={fetchData}\n                        />\n                        : ''}\n\n\n            </section>\n          </section>\n        </section>\n\n\n      </section>\n\n\n\n    </>\n  )\n}\n\nexport default ListingGenerator\n\n\n\n"],"names":["_ref","addressSubstring","postcodeSubstring","listingFields","postcodeData","topPrimaries","topSecondaries","restaurants1","cuisines","topRestaurants","gyms1","mainGyms","supermarkets1","mainSupermarkets","pubs1","topPubs","tubes1","trains1","setInsightView","primaryData1","setPrimaryData1","secondaryData1","setSecondaryData1","setTubes1","setRestaurants1","setPubs1","setSupermarkets1","setGyms1","ev1","setEv1","secondaryDetail","setSecondaryDetail","primaryDetail","setPrimaryDetail","propertyView","setPropertyView","useState","neighbourhoodScore","setNeighbourhoodScore","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","sliderSelection","setSliderSelection","tableMapView","setTableMapView","useEffect","calculateScore","calculation","Math","ceil","crime","percentile","ev","fitness","parks_lsoa","london_percentile","restaurants","normal_percentile","supermarkets","tubes","_jsx","_Fragment","children","_jsxs","className","onClick","channel","id","window","print","PropertySummary","SchoolHighlights","LifestyleHighlights","TransportHighlights","NeighbourhoodHighlights","PropertyDetailSlider","placeholder","PrimaryDetails","listType","SecondaryDetails","TubeDetails","RestaurantDetails","PubDetails","SupermarketDetails","FitnessDetails","EVDetails","userData","loadUserData","setListingSelection","navigate","useNavigate","favouriteTab","setFavouriteTab","useLocation","listing_favourites","length","map","item","index","console","log","postcode","localStorage","setItem","JSON","stringify","goToListing","address","date_added","async","isUserAuth","data","axios","delete","property","headers","Authorization","getAccessToken","error","deleteListingFavourite","propertyInputShow","handlePropertyInputClose","propertyFilters","setPropertyFilters","boroughs","rentalPrices","salesPrices","propertyTypeList","loadProperties","Modal","show","onHide","backdrop","Body","value","onChange","e","prevData","target","area","borough","rental_price_min","price","NumericFormat","displayType","thousandSeparator","prefix","rental_price_max","bedrooms_min","bedrooms_max","propertyType","type","name","checked","garden","htmlFor","size","persona","fetchData","loading","setLoading","properties","setProperties","setPropertyInputShow","filters","parse","getItem","propertyData","handleVisitUrl","url","open","handlePropertyInputShow","Loading","property_data","displayAddress","persona_data_list","lsoa","added_revised","reduced_revised","bedrooms","agent","young_families","toFixed","young_professionals","vibes","commuter_convenience","KYCInput","channelValue","areaValue","personaValue","propertyTypeValue","gardenValue","sizeValue","bedroomsMin","bedroomsMax","priceMin","priceMax","personaAttributeToSortBy","toLowerCase","replace","get","sort","a","b","personaValueA","defaults","xsrfCookieName","xsrfHeaderName","ListingGenerator","errors","setErrors","setUserData","textDivRef","useRef","search","setSearch","profileContent","setProfileContent","profileDetail","setProfileDetail","insightView","listingSelection","setPostcodeSubstring","setAddressSubstring","listingRoute","setListingRoute","setListingFields","description","bathrooms","property_type","tenure","on_road_parking","off_road_parking","balcony","primary_schools","secondary_schools","trains","pubs","gyms","parks","evs","aiFields","setAiFields","setPostcodes","primaryData","setPrimaryData","secondaryData","setSecondaryData","setTopPrimaries","setTopSecondaries","setRestaurants","setGyms","setPubs","setSupermarkets","setEv","setCuisines","setTopRestaurants","setTopPubs","setMainGyms","setMainSupermarkets","setTubes","setTrains","setTrains1","aiSearch","setAiSearch","aiReady","setAiReady","searchGo","setSearchGo","getUserToken","getUser","loadPostcodeData","listingType","post","increaseUsageCount","modifiedData","request_type","setResultsToLocalStorage","token","loadPrimaryData","getPrimaries","walkDistanceKm20","R","toRad","PI","kmPerMinute","getNearbyPrimaries","nearbyPrimaries","filter","dLat","parseFloat","latitude","longitude","dLon","sin","cos","c","atan2","sqrt","distanceKm","distance_between","walkTimeMin","round","distancePercent","max_distance","school_type","within_catchment","additional_status","firstSchoolNames","slice","loadSecondaryData","getSecondaries","getNearbySecondaries","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","includes","loadRestaurantData","getData","walkDistanceKm15","getNearbyRestaurants","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","restaurant_name","Set","countUniqueCuisines","prevState","loadFitnessData","getNearbyStudios","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","gym","gym_group","has","push","add","loadSupermarketData","getNearbySupermatkets","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","loadTubesData","getNearbyTubes","nearbyTubes","lat","station_name","loadEVdata","nearbyChargers","loadPubsData","getNearbyPubs","nearbyPubs","topThreePubs","pub","loadTrainsData","getNearbyTrains","nearbyTrains","toggleStatus","key","column","status","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","style","height","marginTop","borderBottom","textUnderlineOffset","fontWeight","removeItem","usage_stats","package","listing_monthly_count","toUpperCase","handleInsightClick","PropertyInsightsOverview","rows","ReactSwitch","onColor","offColor","uncheckedIcon","checkedIcon","handleCopyText","htmlContent","current","innerHTML","el","document","createElement","contentEditable","body","appendChild","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","focus","execCommand","removeChild","school","school_name","ofsted_results","train","line","station","parks_postcode","park_name0","distance0","park_name1","distance1","park_name2","distance2","ev_10_mins","ref","AIListingGenrator","SavedListings","TopProperties","listing","postcodeRoute"],"sourceRoot":""}