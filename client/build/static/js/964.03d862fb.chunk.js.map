{"version":3,"file":"static/js/964.03d862fb.chunk.js","mappings":"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","sources":["components/tools/ProfileMobileSlider.js","components/whiteLabel/comparisonSection/WhiteComparison.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\n\nconst ProfileMobileSlider = ({ setProfileContent, profileContent, profileDetail, setProfileDetail }) => {\n\n  return (\n    <>\n      <div className='mobile-selector-section'>\n        <div className='mobile-title-slider'>\n          {profileContent === 'Search' ?\n            <>\n              <h2 className='pills' onClick={() => setProfileDetail('Wittle search')} style={{ fontWeight: profileDetail === 'Wittle search' ? '700' : '500', backgroundColor: profileDetail === 'Wittle search' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Wittle search</h2>\n              <h2 className='pills' onClick={() => setProfileDetail('Property search')} style={{ fontWeight: profileDetail === 'Property search' ? '700' : '500', backgroundColor: profileDetail === 'Property search' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Property search</h2>\n              <h2 className='pills' onClick={() => setProfileDetail('Saved properties')} style={{ fontWeight: profileDetail === 'Saved properties' ? '700' : '500', backgroundColor: profileDetail === 'Saved properties' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Saved properties</h2>\n              <h2 className='pills' onClick={() => setProfileDetail('Saved searches')} style={{ fontWeight: profileDetail === 'Saved searches' ? '700' : '500', backgroundColor: profileDetail === 'Saved searches' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Saved searches</h2>\n              <h2 className='pills' onClick={() => setProfileDetail('Property comparison')} style={{ fontWeight: profileDetail === 'Property comparison' ? '700' : '500', backgroundColor: profileDetail === 'Property comparison' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Property comparison</h2>\n            </>\n            :\n            profileContent === 'Lifestyle' ?\n              <>\n                <h2 className='pills' onClick={() => setProfileDetail('Lifestyle search')} style={{ fontWeight: profileDetail === 'Lifestyle search' ? '700' : '500', backgroundColor: profileDetail === 'Lifestyle search' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Search</h2>\n                <h2 className='pills' onClick={() => setProfileDetail('List')} style={{ fontWeight: profileDetail === 'List' ? '700' : '500', backgroundColor: profileDetail === 'List' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Saved places</h2>\n                <h2 className='pills' onClick={() => setProfileDetail('Lifestyle insights')} style={{ fontWeight: profileDetail === 'Lifestyle insights' ? '700' : '500', backgroundColor: profileDetail === 'Lifestyle insights' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Insights</h2>\n              </>\n              :\n              profileContent === 'Admin' ?\n                <>\n                  <h2 className='pills' onClick={() => setProfileDetail('Admin dashboard')} style={{ fontWeight: profileDetail === 'Admin dashboard' ? '700' : '500', backgroundColor: profileDetail === 'Admin dashboard' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Dashboard</h2>\n                  <h2 className='pills' onClick={() => setProfileDetail('Admin opportunities')} style={{ fontWeight: profileDetail === 'Admin opportunities' ? '700' : '500', backgroundColor: profileDetail === 'Admin opportunities' ? '#FFA7E5' : 'rgba(255, 167, 229, 0.1)' }}>Opportunity</h2>\n                </>\n                :\n                ''\n          }\n        </div>\n        {/* } */}\n      </div>\n\n\n    </>\n  )\n}\n\nexport default ProfileMobileSlider","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport { NumericFormat } from 'react-number-format'\nimport NavBar from '../../tools/NavBar'\nimport ProfileMobileSlider from '../../tools/ProfileMobileSlider'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\n\n\n\n\nconst WhiteComparison = () => {\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // setting states for property comparison\n  const [property1, setProperty1] = useState()\n  const [property2, setProperty2] = useState()\n\n  // state for user data\n  const [userData, setUserData] = useState()\n  const [propertyList, setPropertyList] = useState()\n\n\n  // define the states to capture the scores of the compared propeerties\n  const [property1Numbers, setProperty1Numbers] = useState([])\n  const [property2Numbers, setProperty2Numbers] = useState([])\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Comparison')\n  const [profileDetail, setProfileDetail] = useState('Comparison')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n\n  // state to capture the values of the two proeprties that are being compared\n  const [propertyColours, setPropertyColours] = useState({\n    property1_total: '',\n    property2_total: '',\n    property1_restaurant: '',\n    property2_reestaurant: '',\n    property1_pub: '',\n    property2_pub: '',\n    property1_cafe: '',\n    property2_cafe: '',\n    property1_takeaway: '',\n    property2_takeaway: '',\n    property1_tube: '',\n    property2_tube: '',\n    property1_train: '',\n    property2_train: '',\n    property1_supermarket: '',\n    property2_supermarket: '',\n    property1_gym: '',\n    property2_gym: '',\n    property1_park: '',\n    property2_park: '',\n    property1_primary: '',\n    property2_primary: '',\n    property1_secondary: '',\n    property2_secondary: '',\n  })\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setPropertyList(data.white_properties)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n    console.log('carrying out userData load')\n  }, [])\n\n  // update values for first property comparison\n  const updateComparison1 = (e) => {\n    setProperty1(e.target.value)\n    console.log('property 1 value ->', e.target.value)\n  }\n\n  // function for loading the first property data\n  const loadProperty1 =  () => {\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${property1}`)\n        console.log('property 1 ->', data[0])\n        setProperty1Numbers(data[0])\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // load function\n  useEffect(() => {\n    if (property1) {\n      loadProperty1()\n    }\n  }, [property1])\n\n\n  // update values for second property comparison\n  const updateComparison2 = (e) => {\n    setProperty2(e.target.value)\n    console.log('property 2 value ->', e.target.value)\n  }\n\n  // function for loading the first property data\n  const loadProperty2 =  () => {\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${property2}`)\n        console.log('property 2 ->', data[0])\n        setProperty2Numbers(data[0])\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // load function\n  useEffect(() => {\n    if (property2) {\n      loadProperty2()\n    }\n  }, [property2])\n\n  return (\n    <>\n      {userData ?\n        <section className='agent-profile-page'>\n          <div className='desktop-nav'>\n            <WhiteNavbar\n              navbarColour='#FDF7F0'\n            />\n          </div>\n          <div className='mobile-nav'>\n            <NavBarRevised\n              setProfileContent={setProfileContent}\n              profileContent={profileContent}\n              profileDetail={profileDetail}\n              setProfileDetail={setProfileDetail}\n            />\n          </div>\n          <WhiteSidebar \n            setProfileDetail={setProfileDetail}\n            variableSide={variableSide} \n            setProfileContent={setProfileContent} \n            setVariableSide={setVariableSide}\n          />    \n          <div className='comparison-grid'>\n            <div className='comparison-title'>\n              <h1>Property 1</h1>\n              <h1 className='desktop-results'>Results</h1>\n              <h1>Property 2</h1>\n            </div>\n            <div className='comparison-subtitle'>\n              <select className='comparison-dropdown' onChange={updateComparison1}>\n                <option>Select property</option>\n                {propertyList.map((property, index) => <option key={index} value={property.postcode}>{property.name}</option>)}\n              </select>\n              <select className='comparison-dropdown' onChange={updateComparison2}>\n                <option>Select property</option>\n                {propertyList.map((property, index) => <option key={index} value={property.postcode}>{property.name}</option>)}\n              </select>\n            </div>\n            {/* {property1 || property2 ?\n        <> */}\n            {/* create section to be used on mobile */}\n            <div className='comparison-properties-mobile'>\n              {userData ? userData.white_properties.filter(property => property.postcode === property1).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n              {userData ? userData.white_properties.filter(property => property.postcode === property2).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n            </div>\n\n            {/* Main section used on desktop */}\n            {/* Property on the left hand side of the page */}\n            <div className='comparison-body' style={{ justifyContent: !property1 ? 'center' : 'inherit' }}>\n              {userData ? userData.white_properties.filter(property => property.postcode === property1).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n              <div className='comparison-results'>\n\n                {/* Secondary schools */}\n                <div className='result-title'>\n                  <h5>Secondary schools</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile && (\n                      [...Array(100 - Math.round((property1Numbers.secondaries.total_score_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile ? parseInt((property1Numbers.secondaries.total_score_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile && (\n                      [...Array(parseInt((property1Numbers.secondaries.total_score_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile) ?  parseInt(property1Numbers.secondaries.total_score_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile) ? parseInt(property2Numbers.secondaries.total_score_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.secondaries && property1Numbers.secondaries.total_score_percentile &&  (\n                      [...Array(parseInt(property2Numbers.secondaries.total_score_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.secondaries && property1Numbers.secondaries.total_score_percentile) ?  parseInt(property1Numbers.secondaries.total_score_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile) ? parseInt(property2Numbers.secondaries.total_score_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.secondaries && property2Numbers.secondaries.total_score_percentile ? Math.round(property2Numbers.secondaries.total_score_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Green space */}\n                <div className='result-title'>\n                  <h5>Green space</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0] && (\n                      [...Array(100 - property1Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0] ? (property1Numbers.parks_lsoa[0].london_percentile) : ''}%</h5>\n                    {property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] && (\n                      [...Array(property1Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.parks_lsoa && property1Numbers.parks_lsoa[0]) ?  parseInt(property1Numbers.parks_lsoa[0].london_percentile) : 0) \n                            < ((property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0]) ? parseInt(property2Numbers.parks_lsoa[0].london_percentile) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] && (\n                      [...Array(property2Numbers.parks_lsoa[0].london_percentile)].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers) ?  parseInt(property1Numbers.parks_lsoa[0].london_percentile) : 0) \n                          > ((property2Numbers) ? parseInt(property2Numbers.parks_lsoa[0].london_percentile) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.parks_lsoa && property2Numbers.parks_lsoa[0] ? Math.round(property2Numbers.parks_lsoa[0].london_percentile) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Restaurants */}\n                <div className='result-title'>\n                  <h5>Restaurants</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile && (\n                      [...Array(parseInt(100 - Math.round((property1Numbers.restaurants.normal_percentile * 100))))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile ? parseInt((property1Numbers.restaurants.normal_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile && (\n                      [...Array(parseInt((property1Numbers.restaurants.normal_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile) ?  parseInt(property1Numbers.restaurants.normal_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile) ? parseInt(property2Numbers.restaurants.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.restaurants && property1Numbers.restaurants.normal_percentile &&  (\n                      [...Array(parseInt(property2Numbers.restaurants.normal_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.restaurants && property1Numbers.restaurants.normal_percentile) ?  parseInt(property1Numbers.restaurants.normal_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile) ? parseInt(property2Numbers.restaurants.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.restaurants && property2Numbers.restaurants.normal_percentile ? Math.round(property2Numbers.restaurants.normal_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Pubs */}\n                <div className='result-title'>\n                  <h5>Pubs</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile && (\n                      [...Array(parseInt(100 - Math.round((property1Numbers.pubs.normal_percentile * 100))))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile ? parseInt((property1Numbers.pubs.normal_percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile && (\n                      [...Array(parseInt((property1Numbers.pubs.normal_percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile) ?  parseInt(property1Numbers.pubs.normal_percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile) ? parseInt(property2Numbers.pubs.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.pubs && property1Numbers.pubs.normal_percentile &&  (\n                      [...Array(parseInt(property2Numbers.pubs.normal_percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.pubs && property1Numbers.pubs.normal_percentile) ?  parseInt(property1Numbers.pubs.normal_percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile) ? parseInt(property2Numbers.pubs.normal_percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.pubs && property2Numbers.pubs.normal_percentile ? Math.round(property2Numbers.pubs.normal_percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* Fitness */}\n                <div className='result-title'>\n                  <h5>Fitness</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.fitness.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile ? parseInt((property1Numbers.fitness.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile && (\n                      [...Array(parseInt((property1Numbers.fitness.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile) ?  parseInt(property1Numbers.fitness.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile) ? parseInt(property2Numbers.fitness.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.fitness && property1Numbers.fitness.percentile &&  (\n                      [...Array(parseInt(property2Numbers.fitness.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.fitness && property1Numbers.fitness.percentile) ?  parseInt(property1Numbers.fitness.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile) ? parseInt(property2Numbers.fitness.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.fitness && property2Numbers.fitness.percentile ? Math.round(property2Numbers.fitness.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* EV */}\n                <div className='result-title'>\n                  <h5>EV</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.ev.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile ? parseInt((property1Numbers.ev.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile && (\n                      [...Array(parseInt((property1Numbers.ev.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile) ?  parseInt(property1Numbers.ev.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile) ? parseInt(property2Numbers.ev.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.ev && property1Numbers.ev.percentile &&  (\n                      [...Array(parseInt(property2Numbers.ev.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.ev && property1Numbers.ev.percentile) ?  parseInt(property1Numbers.ev.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile) ? parseInt(property2Numbers.ev.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.ev && property2Numbers.ev.percentile ? Math.round(property2Numbers.ev.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n                {/* Tubes */}\n                <div className='result-title'>\n                  <h5>Tubes</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.tubes.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile ? parseInt((property1Numbers.tubes.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile && (\n                      [...Array(parseInt((property1Numbers.tubes.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile) ?  parseInt(property1Numbers.tubes.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile) ? parseInt(property2Numbers.tubes.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.tubes && property1Numbers.tubes.percentile &&  (\n                      [...Array(parseInt(property2Numbers.tubes.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.tubes && property1Numbers.tubes.percentile) ?  parseInt(property1Numbers.tubes.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile) ? parseInt(property2Numbers.tubes.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.tubes && property2Numbers.tubes.percentile ? Math.round(property2Numbers.tubes.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n                {/* Crime */}\n                <div className='result-title'>\n                  <h5>Crime</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.crime && property1Numbers.crime[0] && (\n                      [...Array(parseInt(property1Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.crime && property1Numbers.crime[0] ? 100 - parseInt(property1Numbers.crime[0].percentile * 100) : ''}%</h5>\n                    {property2Numbers && property2Numbers.crime && property2Numbers.crime[0] && (\n                      [...Array(100 - parseInt(property1Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.crime && property1Numbers.crime[0]) ?  100 - parseInt(property1Numbers.crime[0].percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.crime && property2Numbers.crime[0]) ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.crime && property2Numbers.crime[0] && (\n                      [...Array(100 - parseInt(property2Numbers.crime[0].percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers) ? 100 - parseInt(property1Numbers.crime[0].percentile * 100) : 0) \n                          > ((property2Numbers) ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.crime && property2Numbers.crime[0] ? 100 - parseInt(property2Numbers.crime[0].percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n\n\n\n                {/* Supermarkets */}\n                <div className='result-title'>\n                  <h5>Supermarkets</h5>\n                </div>\n\n                <div className='results-rows'>\n                  <div className='results-left'>\n                    {property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile && (\n                      [...Array(100 - Math.round((property1Numbers.supermarkets.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='blank-bars' key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='left-score' >{property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile ? parseInt((property1Numbers.supermarkets.percentile * 100)) : ''}%</h5>\n                    {property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile && (\n                      [...Array(parseInt((property1Numbers.supermarkets.percentile * 100)))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile) ?  parseInt(property1Numbers.supermarkets.percentile * 100) : 0) \n                            < ((property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile) ? parseInt(property2Numbers.supermarkets.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n\n                  </div>\n                  <div className='results-right'>\n                    {property2Numbers && property2Numbers.supermarkets && property1Numbers.supermarkets.percentile &&  (\n                      [...Array(parseInt(property2Numbers.supermarkets.percentile * 100))].map((choice, index) => {\n                        return (\n                          <div className='bars' style={{\n                            backgroundColor: ((property1Numbers && property1Numbers.supermarkets && property1Numbers.supermarkets.percentile) ?  parseInt(property1Numbers.supermarkets.percentile * 100) : 0) \n                          > ((property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile) ? parseInt(property2Numbers.supermarkets.percentile * 100) : 0) ? '#152BA4' : '#FFA7E5',\n                          }} key={index} >\n                            <div>.</div>\n                          </div>\n                        )\n                      }))}\n                    <h5 className='right-score' >{property2Numbers && property2Numbers.supermarkets && property2Numbers.supermarkets.percentile ? Math.round(property2Numbers.supermarkets.percentile * 100) : ''}%</h5>\n                  </div>\n                </div>\n                  \n              </div>\n\n\n            \n              {userData ? userData.white_properties.filter(property => property.postcode === property2).map((property, index) => {\n                return (\n                  <div className='comparison-property' key={index} onClick={() => navigate(`/agents/property/${property.postcode}`)}>\n                    <>\n                      <div className='comparison-image' style={{ backgroundImage: `url('${property.image}')` }}></div>\n                      <div className='comparison-content'>\n                        <h4>{property.name}</h4>\n                        <h5><NumericFormat value={property.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /> offers over</h5>\n                        <h5>Bedrooms: {property.bedrooms}</h5>\n                        <h5>Type: {property.type}</h5>\n                      </div>\n                    </>\n                  </div>\n                )\n              }) : ''}\n            </div>\n            {/* </> */}\n\n          </div>\n        </section>\n        :\n\n        ''\n  \n      }\n    </>\n  )\n}\n\nexport default WhiteComparison\n\n"],"names":["_ref","setProfileContent","profileContent","profileDetail","setProfileDetail","_jsx","_Fragment","children","className","_jsxs","onClick","style","fontWeight","backgroundColor","WhiteComparison","navigate","useNavigate","property1","setProperty1","useState","property2","setProperty2","userData","setUserData","propertyList","setPropertyList","property1Numbers","setProperty1Numbers","property2Numbers","setProperty2Numbers","errors","setErrors","variableSide","setVariableSide","propertyColours","setPropertyColours","property1_total","property2_total","property1_restaurant","property2_reestaurant","property1_pub","property2_pub","property1_cafe","property2_cafe","property1_takeaway","property2_takeaway","property1_tube","property2_tube","property1_train","property2_train","property1_supermarket","property2_supermarket","property1_gym","property2_gym","property1_park","property2_park","property1_primary","property2_primary","property1_secondary","property2_secondary","useEffect","loadUserData","isUserAuth","async","data","axios","get","getUserToken","headers","Authorization","getAccessToken","console","log","white_properties","getUser","error","loadProperty1","getPostcode","loadProperty2","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","onChange","e","target","value","map","property","index","postcode","name","filter","backgroundImage","image","NumericFormat","price","displayType","thousandSeparator","prefix","bedrooms","type","justifyContent","secondaries","total_score_percentile","Array","Math","round","choice","parseInt","parks_lsoa","london_percentile","restaurants","normal_percentile","pubs","fitness","percentile","ev","tubes","crime","supermarkets"],"sourceRoot":""}