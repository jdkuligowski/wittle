{"version":3,"file":"static/js/432.8db5edb2.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyDetails/componentHighlights/LifestyleHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/SchoolHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/TransportHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/NeighbourhoodHighlights.js","components/whiteLabel/propertyDetails/componentHighlights/PropertySummary.js","components/whiteLabel/propertyDetails/SinglePropertySummary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\n\nconst LifestyleHighlights = ({ restaurants1, cuisines, topRestaurants, gyms1, mainGyms, supermarkets1, mainSupermarkets, pubs1, topPubs }) => {\n\n  // ? Section 1: Define states\n\n  // state for errors\n  const [errors, setErrors] = useState()\n\n\n  return (\n\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Restaurants</h5>\n            {restaurants1 ? \n              <>\n                <h5>🍽 {restaurants1.length} restaurants within 15 mins walk</h5>\n                <h5>🍽 more than {cuisines} cuisines available</h5>\n                <h5>🍽 {topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</h5>\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Pubs</h5>\n            {pubs1 ? \n              <>\n                <h5>🍺 {pubs1.length} pubs within 15 mins walk</h5>\n                <h5>🍺 {topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</h5>\n              </>\n              : '' }\n          </div>\n        </div>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Fitness</h5>\n            {gyms1 ? \n              <>\n                <h5>🏋️‍♂️ {gyms1.length} gyms within 15 mins walk</h5>\n                {mainGyms.length === 3 ? <h5>🏋️‍♂️ includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</h5> : mainGyms.length === 2 ? <h5>🏋️‍♂️ includes {mainGyms[0]} & {mainGyms[1]} </h5> : mainGyms.length === 1 ? <h5>🏋️‍♂️ includes {mainGyms[0]}</h5> : '' }\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Supermarkets</h5>\n            {supermarkets1 ? \n              <>\n                <h5>🛒 {supermarkets1.length} supermarkets within 15 mins walk</h5>\n                {mainSupermarkets.length === 3 ? <h5>🛒 includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</h5> : mainSupermarkets.length === 2 ? <h5>🛒 includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </h5> : mainSupermarkets.length === 1 ? <h5>🛒 includes {mainSupermarkets[0]}</h5> : '' }\n              </>\n              : '' }\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default LifestyleHighlights","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\nconst SchoolHighlights = ({ topPrimaries, topSecondaries }) => {\n\n  // ? Section 1: Define states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n\n\n  return (\n\n    <>\n      <section className='school-highlights'>\n        <div className='school-block'>\n          <h5 className='block-title'>Primary schools</h5>\n          <div className='school-table-headers'>\n            <h5 id='column1'>#</h5>\n            <h5 id='column2'>School name</h5>\n            <h5 id='column3'>Ofsted</h5>\n            <h5 id='column4'>Catchment</h5>\n            <h5 id='column5'>Distance</h5>\n          </div>\n          <div className='school-table-details'>\n            {topPrimaries ? topPrimaries.map((item, index) => {\n              return (\n                <>\n                  <div className='school-content'>\n                    <div className='column' id='column1'>\n                      <h5>{index + 1}</h5>\n                    </div>\n                    <div className='column' id='column2'>\n                      <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)} >{item.school_name}</h5>\n                    </div>\n                    <div className='column' id='column3'>\n                      {item.ofsted_results !== null ? <h5>{item.ofsted_results}</h5> : <h5>N/a</h5>}\n                    </div>\n                    <div className='column' id='column4'>\n                      <h5>{item.within_catchment}</h5>\n                    </div>\n                    <div className='column' id='column5'>\n                      <h5>{item.walkTimeMin} mins</h5>\n                    </div>\n                  </div>\n        \n                </>\n              )\n            }) : ''}\n          </div>\n        </div>\n        <div className='school-block'>\n          <h5 className='block-title'>Secondary schools</h5>\n          <div className='school-table-headers'>\n            <h5 id='column1'>#</h5>\n            <h5 id='column2'>School name</h5>\n            <h5 id='column3'>Ofsted</h5>\n            <h5 id='column4'>Catchment</h5>\n            <h5 id='column5'>Distance</h5>\n          </div>\n          <div className='school-table-details'>\n            {topSecondaries ? topSecondaries.map((item, index) => {\n              return (\n                <>\n                  <div className='school-content'>\n                    <div className='column' id='column1'>\n                      <h5>{index + 1}</h5>\n                    </div>\n                    <div className='column' id='column2'>\n                      <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)} >{item.school_name}</h5>\n                    </div>\n                    <div className='column' id='column3'>\n                      {item.ofsted_results !== null ? <h5>{item.ofsted_results}</h5> : <h5>N/a</h5>}\n                    </div>\n                    <div className='column' id='column4'>\n                      <h5>{item.within_catchment}</h5>\n                    </div>\n                    <div className='column' id='column5'>\n                      <h5>{item.walkTimeMin} mins</h5>\n                    </div>\n                  </div>\n        \n                </>\n              )\n            }) : ''}\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default SchoolHighlights","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, Link } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../../auth/Auth'\n\n\n\n\n\nconst TransportHighlights = ({ postcodeData, tubes1, trains1 }) => {\n\n\n\n\n\n  return (\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Underground & Overground</h5>\n            {tubes1 && tubes1.length > 0 ? \n              <>\n                <h5>🚇 {tubes1.length} tube stations within 20 mins walk</h5>\n                <h5>🚇 {tubes1[0].station_name} is {tubes1[0].walkTimeMin} mins away</h5>\n                {tubes1.length > 2 ? <h5>🚇 {tubes1[1].station_name} and {tubes1[2].station_name} are also nearby</h5> : tubes1.length === 1 ? <h5>🚇 {tubes1[1].station_name} is also nearby</h5> : '' }\n              </>\n              : \n              <h5>🚇 No tube stations within 20 min walk of this property</h5> }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Electric vehicles</h5>\n            {postcodeData ? \n              <>\n                <h5>🚇 {postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</h5>\n                <h5>🚇 in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</h5>\n              </>\n              : '' }\n          </div>\n        </div>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>National Rail</h5>\n            {trains1 && trains1.length > 0 ? \n              <>\n                <h5>🚊 {trains1.length} rail stations within 20 mins walk</h5>\n                <h5>🚊 {trains1[0].station} is {trains1[0].walkTimeMin} mins away</h5>\n                {trains1.length > 2 ? <h5>🚊 {trains1[1].station} and {trains1[2].station} are also nearby</h5> : trains1.length === 2 ? <h5>🚊 {trains1[1].station} is also nearby</h5> : '' }\n              </>\n              : \n              <h5>🚊 No rail stations within 20 min walk of this property</h5> }\n\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default TransportHighlights","\n\n\n\n\nconst NeighbourhoodHighlights = ({ postcodeData }) => {\n\n\n  return (\n\n    <>\n      <section className='box-highlights'>\n        <div className='row'>\n          <div className='column'>\n            <h5 className='block-title'>Green space</h5>\n            {postcodeData ? \n              <>\n                <h5>🌳 within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</h5>\n                <h5>🌳 {postcodeData[0].parks_postcode.park_name0} within {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</h5>\n                {/* {tubes1.length > 2 ? <h5>🚇 {tubes1[1].station_name} and {tubes1[2].station_name} are also nearby</h5> : tubes1.length === 1 ? <h5>🚇 {tubes1[1].station_name} is also nearby</h5> : '' } */}\n              </>\n              : '' }\n\n          </div>\n          <div className='column'>\n            <h5 className='block-title'>Crime</h5>\n            {postcodeData ? \n              <>\n                <h5>🚓 in the lowest {Math.round((postcodeData[0].crime[0].percentile) * 100)}% of areas in London for reported crimes</h5>\n                <h5>🚓 in the lowest {Math.round((postcodeData[0].crime[0].area_specific_percentile) * 100)}% of areas in {postcodeData[0].crime[0].borough} for reported crimes</h5>\n\n              </>\n              : '' }\n          </div>\n        </div>\n        \n      </section>\n    </>\n  )\n}\n\nexport default NeighbourhoodHighlights","import { PieChart, Pie, Cell, Label, ResponsiveContainer } from 'recharts'\n\n\n\nconst PropertySummary = ({ neighbourhoodScore, postcodeData }) => {\n\n  // neighbourhood data\n  const data = [\n    { name: 'Score', value: neighbourhoodScore },\n    { name: 'Remainder', value: 100 - neighbourhoodScore }\n  ]\n\n  const COLORS = ['#051885', '#FFA7E5']\n\n\n  // greenspace data\n  const greenspaceData = [\n    { name: 'Score', value: postcodeData[0].parks_lsoa[0].london_percentile },\n    { name: 'Remainder', value: 100 - postcodeData[0].parks_lsoa[0].london_percentile }\n  ]\n\n  // restaurant data\n  const restaurantData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].restaurants.normal_percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].restaurants.normal_percentile) * 100) }\n  ]\n\n  // crime data\n  const crimeData = [\n    { name: 'Score', value: Math.round(postcodeData[0].crime[0].percentile * 100) },\n    { name: 'Remainder', value: Math.round((1 - postcodeData[0].crime[0].percentile) * 100) }\n  ]\n\n\n  // tubes data\n  const tubeData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].tubes.percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].tubes.percentile) * 100) }\n  ]\n\n  const secondariesData = [\n    { name: 'Score', value: Math.ceil(postcodeData[0].secondaries.total_score_percentile * 100) },\n    { name: 'Remainder', value: Math.ceil((1 - postcodeData[0].secondaries.total_score_percentile) * 100) }\n  ]\n\n\n\n  return (\n\n    <>\n      <section className=\"summary-section\">\n        <div className=\"row\">\n\n          {/* Neighbourhood score */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={data}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {data.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${neighbourhoodScore}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>Neighbourhood score</h1>\n            </div> \n          </div>  \n\n          {/* Greenspace stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={greenspaceData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {greenspaceData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${greenspaceData[0].value > 50 ? greenspaceData[1].value : greenspaceData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              {greenspaceData[0].value > 50 ?  <h1>within top {greenspaceData[1].value}% of areas of London for access to greenspace</h1> : <h1>within bottom {greenspaceData[0].value}% of areas of London for access to greenspace</h1>}\n            </div> \n          </div>  \n\n          {/* Secondaries stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={secondariesData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {secondariesData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - secondariesData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {100 - secondariesData[0].value}% of areas of London for secondary schools</h1>\n            </div> \n          </div>  \n\n          {/* Restaurant stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={restaurantData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {restaurantData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - restaurantData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within best {100 - restaurantData[0].value}% of areas of London for number of quality restaurants</h1>\n            </div> \n          </div>  \n\n          {/* <div className=\"row\"> */}\n\n          {/* Crime score */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={crimeData.reverse()}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {crimeData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${crimeData[1].value > 50 ? crimeData[0].value : crimeData[1].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              {(crimeData[1].value) > 50 ? <h1>In the highest {crimeData[0].value}% of areas in London for reported crimes</h1> : <h1>In the lowest {(crimeData[1].value)}% of areas in London for reported crimes</h1>}\n            </div> \n          </div>  \n\n          {/* Tubes stat */}\n          <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={tubeData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {tubeData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${100 - tubeData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {100 - tubeData[0].value}% of areas of London for access to tubes</h1>\n            </div> \n          </div>  \n\n          {/* Restaurant stat */}\n          {/* <div className=\"individual-box\">\n            <div className=\"pie-chart\" >\n              <PieChart width={100} height={100}>\n                <Pie\n                  data={restaurantData}\n                  cx={40}\n                  cy={50}\n                  innerRadius={25}\n                  outerRadius={45}\n                  fill=\"#8884d8\"\n                  paddingAngle={1}\n                  dataKey=\"value\"\n                  startAngle={0}\n                >\n                  {restaurantData.map((entry, index) => (\n                    <Cell \n                      key={`cell-${index}`}\n                      fill={COLORS[index % COLORS.length]}\n                      startAngle={index === 0 ? 0 : (360 * data[index - 1].value) / 100} // Set the start angle dynamically\n                      endAngle={(360 * entry.value) / 100} // Set the end angle dynamically                    \n                    />\n                  ))}\n                  <Label\n                    value={`${restaurantData[0].value}%`}\n                    position=\"center\"\n                    fontSize={15}\n                    fontWeight=\"bold\"\n                    fill='#FFA7E5'\n                  />\n                </Pie>\n              </PieChart>\n            </div>\n            <div className=\"content\">\n              <h1>within top {restaurantData[0].value}% of areas of London for restaurants</h1>\n            </div> \n          </div>   */}\n        </div>    \n      </section>\n    \n    </>\n  )\n}\n\nexport default PropertySummary","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useParams, useLocation } from 'react-router-dom'\nimport NavBar from '../../tools/NavBar'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Footer from '../../tools/Footer'\nimport LifestyleHighlights from './componentHighlights/LifestyleHighlights'\nimport SchoolHighlights from './componentHighlights/SchoolHighlights'\nimport TransportHighlights from './componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from './componentHighlights/NeighbourhoodHighlights'\nimport PropertySummary from './componentHighlights/PropertySummary'\nimport PropertyDetailSlider from './helpers/PropertyDetailSlider'\nimport PrimaryDetails from './componentDetails/PrimaryDetails'\nimport SecondaryDetails from './componentDetails/SecondaryDetails'\nimport WhiteSidebar from '../WhiteSidebar'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport RestaurantDetails from './componentDetails/RestaurantDetails'\nimport FitnessDetails from './componentDetails/FitnessDetails'\nimport SupermarketDetails from './componentDetails/SupermarketDetails'\nimport VariablesPage from '../variableSummaries/VariablesPage'\nimport WhiteComparison from '../comparisonSection/WhiteComparison'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from './componentDetails/EVDetails'\nimport PubDetails from './componentDetails/PubDetails'\n\nconst SinglePropertySummary = () => {\n\n  // ? Section 1: Define states\n  // state for switching page\n  const { postcode } = useParams()\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n  \n  // state for handling moving back between pages\n  const location = useLocation()\n  const [historyStack, setHistoryStack] = useState([])\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('My properties')\n  const [profileDetail, setProfileDetail] = useState('My properties')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(false)\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for company data\n  const [company, setCompany] = useState()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // state for what information is shown\n  const [propertyContent, setPropertyContent] = useState('Property overview')\n\n  // states for opening and closing the sections\n  const [summarySection, setSummarySection] = useState(false)\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants]  = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  // neghbourhood score\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  // slider selection\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  // set state for lisrt of properties\n  const [propertyList, setPropertyList] = useState()\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPostcode = async () => {\n        const { data } = await axios.get(`/api/postcodes/${postcode}`)\n        console.log('postcode data ->', data)\n        setPostcodes(data)\n      }\n      getPostcode()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPostcodeData()\n  }, [])\n\n\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    if (postcodeData) {\n      loadUserData()\n    }\n  }, [postcodeData])\n\n\n  // load current property based on the company and postcode\n  const loadProperties = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getProperties = async () => {\n        const { data } = await axios.get(`/api/white_properties/${company}`, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        const matchedProperty = data.find(item => item.postcode === postcode)\n        setPropertyData(matchedProperty)\n        console.log('current-property ->', matchedProperty)\n      }\n      getProperties()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    if (userData) {\n      loadProperties()\n    }\n  }, [userData])\n\n\n  // // extract property information\n  // const currentProperty = () => {\n  //   const matchedProperty = userData.white_properties.find(item => item.postcode === postcode)\n  //   setPropertyData(matchedProperty)\n  //   console.log('current-property ->', matchedProperty)\n  // }\n\n  // // load property data\n  // useEffect(() => {\n  //   if (postcodeData && userData) {\n  //     currentProperty()\n  //   }\n  // }, [postcodeData, userData])\n\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n  \n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n\n      // handle independent schools\n      if (item.school_type ===  'Independent school') {\n        item.within_catchment =  'N/a'\n\n      // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n\n      // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n      // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n\n      // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n      \n      // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n\n      // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n\n      // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n      \n      // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n  \n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      }  else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n      // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n      // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n      // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n      // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n      // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n    \n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n  \n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n  \n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n    \n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n    // extract the key studios\n    const topThreeStudios = []\n  \n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n        \n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  \n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n    \n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n    \n    // extract the key studios\n    const topThreeSupermarkets = []\n  \n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_store_name)) {\n        topThreeSupermarkets.push(supermarket.supermarket_store_name)\n        uniqueSupermarkets.add(supermarket.supermarket_store_name)\n        \n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    console.log('Nearby supermarkets ->', nearbySupermarkets)\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n  \n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n    \n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n  \n  // function for restaurants with least walking distance\n  const getNearbyChargers = () => {\n\n    // Average walking speed is 5km/h. \n    const walkDistanceKm10 = 5 * (10 / 60)\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyChargers = ev.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n  \n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm10\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n    \n\n    setEv1(nearbyChargers)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (ev) {\n      getNearbyChargers()\n    }\n  }, [ev])\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  \n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n    \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n  \n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n  \n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n  \n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Calculate a neighbourhood score\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n                                postcodeData[0].ev.percentile +\n                                postcodeData[0].fitness.percentile +\n                                (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n                                postcodeData[0].restaurants.normal_percentile +\n                                postcodeData[0].supermarkets.percentile +\n                                postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n  // // This function computes the raw score for a given neighborhood\n  // const computeRawScore = (neighborhood) => {\n  //   return (((1 - neighborhood.crime[0].percentile) +\n  //           neighborhood.ev.percentile +\n  //           neighborhood.fitness.percentile +\n  //           (1 - (neighborhood.parks_lsoa[0].london_percentile / 100)) +\n  //           neighborhood.restaurants.normal_percentile +\n  //           neighborhood.supermarkets.percentile +\n  //           neighborhood.tubes.percentile) / 7) * 100\n  // }\n\n  // // This function returns the normalized score for a given raw score\n  // const normalizeScore = (rawScore, min, max) => {\n  //   return (rawScore - min) / (max - min) * 100\n  // }\n\n  // useEffect(() => {\n  //   if (postcodeData && postcodeData[0]) {\n  //     const rawScore = ((((1 - postcodeData[0].crime[0].percentile) +\n  //                           postcodeData[0].ev.percentile +\n  //                           postcodeData[0].fitness.percentile +\n  //                           (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n  //                           postcodeData[0].restaurants.normal_percentile +\n  //                           postcodeData[0].supermarkets.percentile +\n  //                           postcodeData[0].tubes.percentile) / 7) * 100)\n  \n  //     console.log('raw->', rawScore)\n  \n  //     // Assuming you have a dataset to extract actual min and max from.\n  //     // const allScores = postcodeData.map(data => computeRawScore(data))\n  //     // const actualMinScore = Math.min(...allScores)\n  //     // const actualMaxScore = Math.max(...allScores)\n\n  //     // console.log('all->', allScores)\n  \n  //     const normalizedScore = Math.ceil(normalizeScore(rawScore, 5.04371029960676, 59.7024933139881))\n  //     setNeighbourhoodScore(normalizedScore)\n\n  //   }\n  // }, [postcodeData])\n  \n\n\n  // ? Section 12: Load and sort tubes data\n  const loadTrainsData = () => {\n  // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n  \n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a = \n      Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n      Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) * \n      Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n  \n\n    setTrains1(nearbyTrains)\n    console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n  // ?Section 13: Other helpful functions\n  // handle moving to the oprevious page\n  // When location changes, add the new location to the history stack\n  useEffect(() => {\n    setHistoryStack((prevStack) => [...prevStack, location.pathname])\n  }, [location])\n\n\n  // To navigate back:\n  const goBack = () => {\n    // Remove the current location from the stack\n    const newStack = [...historyStack]\n    newStack.pop()\n    setHistoryStack(newStack)\n\n    // Get the last location from the new stack\n    const lastLocation = newStack[newStack.length - 1]\n\n    // Navigate to the last location, or to a default location if the stack is empty\n    navigate(lastLocation || '/')\n  }\n\n  useEffect(() => {\n    console.log(`profileContent updated to: ${profileContent}`)\n  }, [profileContent])\n\n  return (\n\n    <>\n      <section className='agent-specific-property print-container' >\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />\n        <div className='go-back-button no-print remove-margin'>\n          <h5 onClick={() =>  navigate('/agents/profile')}>&lt;- back to profile</h5>\n        </div>\n        <div className='property-options no-print'>\n          <div className='left-section'>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property overview')} style={{ textDecoration: propertyContent === 'Property overview' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property overview' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property overview' ? '700' : '400' }}>Property overview</h5>\n            <h5 className='no-print' onClick={() => setPropertyContent('Property details')} style={{ textDecoration: propertyContent === 'Property details' ? 'underline 2px #FFA7E5' : 'none', textUnderlineOffset: propertyContent === 'Property details' ? '0.5em' : 'initial', fontWeight: propertyContent === 'Property details' ? '700' : '400'  }}>Property details</h5>\n          </div>\n          <h1 className='print-button no-print' onClick={() => window.print()}>🖨</h1>\n        </div>\n\n        {propertyContent === 'Property overview' ?\n          <section className='property-wrapper'>\n\n            {propertyData ?\n              <section className='property-details remove-margin'>\n                <img className='property-image' src={propertyData.image} alt='property-image' />\n\n                <div className='property-content'>\n                  <div className='content-blocks'>\n                    <div className='content-summary'>\n                      <div className='content-top-line'>\n                        <h1>{propertyData.name}</h1>\n                        <h1><NumericFormat value={propertyData.price} displayType={'text'} thousandSeparator={true} prefix={'£'} /></h1>\n                      </div>\n                      <h3>{propertyData.address}</h3>\n                    </div>\n                    <div className='content-details'>\n                      <div className='content-details-top'>\n                        <h4>🏠 {propertyData.type}</h4>\n                        <h4>📦 {propertyData.size}</h4>\n                      </div>\n                      <div className='content-details-bottom'>\n                        <h4>🛌 x {propertyData.bedrooms}</h4>\n                        <h4>🛁 x {propertyData.bathrooms}</h4>\n                        <h4>🛋 x {propertyData.living_rooms}</h4>\n                      </div>\n                    </div>\n\n\n                  </div>\n\n\n                </div>\n              </section>\n              : '' }\n\n            <section className='property-summary-sections remove-margin'>\n              <div className='property-highlight' onClick={() => setSummarySection(!summarySection)}>\n                <h3>Property Summary</h3>\n                <div className='click-downs'>\n                  {summarySection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              { postcodeData && summarySection ?\n                <PropertySummary \n                  neighbourhoodScore={neighbourhoodScore}\n                  postcodeData={postcodeData}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School Highlights</h3>\n                <div className='click-downs'>\n                  {schoolSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n\n              {schoolSection ? \n                <SchoolHighlights \n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle Highlights</h3>\n                <div className='click-downs'>\n                  {lifestyleSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {lifestyleSection ? \n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : '' }\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport Highlights</h3>\n                <div className='click-downs'>\n                  {transportSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {transportSection ? \n                <TransportHighlights \n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                  trains1={trains1}\n                />\n                : '' }\n\n              <hr className='highlight-separator'/>\n              <div className='property-highlight' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhood Highlights</h3>\n                <div className='click-downs'>\n                  {neighbourhoodSection ? <h4>^</h4> : <h4>v</h4> }\n                </div>\n              </div>\n              {neighbourhoodSection ? \n                <NeighbourhoodHighlights \n                  postcodeData={postcodeData}\n                />\n                : '' }\n\n            </section>\n\n          </section>\n\n          : propertyContent === 'Property details' ?\n            <section className='property-wrapper'>\n              <PropertyDetailSlider \n                sliderSelection={sliderSelection}\n                setSliderSelection={setSliderSelection}\n              />\n\n              {sliderSelection === 'Primary schools' ? \n                <PrimaryDetails\n                  primaryData1={primaryData1}\n                  setPrimaryData1={setPrimaryData1}\n                  propertyData={propertyData}\n                  listType={'short list'}\n                  postcodeData={postcodeData}\n                />\n\n                : sliderSelection === 'Secondary schools' ?\n                  <SecondaryDetails\n                    secondaryData1={secondaryData1}\n                    setSecondaryData1={setSecondaryData1}\n                    propertyData={propertyData}\n                    listType={'short list'}\n                    postcodeData={postcodeData}\n                  />\n              \n                  : sliderSelection === 'Restaurants' ?\n                    <RestaurantDetails\n                      restaurants1={restaurants1}\n                      setRestaurants1={setRestaurants1}\n                      propertyData={propertyData}\n                      listType={'short list'}\n                      postcodeData={postcodeData}\n                    />\n              \n                    : sliderSelection === 'Fitness' ?\n                      <FitnessDetails\n                        gyms1={gyms1}\n                        setGyms1={setGyms1}\n                        propertyData={propertyData}\n                        listType={'short list'}\n                        postcodeData={postcodeData}\n                      />\n              \n                      : sliderSelection === 'Supermarkets' ?\n                        <SupermarketDetails\n                          supermarkets1={supermarkets1}\n                          setSupermarkets1={setSupermarkets1}\n                          propertyData={propertyData}\n                          listType={'short list'}\n                          postcodeData={postcodeData}\n                        />\n              \n                        : sliderSelection === 'EVs' ?\n                          <EVDetails\n                            ev1={ev1}\n                            setEv1={setEv1}\n                            propertyData={propertyData}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                          />\n              \n                          : sliderSelection === 'Pubs' ?\n                            <PubDetails\n                              pubs1={pubs1}\n                              setPubs1={setPubs1}\n                              propertyData={propertyData}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                            />\n                            : '' }\n                \n            </section>\n            : propertyContent === 'Variables' ?\n              <>\n                <VariablesPage \n                  profileDetail={profileDetail}  \n                  setProfileDetail={setProfileDetail}\n                  profileContent={profileContent}\n                />\n    \n  \n          \n              </>\n              : profileContent === 'Comparison' ?\n\n                <>\n                  <WhiteComparison\n                    userData={userData}\n                    propertyList={propertyList}\n\n                  />\n             \n                </>\n\n                : '' \n\n        }\n\n\n      </section>\n    </>\n  )\n\n\n}\n\nexport default SinglePropertySummary"],"names":["restaurants1","cuisines","topRestaurants","gyms1","mainGyms","supermarkets1","mainSupermarkets","pubs1","topPubs","errors","setErrors","useState","className","length","topPrimaries","topSecondaries","navigate","useNavigate","id","map","item","index","onClick","school_name","ofsted_results","within_catchment","walkTimeMin","postcodeData","tubes1","trains1","station_name","ev","ev_10_mins","Math","round","percentile","station","parks_lsoa","london_percentile","parks_postcode","park_name0","ceil","distance0","crime","area_specific_percentile","borough","neighbourhoodScore","data","name","value","COLORS","greenspaceData","restaurantData","restaurants","normal_percentile","crimeData","tubeData","tubes","secondariesData","secondaries","total_score_percentile","PieChart","width","height","Pie","cx","cy","innerRadius","outerRadius","fill","paddingAngle","dataKey","startAngle","entry","Cell","endAngle","Label","position","fontSize","fontWeight","reverse","postcode","useParams","location","useLocation","historyStack","setHistoryStack","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","setPostcodes","userData","setUserData","propertyData","setPropertyData","company","setCompany","propertyContent","setPropertyContent","summarySection","setSummarySection","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","primaryData","setPrimaryData","primaryData1","setPrimaryData1","secondaryData","setSecondaryData","secondaryData1","setSecondaryData1","setTopPrimaries","setTopSecondaries","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","setEv","setRestaurants1","setGyms1","setPubs1","setSupermarkets1","ev1","setEv1","setCuisines","setTopRestaurants","setTopPubs","setMainGyms","setMainSupermarkets","setTubes","trains","setTrains","setTubes1","setTrains1","setNeighbourhoodScore","sliderSelection","setSliderSelection","propertyList","setPropertyList","useEffect","async","axios","console","log","getPostcode","error","loadPostcodeData","isUserAuth","getUserToken","headers","Authorization","getAccessToken","getUser","loadUserData","matchedProperty","find","getProperties","loadProperties","getPrimaries","loadPrimaryData","walkDistanceKm20","R","toRad","PI","kmPerMinute","nearbyPrimaries","filter","dLat","parseFloat","latitude","longitude","dLon","a","sin","cos","c","atan2","sqrt","distanceKm","distance_between","distancePercent","max_distance","school_type","additional_status","sort","b","firstSchoolNames","slice","getNearbyPrimaries","getSecondaries","loadSecondaryData","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","includes","getNearbySecondaries","getData","loadRestaurantData","walkDistanceKm15","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","restaurant_name","Set","size","countUniqueCuisines","getNearbyRestaurants","loadFitnessData","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","gym","gym_group","toLowerCase","has","push","add","getNearbyStudios","loadSupermarketData","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","supermarket_store_name","getNearbySupermatkets","loadTubesData","nearbyTubes","lat","getNearbyTubes","loadEVdata","nearbyChargers","getNearbyChargers","loadPubsData","nearbyPubs","topThreePubs","pub","getNearbyPubs","calculation","fitness","calculateScore","loadTrainsData","nearbyTrains","getNearbyTrains","prevStack","pathname","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","style","textDecoration","textUnderlineOffset","window","print","src","image","alt","price","displayType","thousandSeparator","prefix","address","type","bedrooms","bathrooms","living_rooms","PropertyDetailSlider","PrimaryDetails","listType","SecondaryDetails","RestaurantDetails","FitnessDetails","SupermarketDetails","EVDetails","PubDetails","VariablesPage","WhiteComparison"],"sourceRoot":""}