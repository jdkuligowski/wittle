{"version":3,"file":"static/js/389.e2039f0f.chunk.js","mappings":"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","sources":["components/helpers/Loading.js","components/whiteLabel/propertyDetails/componentDetails/EVDetails.js","components/whiteLabel/propertyDetails/componentDetails/FitnessDetails.js","components/whiteLabel/propertyDetails/componentDetails/PrimaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/PubDetails.js","components/whiteLabel/propertyDetails/componentDetails/RestaurantDetails.js","components/whiteLabel/propertyDetails/componentDetails/SecondaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/SupermarketDetails.js","components/whiteLabel/propertyDetails/variableDetails/SingleSecondarySchool.js"],"sourcesContent":["import React from 'react'\n\nconst Loading = () => (\n  <div className=\"loading-gif\">\n    <img src={require('../../styles/new-loading.gif')} alt=\"loading gif\"/>\n  </div>\n)\n\nexport default Loading","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst EVDetails = ({ ev1, listType, setEv1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // state for storing new supermarket data \n  const [ev2, setEv2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedEvs, setSelectedEvs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleEvClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedEvs(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...ev1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setEv1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as ev2\n      setEv2([...ev1])\n    } else {\n      setEv2(\n        ev1.filter(item => {\n          return (\n            item.location.toLowerCase().includes(term.toLowerCase()) ||\n            // item.power.toLowerCase().includes(term.toLowerCase()) ||\n            item.fast_charging.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (ev1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, ev1])\n\n\n\n  return (\n    <>\n      {ev1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('location')}>\n                  <h5>Charger location</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('power')}>\n                  <h5>Power</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Fast Charging</h5>\n              </div>\n              <div className='school-table-details'>\n                {ev2 ? ev2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.location}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.power} kW</h5>\n                        </div>\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.fast_charging}</h5>\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {ev2 ? ev2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.location}</h5>\n                              <div className='details'>\n                                <div className='icon' id='evs'></div>\n                                <h5>{item.power}kW</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {ev2 &&\n                        ev2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleEvClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedEvs ?\n                        <Popup\n                          longitude={selectedEvs.longitude}\n                          latitude={selectedEvs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedEvs(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedEvs.location}</h5>\n                              <p>⛽️ Power:{selectedEvs.power} kW</p>\n                              <p>⛽️ Fast charging: {selectedEvs.fast_charging}</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {ev2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(ev2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default EVDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst FitnessDetails = ({ gyms1, listType, setGyms1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  // state for storing new supermarket data \n  const [gyms2, setGyms2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedGyms, setSelectedGyms] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleGymClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedGyms(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...gyms1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setGyms1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as gyms2\n      setGyms2([...gyms1])\n    } else {\n      setGyms2(\n        gyms1.filter(item => {\n          return (\n            item.gym_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.gym_group.toLowerCase().includes(term.toLowerCase()) ||\n            item.class_type.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (gyms1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, gyms1])\n\n\n\n  return (\n    <>\n      {gyms1 ?\n        <section className=\"primary-details-section\">\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('gym_name')}>\n                  <h5>Studio name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('gym_group')}>\n                  <h5>Studio group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Class types</h5>\n              </div>\n              <div className='school-table-details'>\n                {gyms2 ? gyms2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.gym_name}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.gym_group}</h5>\n                        </div>\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.class_type}</h5>\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {gyms2 ? gyms2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.gym_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='gyms'></div>\n                                <h5>{item.gym_group}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {gyms2 &&\n                        gyms2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.long}\n                            latitude={item.Lat}\n                            onClick={() => handleGymClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedGyms ?\n                        <Popup\n                          longitude={selectedGyms.long}\n                          latitude={selectedGyms.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedGyms(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedGyms.gym_name}</h5>\n                              <p>{selectedGyms.gym_group}</p>\n                              <p>{selectedGyms.class_type}</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {gyms2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(gyms2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default FitnessDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\nimport SinglePrimarySchool from '../variableDetails/SinglePrimarySchool'\n\n\n\nconst PrimaryDetails = ({ primaryData1, listType, setPrimaryData1, postcodeData, tableMapView, primaryDetail, setPrimaryDetail, setSliderSelection, setPropertyView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  // const [tableMapView, setPrimaryView] = useState('Table')\n\n  // state for storing new primary data \n  const [primaryData2, setPrimaryData2] = useState([])\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n    console.log(school.longitude)\n    console.log(school.latitude)\n    console.log(school.max_distance)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...primaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setPrimaryData1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as primaryData1\n      setPrimaryData2([...primaryData1])\n    } else {\n      setPrimaryData2(\n        primaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (primaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, primaryData1])\n\n\n  // function to go to the school\n  const goToPrimary = (id) => {\n    setPropertyView('Details')\n    setPrimaryDetail('School')\n    setSliderSelection('Primary schools')\n    window.localStorage.setItem('school-id', id)\n    console.log(id)\n  }\n\n\n  return (\n    <>\n      {primaryData1 && primaryDetail === 'Table' ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('pupils_at_standard')}>\n                  <h5>At standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('pupils_exceeding_standard')}>\n                  <h5>Exceeding standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : ''}\n              </div>\n              <div className='school-table-details'>\n                {primaryData2 ? primaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => goToPrimary(item.id)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_at_standard * 100)}%</h5>}\n                        </div>\n                        <div className='column' id='column7'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_exceeding_standard * 100)}%</h5>}\n                        </div>\n                        {listType === 'short list' ?\n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              {item.max_distance !== null ? <h5>{item.max_distance}</h5> : <h5>Not specified</h5>}\n                            </div>\n                            : ''\n                        }\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {primaryData2 ? primaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n\n                              <h5 className='title'>{index + 1}. {item.school_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='secondaries'></div>\n                                <h5>{item.school_type}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='ofsted'></div>\n                                <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <>\n                                  <div className='details'>\n                                    <div className='icon' id='catchment'></div>\n                                    <h5>{item.within_catchment}</h5>\n                                  </div>\n                                  <div className='details'>\n                                    <div className='icon' id='distance'></div>\n                                    <h5>{item.walkTimeMin} mins</h5>\n                                  </div>\n                                </>\n                                : listType === 'long list' ?\n                                  <div className='details'>\n                                    <div className='icon' id='distance'></div>\n                                    <h5>{item.walkTimeMin} mins</h5>\n                                  </div>\n                                  : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {primaryData2 &&\n                        primaryData2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSchoolClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', 'On request', 'N/a', null].includes(selectedSchool.max_distance) ?\n                        <>\n                          {\n                            typeof parseFloat(selectedSchool.longitude) === 'number' &&\n                              typeof parseFloat(selectedSchool.latitude) === 'number' &&\n                              typeof parseFloat(selectedSchool.max_distance) === 'number'\n                              ?\n                              <>\n                                <Source\n                                  id=\"catchment-area\"\n                                  type=\"geojson\"\n                                  data={turf.circle([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"catchment-area-ring\"\n                                    type=\"fill\"\n                                    paint={{\n                                      'fill-color': '#FFA7E5',\n                                      'fill-opacity': 0.3,\n                                    }} />\n                                  <Layer\n                                    id=\"catchment-area-outline\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#FFA7E5',\n                                      'line-width': 2,\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-line\"\n                                  type=\"geojson\"\n                                  data={turf.lineString([[parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)],\n                                    turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), 90, { units: 'kilometers' }).geometry.coordinates])}\n                                >\n                                  <Layer\n                                    id=\"radius\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#051885',\n                                      'line-width': 2,\n                                      'line-dasharray': [2, 1],\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-label\"\n                                  type=\"geojson\"\n                                  data={turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance) / 2, 90, { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"radius-label\"\n                                    type=\"symbol\"\n                                    layout={{\n                                      'text-field': `${selectedSchool.max_distance} km`,\n                                      'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                      'text-size': 12,\n                                      'text-offset': [0, -1],\n                                    }}\n                                    paint={{\n                                      'text-color': '#051885',\n\n                                    }}\n                                  />\n                                </Source>\n                              </>\n                              :\n                              <p>Invalid coordinates or distance.</p>\n                          }\n                        </>\n\n\n                        : selectedSchool ?\n                          <Popup\n                            longitude={parseFloat(selectedSchool.longitude)}\n                            latitude={parseFloat(selectedSchool.latitude)}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)}\n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>\n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {primaryData2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(primaryData2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        : primaryDetail === 'School' ?\n          <SinglePrimarySchool />\n\n          :\n          <section className='loading-screen'>\n            {/* <h1>Pub data loading...</h1> */}\n            <Loading />\n          </section>\n      }\n\n    </>\n  )\n}\n\nexport default PrimaryDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PubDetails = ({ pubs1, listType, setPubs1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new supermarket data \n  const [pub2, setPub2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedPubs, setSelectedPubs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handlePubClick = (pub) => {\n    console.log('selected pub ->', pub)\n    setSelectedPubs(pub)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...pubs1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setPubs1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as pub2\n      setPub2([...pubs1])\n    } else {\n      setPub2(\n        pubs1.filter(item => {\n          return (\n            item.name.toLowerCase().includes(term.toLowerCase()) ||\n            item.operator.toLowerCase().includes(term.toLowerCase()) ||\n            item.walkTimeMin.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (pubs1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, pubs1])\n\n\n\n  return (\n    <>\n      {pubs1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('name')}>\n                  <h5>Pub name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {/* <div id='column3' className='pub-group sort-section' onClick={() => handleSort('operator')}>\n                  <h5>Pub group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>            */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {pub2 ? pub2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.name}</h5>\n                        </div>\n                        {/* <div className='column pub-group' id='column3'>\n                          <h5>{item.operator}</h5>\n                        </div> */}\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {pub2 ? pub2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.name}</h5>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {pub2 &&\n                        pub2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handlePubClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedPubs ?\n                        <Popup\n                          longitude={selectedPubs.longitude}\n                          latitude={selectedPubs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedPubs(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedPubs.name}</h5>\n                              <p>🍺 {selectedPubs.operator} pub group</p>\n                              <p>🍺 Distance: {selectedPubs.walkTimeMin} mins</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {pub2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(pub2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default PubDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst RestaurantDetails = ({ restaurants1, listType, setRestaurants1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedRestaurants, setSelectdRestaurant] = useState(null)\n\n\n  // state for storing new supermarket data \n  const [restaurants2, setRestaurants2] = useState([])\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSchoolClick = (restaurant) => {\n    console.log('selectd restaurant ->', restaurant)\n    setSelectdRestaurant(restaurant)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...restaurants1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setRestaurants1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as restaurants2\n      setRestaurants2([...restaurants1])\n    } else {\n      setRestaurants2(\n        restaurants1.filter(item => {\n          return (\n            item.restaurant_name.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (restaurants1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, restaurants1])\n\n\n\n  return (\n    <>\n      {restaurants1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('restaurant_name')}>\n                  <h5>Restaurant name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='sort-section' onClick={() => handleSort('rating')}>\n                  <h5>Rating</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div> :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5'>Website</h5>\n              </div>\n              <div className='school-table-details'>\n                {restaurants2 ? restaurants2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.restaurant_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.rating > 4.8 ? 'Excellent' : item.rating > 4.5 ? 'Very good' : item.rating > 4.2 ? 'Good' : item.rating > 3.9 ? 'Average' : item.rating > 0 ? 'Poor' : 'N/a'}</h5>\n                        </div>\n\n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins </h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column' id='column5'>\n                          <a target=\"_blank\" rel='noreferrer' href={item.url}>Visit website</a>\n                        </div>\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {restaurants2 ? restaurants2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.restaurant_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='catchment'></div>\n                                <h5>{item.rating > 4.8 ? 'Excellent' : item.rating > 4.5 ? 'Very good' : item.rating > 4.2 ? 'Good' : item.rating > 3.9 ? 'Average' : item.rating > 0 ? 'Poor' : 'N/a'}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div> : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {restaurants2 &&\n                        restaurants2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSchoolClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedRestaurants ?\n                        <Popup\n                          longitude={selectedRestaurants.longitude}\n                          latitude={selectedRestaurants.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectdRestaurant(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedRestaurants.restaurant_name}</h5>\n                              <p>{selectedRestaurants.master_cuisine}</p>\n                              {/* <p>{selectedRestaurants.rating} /5</p> */}\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {restaurants2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(restaurants2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default RestaurantDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\nimport SingleSecondarySchool from '../variableDetails/SingleSecondarySchool'\n\n\nconst SecondaryDetails = ({ propertyData, secondaryData1, listType, setSecondaryData1, postcodeData, tableMapView, secondaryDetail, setSecondaryDetail, setSliderSelection, setPropertyView }) => {\n\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new primary data \n  const [secondaryData2, setSecondaryData2] = useState([])\n\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // trigger icon pop up\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n\n  // ? Section3: Ability to sort data by different column names\n  // function to sort data by column name\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...secondaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setSecondaryData1(sortedData)\n  }\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as secondaryData1\n      setSecondaryData2([...secondaryData1])\n    } else {\n      setSecondaryData2(\n        secondaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (secondaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, secondaryData1])\n\n\n  // function to go to the school\n  const goToSecondary = (id) => {\n    setPropertyView('Details')\n    setSecondaryDetail('School')\n    setSliderSelection('Secondary schools')\n    window.localStorage.setItem('school-id', id)\n    console.log(id)\n  }\n\n  return (\n\n    <>\n      {secondaryData1 && secondaryDetail === 'Table' ?\n        <section className=\"primary-details-section\">\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('total_pass_rate')}>\n                  <h5>GCSE pass rate</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('total_top_rate')}>\n                  <h5>GCSE A/A*</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : ''}\n              </div>\n              <div className='school-table-details'>\n                {secondaryData2 ? secondaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => goToSecondary(item.id)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          <h5>{(item.total_pass_rate === null ? 'N/a' : item.total_pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column7'>\n                          <h5>{(item.total_top_rate === null ? 'N/a' : item.total_top_rate)}</h5>\n                        </div>\n                        {listType === 'short list' ?\n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.school_type === 'Independent school' ? 'N/a' : item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n            </div>\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {secondaryData2 ? secondaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.school_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='secondaries'></div>\n                                <h5>{item.school_type}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='ofsted'></div>\n                                <h5>{item.ofsted_results}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='catchment'></div>\n                                <h5>{item.within_catchment}</h5>\n                              </div>\n                              <div className='details'>\n                                <div className='icon' id='distance'></div>\n                                <h5>{item.walkTimeMin} mins</h5>\n                              </div>\n                            </div>\n\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {secondaryData2 &&\n                        secondaryData2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSchoolClick(item)}\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ?\n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }}\n                              paint={{\n                                'text-color': '#051885',\n\n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)}\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>\n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n              </div>\n\n              : ''}\n          {secondaryData2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(secondaryData2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n\n        </section>\n        : secondaryDetail === 'School' ?\n          <SingleSecondarySchool />\n          :\n          <section className='loading-screen'>\n            <Loading />\n          </section>\n      }\n    </>\n  )\n}\n\nexport default SecondaryDetails","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst SupermarketDetails = ({ propertyData, supermarkets1, listType, setSupermarkets1, postcodeData, tableMapView }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new supermarket data \n  const [supermarkets2, setSupermarkets2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedSupermarkets, setSelectedSupermarkts] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 10\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSupermarketClick = (supermarket) => {\n    console.log('selectd supermarket ->', supermarket)\n    setSelectedSupermarkts(supermarket)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n\n    setSortField(field)\n    setSortDirection(direction)\n\n    const sortedData = [...supermarkets1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n\n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n\n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n\n      return 0\n    })\n\n    setSupermarkets1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as supermarkets1\n      setSupermarkets2([...supermarkets1])\n    } else {\n      setSupermarkets2(\n        supermarkets1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.segment.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n\n  useEffect(() => {\n    if (supermarkets1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, supermarkets1])\n\n\n\n  return (\n    <>\n      {supermarkets1 ?\n        <section className=\"primary-details-section\">\n\n          {tableMapView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('supermarket_store_name')}>\n                  <h5>Supermarket name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('segment')}>\n                  <h5>Segment</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column4' className='sort-section' onClick={() => handleSort('store_size')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {supermarkets2 ? supermarkets2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.supermarket_store_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.segment}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.store_size}</h5>\n                        </div>\n\n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n\n\n                      </div>\n                      <hr className=\"dividing-line\" />\n\n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : tableMapView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {supermarkets2 ? supermarkets2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                \n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{index + 1}. {item.supermarket_store_name}</h5>\n                              <div className='details'>\n                                <div className='icon' id='supermarkets'></div>\n                                <h5>{item.store_size}</h5>\n                              </div>\n                              {listType === 'short list' ?\n                                <div className='details'>\n                                  <div className='icon' id='distance'></div>\n                                  <h5>{item.walkTimeMin} mins</h5>\n                                </div>\n                                : ''}\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/jdkuligowskii/clo8fop0l004b01pq000y65pb\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}\n                      className=\"profile-map\"\n                    >\n                      {supermarkets2 &&\n                        supermarkets2.map((item, index) => (\n                          <Marker\n                            key={index}\n                            id={item.id}\n                            longitude={item.longitude}\n                            latitude={item.latitude}\n                            onClick={() => handleSupermarketClick(item)}\n\n                          >\n                            <div className=\"poi-background\">{index + 1}</div>\n                          </Marker>\n                        )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                        <Marker\n                          id={postcodeData[0].id}\n                          longitude={postcodeData[0].latitude}\n                          latitude={postcodeData[0].longitude}\n                        >\n                          {/* <div className=\"poi-background\">99</div> */}\n                          <h1 className='property-icon'>🏠</h1>\n\n                        </Marker>}\n                      {selectedSupermarkets ?\n                        <Popup\n                          longitude={selectedSupermarkets.longitude}\n                          latitude={selectedSupermarkets.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedSupermarkts(null)}\n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedSupermarkets.supermarket_store_name}</h5>\n                              <p>{selectedSupermarkets.store_size}</p>\n                            </div>\n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : ''}\n          {supermarkets2 ?\n            <ReactPaginate\n              pageCount={Math.ceil(supermarkets2.length / 10)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : ''}\n\n\n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SupermarketDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport NavBar from '../../../tools/NavBar'\nimport { isUserAuth, getUserToken, getAccessToken } from '../../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport Footer from '../../../tools/Footer'\nimport WhiteSidebar from '../../WhiteSidebar'\nimport WhiteNavbar from '../../../tools/WhiteNavbar'\nimport NavBarRevised from '../../../tools/NavBarRevised'\n\n\n\n\n\nconst SingleSecondarySchool = () => {\n\n  // state for errors\n  const [errors, setErrors] = useState()\n\n  // state for navigateion\n  const navigate = useNavigate()\n\n  // state for school information\n  const [secondaryData, setSecondaryData] = useState()\n\n\n  // load in specfic secondary school\n  const loadSecondaryData = () => {\n    const getSecondaries = async () => {\n      try {\n        const id = JSON.parse(localStorage.getItem('school-id'))\n\n        const { data } = await axios.get(`/api/secondaries/${id}`)\n        console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    }\n    getSecondaries()\n  }\n\n  // carry out calculation\n  useEffect(() => {\n    loadSecondaryData()\n  }, [])\n\n\n  return (\n\n    <>\n      {secondaryData ?\n        <>\n          <section className=\"single-school-profile\">\n            <div className=\"school-core-info\">\n              <div className=\"info-left\">\n                <h1>{secondaryData[0].school_name}</h1>\n                <h3 className='normal'>📈 Ofsted: {secondaryData[0].ofsted_results}</h3>\n                <h3 className='normal'>🎓 {secondaryData[0].students} students per year</h3>\n                <h3 className='normal'>👨‍👧 Gender: {secondaryData[0].gender}</h3>\n                <h3 className='normal'>🙏 Faith: {secondaryData[0].religion === null ? 'All' : secondaryData[0].religion}</h3>\n                {/* <h3 className='website'>💻 {secondaryData[0].school_url}</h3> */}\n                <a href={secondaryData[0].school_url} target='_blank' className='website' rel=\"noreferrer\">💻 {secondaryData[0].school_url}</a>\n\n              </div>\n              <div className=\"info-right\">\n                <div className='school-image' id='secondary' style={{ backgroundImage: secondaryData[0].image_url === null ? undefined : `url(${secondaryData[0].image_url})` }}></div>\n              </div>\n            </div>\n            <div className='school-academic-highlights'>\n              <h1>Academic highlights</h1>\n              <div className='row'>\n                <div className='item'>\n                  <div className='circle'>\n                    <h1>{Math.round((1 - secondaryData[0].percentile) * 100) + 1}%</h1>\n                  </div>\n                  <p>In the top {Math.round((1 - secondaryData[0].percentile) * 100) + 1}% of schools in London</p>\n                </div>\n                <div className='item'>\n                  <div className='circle'>\n                    <h1>{Math.round((1 - secondaryData[0].borough_percentile) * 100) + 1}%</h1>\n                  </div>\n                  <p>In the top {Math.round((1 - secondaryData[0].borough_percentile) * 100) + 1}% of schools in {secondaryData[0].local_authority}</p>\n                </div>\n                <div className='item'>\n                  <div className='circle'>\n                    <h1>{secondaryData[0].results.length}</h1>\n                  </div>\n                  <p>Good curriculum with {secondaryData[0].results.length} subjects</p>\n                </div>\n              </div>\n            </div>\n            <div className='school-results'>\n              <h1>GCSE Results</h1>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <h5 id='column2'>Subject</h5>\n                <h5 id='column3'>Pass rate (%)</h5>\n                <h5 id='column4'>A/ A* (%)</h5>\n              </div>\n              <div className='school-table-details'>\n                {secondaryData[0].results.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.subject}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{Math.round(item.pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{Math.round(item.top_rate)}</h5>\n                        </div>\n                      </div>\n                      <hr className='dividing-line' />\n\n                    </>\n                  )\n                })}\n              </div>\n            </div>\n          </section>\n        </>\n        : ''}\n\n\n    </>\n  )\n}\n\nexport default SingleSecondarySchool"],"names":["Loading","_jsx","className","children","src","require","alt","_ref","ev1","listType","setEv1","postcodeData","tableMapView","useNavigate","ev2","setEv2","useState","sortField","setSortField","sortDirection","setSortDirection","selectedEvs","setSelectedEvs","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","console","log","parseInt","target","id","useEffect","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","item","location","toLowerCase","includes","fast_charging","_Fragment","_jsxs","onClick","map","index","power","walkTimeMin","slice","onMouseEnter","ReactMapGL","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","Marker","handleEvClick","gym","Popup","closeOnClick","onClose","ReactPaginate","pageCount","Math","ceil","length","onPageChange","data","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","gyms1","setGyms1","gyms2","setGyms2","selectedGyms","setSelectedGyms","gym_name","gym_group","class_type","long","Lat","handleGymClick","primaryData1","setPrimaryData1","primaryDetail","setPrimaryDetail","setSliderSelection","setPropertyView","primaryData2","setPrimaryData2","selectedSchool","setSelectedSchool","school_name","local_authority","school_type","ofsted_results","toString","total_pass_rate","total_top_rate","within_catchment","max_distance","goToPrimary","window","localStorage","setItem","round","pupils_at_standard","pupils_exceeding_standard","handleSchoolClick","school","parseFloat","Source","type","turf","units","Layer","paint","geometry","coordinates","layout","SinglePrimarySchool","pubs1","setPubs1","pub2","setPub2","selectedPubs","setSelectedPubs","name","operator","handlePubClick","pub","restaurants1","setRestaurants1","selectedRestaurants","setSelectdRestaurant","restaurants2","setRestaurants2","restaurant_name","rating","rel","href","url","restaurant","master_cuisine","propertyData","secondaryData1","setSecondaryData1","secondaryDetail","setSecondaryDetail","secondaryData2","setSecondaryData2","goToSecondary","SingleSecondarySchool","supermarkets1","setSupermarkets1","supermarkets2","setSupermarkets2","selectedSupermarkets","setSelectedSupermarkts","cleansed_name","segment","size","supermarket_store_name","store_size","handleSupermarketClick","supermarket","errors","setErrors","secondaryData","setSecondaryData","async","JSON","parse","getItem","axios","get","error","getSecondaries","students","gender","religion","school_url","style","backgroundImage","image_url","undefined","percentile","borough_percentile","results","subject","pass_rate","top_rate"],"sourceRoot":""}