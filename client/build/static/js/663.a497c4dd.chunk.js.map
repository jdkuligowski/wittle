{"version":3,"file":"static/js/663.a497c4dd.chunk.js","mappings":"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","sources":["components/helpers/Loading.js","components/tools/Footer.js","components/whiteLabel/propertyDetails/componentDetails/EVDetails.js","components/whiteLabel/propertyDetails/componentDetails/FitnessDetails.js","components/whiteLabel/propertyDetails/componentDetails/PrimaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/PubDetails.js","components/whiteLabel/propertyDetails/componentDetails/RestaurantDetails.js","components/whiteLabel/propertyDetails/componentDetails/SecondaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/SupermarketDetails.js","components/whiteLabel/variableSummaries/VariablesPage.js"],"sourcesContent":["import React from 'react'\n\nconst Loading = () => (\n  <div className=\"loading-gif\">\n    <img src={require('../../styles/loading-gif-2.gif')} alt=\"loading gif\"/>\n  </div>\n)\n\nexport default Loading","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst EVDetails = ({ propertyData, ev1, listType, setEv1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [evView, setEvView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [ev2, setEv2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedEvs, setSelectedEvs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleEvClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedEvs(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...ev1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setEv1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as ev2\n      setEv2([...ev1])\n    } else {\n      setEv2(\n        ev1.filter(item => {\n          return (\n            item.location.toLowerCase().includes(term.toLowerCase()) ||\n            // item.power.toLowerCase().includes(term.toLowerCase()) ||\n            item.fast_charging.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (ev1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, ev1])\n\n  \n\n  return (\n    <>\n      {ev1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">EV charging point details near {propertyData.name} </h1> : <h1>EV charging point long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setEvView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setEvView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {evView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('location')}>\n                  <h5>Charger location</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('power')}>\n                  <h5>Power</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Fast Charging</h5>\n              </div>\n              <div className='school-table-details'>\n                {ev2 ? ev2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.location}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.power} kW</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.fast_charging}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : evView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {ev2 ? ev2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.location}</h5>\n                              <h5>⛽️ Power: {item.power} kW</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {ev2 &&\n                    ev2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleEvClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedEvs ? \n                        <Popup\n                          longitude={selectedEvs.longitude}\n                          latitude={selectedEvs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedEvs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedEvs.location}</h5>\n                              <p>⛽️ Power:{selectedEvs.power} kW</p>\n                              <p>⛽️ Fast charging: {selectedEvs.fast_charging}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {ev2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(ev2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default EVDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst FitnessDetails = ({ propertyData, gyms1, listType, setGyms1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [fitnessView, setFitnessView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [gyms2, setGyms2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedGyms, setSelectedGyms] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleGymClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedGyms(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...gyms1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setGyms1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as gyms2\n      setGyms2([...gyms1])\n    } else {\n      setGyms2(\n        gyms1.filter(item => {\n          return (\n            item.gym_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.gym_group.toLowerCase().includes(term.toLowerCase()) ||\n            item.class_type.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (gyms1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, gyms1])\n\n  \n\n  return (\n    <>\n      {gyms1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Fitness details near {propertyData.name} </h1> : <h1>Fitness long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setFitnessView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setFitnessView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {fitnessView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('gym_name')}>\n                  <h5>Studio name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('gym_group')}>\n                  <h5>Studio group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Class types</h5>\n              </div>\n              <div className='school-table-details'>\n                {gyms2 ? gyms2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.gym_name}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.gym_group}</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.class_type}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : fitnessView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {gyms2 ? gyms2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.gym_name}</h5>\n                              <h5>{item.gym_group}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {gyms2 &&\n                    gyms2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.long}\n                        latitude={item.Lat}\n                        onClick={() => handleGymClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedGyms ? \n                        <Popup\n                          longitude={selectedGyms.long}\n                          latitude={selectedGyms.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedGyms(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedGyms.gym_name}</h5>\n                              <p>{selectedGyms.gym_group}</p>\n                              <p>{selectedGyms.class_type}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {gyms2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(gyms2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default FitnessDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PrimaryDetails = ({ propertyData, primaryData1, listType, setPrimaryData1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [primaryView, setPrimaryView] = useState('Table')\n\n  // state for storing new primary data \n  const [primaryData2, setPrimaryData2] = useState([])\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n    console.log(school.longitude)\n    console.log(school.latitude)\n    console.log(school.max_distance)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...primaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPrimaryData1(sortedData)\n  }\n  \n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as primaryData1\n      setPrimaryData2([...primaryData1])\n    } else {\n      setPrimaryData2(\n        primaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (primaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, primaryData1])\n\n\n  return (\n    <>\n      {primaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Primary school details near {propertyData.name} </h1> : <h1>Primary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPrimaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPrimaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {primaryView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('pupils_at_standard')}>\n                  <h5>At standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('pupils_exceeding_standard')}>\n                  <h5>Exceeding standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {primaryData2 ? primaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_at_standard * 100)}%</h5>}\n                        </div>\n                        <div className='column' id='column7'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_exceeding_standard * 100)}%</h5>}\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              {item.max_distance !== null ? <h5>{item.max_distance}</h5> : <h5>Not specified</h5>}\n                            </div>\n                            : ''\n                        }\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : primaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {primaryData2 ? primaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              {listType === 'short list' ?\n                                <>\n                                  <h5>🌍 {item.within_catchment}</h5>\n                                  <h5>⏰ {item.walkTimeMin} mins</h5>\n                                </>\n                                : listType === 'long list' ?\n                                  <h5>🌍 {item.max_distance}</h5>\n                                  : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {primaryData2 &&\n                    primaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', 'On request', 'N/a' , null].includes(selectedSchool.max_distance) ? \n                        <>\n                          { \n                            typeof parseFloat(selectedSchool.longitude) === 'number' && \n                            typeof parseFloat(selectedSchool.latitude) === 'number' &&\n                            typeof parseFloat(selectedSchool.max_distance) === 'number' \n                              ?\n                              <>\n                                <Source\n                                  id=\"catchment-area\"\n                                  type=\"geojson\"\n                                  data={turf.circle([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"catchment-area-ring\"\n                                    type=\"fill\"\n                                    paint={{\n                                      'fill-color': '#FFA7E5',\n                                      'fill-opacity': 0.3,\n                                    }} />\n                                  <Layer\n                                    id=\"catchment-area-outline\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#FFA7E5',\n                                      'line-width': 2,\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-line\"\n                                  type=\"geojson\"\n                                  data={turf.lineString([[parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)],\n                                    turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance), 90, { units: 'kilometers' }).geometry.coordinates])}\n                                >\n                                  <Layer\n                                    id=\"radius\"\n                                    type=\"line\"\n                                    paint={{\n                                      'line-color': '#051885',\n                                      'line-width': 2,\n                                      'line-dasharray': [2, 1],\n                                    }} />\n                                </Source>\n                                <Source\n                                  id=\"radius-label\"\n                                  type=\"geojson\"\n                                  data={turf.destination([parseFloat(selectedSchool.longitude), parseFloat(selectedSchool.latitude)], parseFloat(selectedSchool.max_distance) / 2, 90, { units: 'kilometers' })}\n                                >\n                                  <Layer\n                                    id=\"radius-label\"\n                                    type=\"symbol\"\n                                    layout={{\n                                      'text-field': `${selectedSchool.max_distance} km`,\n                                      'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                      'text-size': 12,\n                                      'text-offset': [0, -1],\n                                    }} \n                                    paint={{\n                                      'text-color': '#051885',\n                              \n                                    }}\n                                  />\n                                </Source>\n                              </>\n                              : \n                              <p>Invalid coordinates or distance.</p> \n                          }\n                        </>\n\n\n                        : selectedSchool ?\n                          <Popup\n                            longitude={parseFloat(selectedSchool.longitude)}\n                            latitude={parseFloat(selectedSchool.latitude)}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {primaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(primaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n\n    </>\n  )\n}\n\nexport default PrimaryDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PubDetails = ({ propertyData, pubs1, listType, setPubs1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [pubView, setPubView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [pub2, setPub2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedPubs, setSelectedPubs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handlePubClick = (pub) => {\n    console.log('selected pub ->', pub)\n    setSelectedPubs(pub)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...pubs1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPubs1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as pub2\n      setPub2([...pubs1])\n    } else {\n      setPub2(\n        pubs1.filter(item => {\n          return (\n            item.name.toLowerCase().includes(term.toLowerCase()) ||\n            item.operator.toLowerCase().includes(term.toLowerCase()) ||\n            item.walkTimeMin.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (pubs1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, pubs1])\n\n  \n\n  return (\n    <>\n      {pubs1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Pub details near {propertyData.name} </h1> : <h1>Pub long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPubView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPubView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {pubView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('name')}>\n                  <h5>Pub name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                {/* <div id='column3' className='pub-group sort-section' onClick={() => handleSort('operator')}>\n                  <h5>Pub group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>            */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {pub2 ? pub2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.name}</h5>\n                        </div>\n                        {/* <div className='column pub-group' id='column3'>\n                          <h5>{item.operator}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : pubView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {pub2 ? pub2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.name}</h5>\n                              <h5>🍺 Pub group: {item.operator}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {pub2 &&\n                    pub2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handlePubClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedPubs ? \n                        <Popup\n                          longitude={selectedPubs.longitude}\n                          latitude={selectedPubs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedPubs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedPubs.name}</h5>\n                              <p>🍺 {selectedPubs.operator} pub group</p>\n                              <p>🍺 Distance: {selectedPubs.walkTimeMin} mins</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {pub2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(pub2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default PubDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst RestaurantDetails = ({ propertyData, restaurants1, listType, setRestaurants1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [restaurantView, setRestaurantView] = useState('Table')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedRestaurants, setSelectdRestaurant] = useState(null)\n\n\n  // state for storing new supermarket data \n  const [restaurants2, setRestaurants2] = useState([])\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSchoolClick = (restaurant) => {\n    console.log('selectd restaurant ->', restaurant)\n    setSelectdRestaurant(restaurant)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...restaurants1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setRestaurants1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as restaurants2\n      setRestaurants2([...restaurants1])\n    } else {\n      setRestaurants2(\n        restaurants1.filter(item => {\n          return (\n            item.restaurant_name.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (restaurants1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, restaurants1])\n\n  \n\n  return (\n    <>\n      {restaurants1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Restaurant details near {propertyData.name} </h1> : <h1>Restaurants long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setRestaurantView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setRestaurantView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {restaurantView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('restaurant_name')}>\n                  <h5>Restaurant name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {/* <div id='column3' className='sort-section' onClick={() => handleSort('rating')}>\n                  <h5>Rating (/5)</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>              */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5'>Website</h5>\n              </div>\n              <div className='school-table-details'>\n                {restaurants2 ? restaurants2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.restaurant_name}</h5>\n                        </div>\n                        {/* <div className='column' id='column3'>\n                          <h5>{item.rating}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins </h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column' id='column5'>\n                          <a href={item.url}>Visit website</a>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : restaurantView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {restaurants2 ? restaurants2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.restaurant_name}</h5>\n                              {/* <h5>📈 Rating: {item.rating} /5</h5> */}\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {restaurants2 &&\n                    restaurants2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedRestaurants ? \n                        <Popup\n                          longitude={selectedRestaurants.longitude}\n                          latitude={selectedRestaurants.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectdRestaurant(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedRestaurants.restaurant_name}</h5>\n                              <p>{selectedRestaurants.master_cuisine}</p>\n                              {/* <p>{selectedRestaurants.rating} /5</p> */}\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {restaurants2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(restaurants2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default RestaurantDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\nconst SecondaryDetails = ({ propertyData, secondaryData1, listType, setSecondaryData1, postcodeData }) => {\n\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new primary data \n  const [secondaryData2, setSecondaryData2] = useState([])\n\n\n  // states for handling the view type\n  const [secondaryView, setSecondaryView] = useState('Table')\n\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // trigger icon pop up\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n\n  // ? Section3: Ability to sort data by different column names\n  // function to sort data by column name\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...secondaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSecondaryData1(sortedData)\n  }\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as secondaryData1\n      setSecondaryData2([...secondaryData1])\n    } else {\n      setSecondaryData2(\n        secondaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (secondaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, secondaryData1])\n\n  \n\n  return (\n\n    <>\n      {secondaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Secondary school details near {propertyData.name} </h1> : <h1>Secondary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSecondaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSecondaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n          {secondaryView === 'Table' ? \n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('total_pass_rate')}>\n                  <h5>GCSE pass rate</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('total_top_rate')}>\n                  <h5>GCSE A/A*</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {secondaryData2 ? secondaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          <h5>{(item.total_pass_rate === null ? 'N/a' : item.total_pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column7'>\n                          <h5>{(item.total_top_rate === null ? 'N/a' : item.total_top_rate)}</h5>\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.school_type === 'Independent school' ? 'N/a' : item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n            </div>\n\n            : secondaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {secondaryData2 ? secondaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title' onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              <h5>🌍 {item.within_catchment}</h5>\n                              <h5>⏰ {item.walkTimeMin} mins</h5>\n                            </div>\n\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {secondaryData2 &&\n                    secondaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ? \n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }} \n                              paint={{\n                                'text-color': '#051885',\n                              \n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n              </div>\n\n              : '' }\n          {secondaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(secondaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SecondaryDetails","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst SupermarketDetails = ({ propertyData, supermarkets1, listType, setSupermarkets1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [supermarketsView, setSupermarketsView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [supermarkets2, setSupermarkets2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedSupermarkets, setSelectedSupermarkts] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSupermarketClick = (supermarket) => {\n    console.log('selectd supermarket ->', supermarket)\n    setSelectedSupermarkts(supermarket)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...supermarkets1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSupermarkets1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as supermarkets1\n      setSupermarkets2([...supermarkets1])\n    } else {\n      setSupermarkets2(\n        supermarkets1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.segment.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase()) \n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (supermarkets1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, supermarkets1])\n\n  \n\n  return (\n    <>\n      {supermarkets1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Supermarkets near {propertyData.name} </h1> : <h1>Supermarkets long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSupermarketsView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSupermarketsView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {supermarketsView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('supermarket_store_name')}>\n                  <h5>Supermarket name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>             \n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('segment')}>\n                  <h5>Segment</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>  \n                <div id='column4' className='sort-section' onClick={() => handleSort('store_size')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                \n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {supermarkets2 ? supermarkets2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.supermarket_store_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.segment}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.store_size}</h5>\n                        </div>\n                      \n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n  \n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : supermarketsView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {supermarkets2 ? supermarkets2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.supermarket_store_name}</h5>\n                              <h5>{item.store_size}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {supermarkets2 &&\n                    supermarkets2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSupermarketClick(item)}\n\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n                      {selectedSupermarkets ? \n                        <Popup\n                          longitude={selectedSupermarkets.longitude}\n                          latitude={selectedSupermarkets.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedSupermarkts(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedSupermarkets.supermarket_store_name}</h5>\n                              <p>{selectedSupermarkets.store_size}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {supermarkets2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(supermarkets2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SupermarketDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\n\nimport PrimaryDetails from '../propertyDetails/componentDetails/PrimaryDetails'\nimport SecondaryDetails from '../propertyDetails/componentDetails/SecondaryDetails'\nimport RestaurantDetails from '../propertyDetails/componentDetails/RestaurantDetails'\nimport FitnessDetails from '../propertyDetails/componentDetails/FitnessDetails'\nimport SupermarketDetails from '../propertyDetails/componentDetails/SupermarketDetails'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from '../propertyDetails/componentDetails/EVDetails'\nimport PubDetails from '../propertyDetails/componentDetails/PubDetails'\n\n\n\n\nconst VariablesPage = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for company data\n  const [company, setCompany] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [ev, setEv] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Variables')\n  const [profileDetail, setProfileDetail] = useState('Variables')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(true)\n\n\n\n  // ? Section 2: load user data\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        const sortedData = data.sort((a, b) => b.pupils_at_standard - a.pupils_at_standard)\n        setPrimaryData(sortedData)\n        console.log('all primaries ->', sortedData)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    loadPrimaryData()\n  }, [])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        const sortedData = data.sort((a, b) => b.total_pass_rate - a.total_pass_rate)\n        setSecondaryData(sortedData)\n        console.log('all secondaries ->', sortedData)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadSecondaryData()\n  }, [])\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        const sortedData = data.sort((a, b) => b.rating - a.rating)\n        setRestaurants(sortedData)\n        console.log('all restaurants ->', sortedData)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadRestaurantData()\n  }, [])\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadFitnessData()\n  }, [])\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadSupermarketData()\n  }, [])\n\n\n  // ? Section 8: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadEVdata()\n  }, [])\n\n\n  \n\n  // ? Section 8: Load and sort Pubs data\n  const loadPubs = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pubs data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPubs()\n  }, [])\n\n\n\n\n\n\n  return (\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />    \n        {profileDetail === 'Variables' ?  \n          <section className='variables-section'>\n\n            <h1>Explore the different variables</h1>\n            <div className='variables-list'>\n              <div className='variable' onClick={() => setProfileDetail('Primary schools')}>\n                <h1>🏫</h1>\n                <h3>Primary schools</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Secondary schools')}>\n                <h1>👨‍🏫</h1>\n                <h3>Secondary schools</h3>\n              </div>\n              <div className='variable'>\n                <h1>🎓</h1>\n                <h3>6th form colleges</h3>\n              </div>\n              <div className='variable'>\n                <h1>🌳</h1>\n                <h3>Green space</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Restaurants')}>\n                <h1>🍽</h1>\n                <h3>Restaurants</h3>\n              </div>\n              <div className='variable'>\n                <h1>🚇</h1>\n                <h3>Tube stations</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('EVs')}>\n                <h1>⛽️</h1>\n                <h3>Electric vehicles</h3>\n              </div>\n              <div className='variable'onClick={() => setProfileDetail('Pubs')}>\n                <h1>🍻</h1>\n                <h3>Pubs</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Fitness')}>\n                <h1>🏋️‍♂️</h1>\n                <h3>Fitness</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Supermarkets')}>\n                <h1>🛒</h1>\n                <h3>Supermarkets</h3>\n              </div>\n            </div>\n\n          </section>\n          : profileDetail === 'Primary schools' ?\n            <section  className='variables-single-section'>\n              <PrimaryDetails\n                primaryData1={primaryData}\n                setPrimaryData1={setPrimaryData}\n                listType={'long list'}\n                setProfileDetail={setProfileDetail}\n              />\n\n            </section>\n\n            : profileDetail === 'Secondary schools' ?\n              <section  className='variables-single-section'>\n                <SecondaryDetails\n                  secondaryData1={secondaryData}\n                  setSecondaryData1={setSecondaryData}\n                  listType={'long list'}\n                />\n\n              </section>\n\n              : profileDetail === 'Restaurants' ?\n                <section  className='variables-single-section'>\n                  <RestaurantDetails\n                    restaurants1={restaurants}\n                    setRestaurants1={setRestaurants}\n                    listType={'long list'}\n                  />\n\n                </section>\n\n                : profileDetail === 'Fitness' ?\n                  <section  className='variables-single-section'>\n                    <FitnessDetails\n                      gyms1={gyms}\n                      setGyms1={setGyms}\n                      listType={'long list'}\n                    />\n\n                  </section>\n\n                  : profileDetail === 'Supermarkets' ?\n                    <section className='variables-single-section'>\n                      <SupermarketDetails\n                        supermarkets1={supermarkets}\n                        setSupermarkets1={setSupermarkets}\n                        listType={'long list'}\n                      />\n\n                    </section>\n\n                    : profileDetail === 'EVs' ?\n                      <section className='variables-single-section'>\n                        <EVDetails\n                          ev1={ev}\n                          setEv1={setEv}\n                          listType={'long list'}\n                        />\n\n                      </section>\n\n                      : profileDetail === 'Pubs' ?\n                        <section className='variables-single-section'>\n                          <PubDetails\n                            pubs1={pubs}\n                            setPubs1={setPubs}\n                            listType={'long list'}\n                          />\n\n                        </section>\n\n\n\n                        : ''}\n    \n\n      </section>\n    </>\n  )\n}\n\nexport default VariablesPage"],"names":["className","src","require","alt","textColour","pageType","id","style","color","propertyData","ev1","listType","setEv1","postcodeData","useNavigate","evView","setEvView","useState","ev2","setEv2","sortField","setSortField","sortDirection","setSortDirection","selectedEvs","setSelectedEvs","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","console","log","parseInt","target","useEffect","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","item","location","toLowerCase","includes","fast_charging","name","onClick","type","value","onChange","placeholder","map","index","power","walkTimeMin","slice","onMouseEnter","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","handleEvClick","gym","closeOnClick","onClose","pageCount","Math","ceil","length","onPageChange","data","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","gyms1","setGyms1","fitnessView","setFitnessView","gyms2","setGyms2","selectedGyms","setSelectedGyms","gym_name","gym_group","class_type","long","Lat","handleGymClick","primaryData1","setPrimaryData1","navigate","primaryView","setPrimaryView","primaryData2","setPrimaryData2","selectedSchool","setSelectedSchool","school_name","local_authority","school_type","ofsted_results","toString","total_pass_rate","total_top_rate","within_catchment","max_distance","round","pupils_at_standard","pupils_exceeding_standard","handleSchoolClick","school","parseFloat","turf","units","paint","geometry","coordinates","layout","pubs1","setPubs1","pubView","setPubView","pub2","setPub2","selectedPubs","setSelectedPubs","operator","handlePubClick","pub","restaurants1","setRestaurants1","restaurantView","setRestaurantView","selectedRestaurants","setSelectdRestaurant","restaurants2","setRestaurants2","restaurant_name","href","url","restaurant","master_cuisine","secondaryData1","setSecondaryData1","secondaryData2","setSecondaryData2","secondaryView","setSecondaryView","supermarkets1","setSupermarkets1","supermarketsView","setSupermarketsView","supermarkets2","setSupermarkets2","selectedSupermarkets","setSelectedSupermarkts","cleansed_name","segment","size","supermarket_store_name","store_size","handleSupermarketClick","supermarket","errors","setErrors","userData","setUserData","setPropertyData","company","setCompany","primaryData","setPrimaryData","secondaryData","setSecondaryData","restaurants","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","tubes","setTubes","ev","setEv","profileContent","setProfileContent","profileDetail","setProfileDetail","variableSide","setVariableSide","isUserAuth","async","axios","getUserToken","headers","Authorization","getAccessToken","getUser","error","loadUserData","getPrimaries","loadPrimaryData","getSecondaries","loadSecondaryData","rating","getData","loadRestaurantData","loadFitnessData","loadSupermarketData","loadEVdata","loadPubs","navbarColour"],"sourceRoot":""}