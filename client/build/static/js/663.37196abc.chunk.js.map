{"version":3,"file":"static/js/663.37196abc.chunk.js","mappings":"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","sources":["components/helpers/Loading.js","components/tools/Footer.js","components/tools/NavBarRevised.js","components/tools/WhiteNavbar.js","components/whiteLabel/WhiteSidebar.js","components/whiteLabel/propertyDetails/componentDetails/EVDetails.js","components/whiteLabel/propertyDetails/componentDetails/FitnessDetails.js","components/whiteLabel/propertyDetails/componentDetails/PrimaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/PubDetails.js","components/whiteLabel/propertyDetails/componentDetails/RestaurantDetails.js","components/whiteLabel/propertyDetails/componentDetails/SecondaryDetails.js","components/whiteLabel/propertyDetails/componentDetails/SupermarketDetails.js","components/whiteLabel/variableSummaries/VariablesPage.js"],"sourcesContent":["import React from 'react'\n\nconst Loading = () => (\n  <div className=\"loading-gif\">\n    <img src={require('../../styles/loading-gif-2.gif')} alt=\"loading gif\"/>\n  </div>\n)\n\nexport default Loading","\n\n\nconst Footer = ({ textColour, pageType }) => {\n\n\n\n  return (\n    <>\n      <section className='website-footer no-print' id={pageType}>\n        <p style={{ color: textColour }}>Wittle Technology Limited is a registered company in England and Wales with corporation number 14326945.</p>\n        <p style={{ color: textColour }}>Copyright © Wittle Technology Limited. All rights reserved.</p>\n      </section>\n    </>\n  )\n}\n\nexport default Footer","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { useDetectOutsideClick } from './ClickDropdown'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\n\nconst NavBarRevised = ({ setProfileContent, profileContent, profileDetail, setProfileDetail }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n    setIsActive(false)\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  const dropdownRef = useRef(null)\n  // const [isActive, setIsActive] = useDetectOutsideClick(dropdownRef, false)\n  const [isActive, setIsActive] = useState(false)\n  const openDropdown = () => setIsActive(!isActive)\n\n\n  // ? Section for login form detail within navbar\n  // set form data required for login\n\n  const [errors, setErrors] = useState({\n    email: '',\n    // username: '',\n    password: '',\n    passwordConfirmation: '',\n    // first_name: '',\n    // last_name: '',\n  })\n\n  // function for setting user to local storage when log in is successful\n  const setUserTokenToLocalStorage = (token) => {\n    window.localStorage.setItem('wittle-user-token', token)\n  }\n\n  // send form to back end to log in\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      console.log(registerData)\n      setUserTokenToLocalStorage(data.token)\n      //console.log(data.token)\n      console.log({ data })\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      navigate('/')\n    } catch (error) {\n      setErrors(true)\n    }\n  }\n\n  // update form dtail when logging in\n  const handleChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    setErrors(false)\n  }\n\n  // state for determining password state type\n  const [loginPasswordType, setLoginPasswordType] = useState('password')\n  const [registerPasswordType, setRegisterPasswordType] = useState('password')\n\n  // password reveal button\n  const passwordReveal = () => {\n    if (loginPasswordType === 'password') {\n      setLoginPasswordType('text')\n    } else {\n      setLoginPasswordType('password')\n    }\n  }\n\n  // password reveal button\n  const passwordRegisterReveal = () => {\n    if (registerPasswordType === 'password') {\n      setRegisterPasswordType('text')\n    } else {\n      setRegisterPasswordType('password')\n    }\n  }\n\n  // ? Menu modal\n  // state for the menu modal\n  const [menuShow, setMenuShow] = useState(false)\n\n  // close modal\n  const handleMenuClose = () => {\n    setMenuShow(false)\n  }\n\n  // open modal\n  const handleMenuShow = () => {\n    setMenuShow(true)\n  }\n\n  // ? Registration modal\n  // set state for showing insights modal\n  const [registerShow, setRegisterShow] = useState(false)\n\n  // close modal\n  const handleRegisterClose = () => {\n    setRegisterShow(false)\n  }\n\n  // show the modal\n  const handleRegisterShow = () => {\n    setRegisterShow(true)\n  }\n\n  // register data\n  const [registerData, setRegisterData] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n  })\n\n  // register data erros\n  const [registerError, setRegisterError] = useState({\n    email: '',\n    username: '',\n    password: '',\n    password_confirmation: '',\n    first_name: '',\n    last_name: '',\n    post: '',\n  })\n\n  // function to validate the password\n  const validatePassword = (password) => {\n    const minLength = 8\n    const hasUppercase = matches(password, /[A-Z]/)\n    const hasLowercase = matches(password, /[a-z]/)\n    const hasDigit = matches(password, /\\d/)\n    const hasSpecialChar = matches(password, /[^A-Za-z0-9]/)\n\n    if (!isLength(password, { min: minLength })) {\n      return 'Password must be at least 8 characters long'\n    }\n    if (!hasUppercase) {\n      return 'Password must contain at least one uppercase letter'\n    }\n    if (!hasLowercase) {\n      return 'Password must contain at least one lowercase letter'\n    }\n    if (!hasDigit) {\n      return 'Password must contain at least one digit'\n    }\n    if (!hasSpecialChar) {\n      return 'Password must contain at least one special character'\n    }\n    return ''\n  }\n\n  // update registration data and enter errors where relevant\n  const registerChange = (e) => {\n    setRegisterData({ ...registerData, [e.target.name]: e.target.value })\n    if (!isEmail(registerData.email)) {\n      setRegisterError({ ...registerError, email: 'Invalid email address' })\n\n    } else if (e.target.name === 'first_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, first_name: 'Add first name' })\n      } else {\n        setRegisterError({ ...registerError, first_name: '' })\n      }\n\n    } else if (e.target.name === 'last_name') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, last_name: 'Add last name' })\n      } else {\n        setRegisterError({ ...registerError, last_name: '' })\n      }\n\n    } else if (e.target.name === 'username') {\n      if (e.target.value.length < 1) {\n        setRegisterError({ ...registerError, username: 'Add username' })\n      } else {\n        setRegisterError({ ...registerError, username: '' })\n      }\n\n    } else if (e.target.name === 'password') {\n      const passwordError = validatePassword(e.target.value)\n      setRegisterError({ ...registerError, password: passwordError })\n\n    } else if (e.target.name === 'password_confirmation') {\n      if (e.target.value !== registerData.password) {\n        setRegisterError({ ...registerError, password_confirmation: 'Passwords don\\'t match' })\n      } else {\n        setRegisterError({ ...registerError, password_confirmation: '' })\n      }\n    }\n  }\n\n  // submit registration form\n  const registerSubmit = async (e) => {\n    e.preventDefault()\n    try {\n      await axios.post('/api/auth/register/', registerData)\n      const { data } = await axios.post('/api/auth/login/', registerData)\n      setUserTokenToLocalStorage(data.token)\n      window.localStorage.setItem('wittle-username', data.username)\n      console.log('username ->', data.username)\n      handleRegisterClose()\n      setRegisterData()\n    } catch (err) {\n      console.log(err)\n      setRegisterError({ ...registerError, post: 'Wittle account with this email already exists' })\n    }\n  }\n\n\n  // ? Section 3: controlling the state and functions for the nav bar changing color and section\n  // state for colour of navbar\n  const [navColour, setNavColour] = useState('#051885')\n  const [titleColour, setTitleColour] = useState('#FFA7E5')\n  const [textColour, setTextColour] = useState('#FFA7E5')\n\n  // function for selecting home page\n  const homeSelect = () => {\n    setProfileContent('My properties')\n    setProfileDetail('My properties')\n    navigate('/agents/profile')\n  }\n\n  // function for selecting wittle search\n  const searchSelect = () => {\n    setProfileContent('Variables')\n    setProfileDetail('Variables')\n    navigate('/agents/explore')\n\n  }\n\n  // function for selecting wittle lifestyle\n  const lifestyleSelect = () => {\n    setProfileContent('Comparison')\n    setProfileDetail('Comparison')\n    navigate('/agents/compare')\n  }\n\n  // function for selecting wittle lifestyle\n  // const adminSelect = () => {\n  //   setProfileContent('My household')\n  //   setProfileDetail('Admin dashboard')\n  // }\n\n  // function for selecting wittle lifestyle\n  const accountSelect = () => {\n    setProfileContent('Account')\n    setProfileDetail('Account')\n\n  }\n\n  return (\n    <>\n      <section className='centered-nav-bar' style={{ backgroundColor: navColour }}>\n        <section className='top-section'>\n\n          <div className='logo'>\n            <h2 style={{ color: titleColour }} onClick={() => navigate('/')}>Wittle</h2>\n            {/* {profileContent === 'Home' ? <h3 style={{ color: titleColour }}>Home</h3> :\n              profileContent === 'Variables' ? <h3 style={{ color: titleColour }}>Variables</h3> :\n                profileContent === 'Lifestyle' ? <h3 style={{ color: titleColour }}>Lifestyle</h3> :\n                  profileContent === 'Admin' ? <h3 style={{ color: titleColour }}>Admin</h3> :\n                    profileContent === 'Account' ? <h3 style={{ color: titleColour }}>Account</h3> : ''} */}\n          </div>\n        </section>\n        <section className='nav-slider'>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'My properties' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'My properties' ? '5px' : '' }} onClick={homeSelect}>MY PROPERTIES</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Variables' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Variables' ? '5px' : '' }} onClick={searchSelect}>EXPLORE</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Comparison' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Comparison' ? '5px' : '' }} onClick={lifestyleSelect}>COMPARISON</h4>\n          <h4 style={{ color: textColour, textDecoration: profileContent === 'Account' ? `underline 3px ${textColour}` : '', textUnderlineOffset: profileContent === 'Account' ? '5px' : '' }} onClick={accountSelect}>ACCOUNT</h4>\n        </section>\n      </section>\n      {/* <MenuModal\n        menuShow={menuShow}\n        setMenuShow={setMenuShow}\n        handleMenuClose={handleMenuClose}\n        removeItemFromStorage={removeItemFromStorage}\n      /> */}\n    </>\n  )\n}\n\nexport default NavBarRevised\n\n\n\n     \n// {isUserAuth() ?\n//   <div className=\"menu-container\" onClick={handleMenuShow} >\n//     <div className=\"menu-trigger\" >\n//       <span>\n//         <div className='burger-icon'>\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//           <hr className='burger-icon-line' />\n//         </div>\n//       </span>\n//     </div>\n//     <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//       <ul>\n//         <li className='dropdowns'><a href=\"/property-search\">New property search</a></li>\n//         <li className='dropdowns'><a href=\"/wittle-search\">New Wittle search</a></li>\n//         <li className='dropdowns'><a onClick={() => navigate(`/profile/${getUserToken()}`)}>My properties</a></li>\n//         <li className='dropdowns' onClick={removeItemFromStorage}><a>Sign out</a></li>\n//       </ul>\n//     </nav>\n//   </div>\n//   :\n//   <>\n//     <div className='menu-container' onClick={handleMenuShow} >\n//       <div className=\"menu-trigger\" >\n//         <span>\n//           <div className='burger-icon'>\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//             <hr className='burger-icon-line' />\n//           </div>\n//         </span>\n//       </div>\n//       <nav ref={dropdownRef} className={`menu ${isActive ? 'active' : 'inactive'}`}>\n//         <form className='form-detail' onSubmit={handleSubmit}>\n//           <p>Log in to your account</p>\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={handleChange} />\n//           <div className='login-input'>\n//             <input type={loginPasswordType} name='password' className='password-input' placeholder='Password' value={registerData.password} onChange={handleChange} />\n//             <div className='password-icon-container' onClick={passwordReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           <button onClick={openDropdown} className='sign-up' type='submit'>\n//             <span>\n//               <div className='burger-icon'>\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//                 <hr style={{ border: `1.5px solid ${titleColour}` }} className='burger-icon-line' />\n//               </div>\n//             </span>\n//           </button>\n//           {/* <GoogleLogin onSuccess={googleLogin} onError={errorMessage} /> */}\n\n//           <h5>New to Wittle?\n//             <span onClick={handleRegisterShow}> Join us</span>\n//           </h5>\n//         </form>\n//       </nav>\n//     </div>\n//     {/* <div className='register-modal-container'> */}\n//     <Modal show={registerShow} onHide={handleRegisterClose} backdrop='static' className='register-modal'>\n//       <Modal.Body>\n//         <form className='form-detail' onSubmit={registerSubmit} >\n//           <div className='register-title'>\n//             <h1>Unlock the benefits of Wittle</h1>\n//             <h1 className='x-close' onClick={handleRegisterClose}>x</h1>\n//           </div>\n//           <p className='form-overview'>Set up an account to help you find the perfect home</p>\n//           <hr />\n//           {/* First name */}\n//           <input type='text' name='first_name' className='input' placeholder='First name' value={registerData.first_name} onChange={registerChange} />\n//           {registerError.first_name && <p className=\"error\">* {registerError.first_name}</p>}\n//           {/* Last namee */}\n//           <input type='text' name='last_name' className='input' placeholder='Last name' value={registerData.last_name} onChange={registerChange} />\n//           {registerError.last_name && <p className=\"error\">* {registerError.last_name}</p>}\n//           {/* Email */}\n//           <input type='email' name='email' className='input' placeholder='Email' value={registerData.email} onChange={registerChange} />\n//           {registerError.email && <p className=\"error\">* {registerError.email}</p>}\n//           {/* Username */}\n//           <input type='text' name='username' className='input' placeholder='Username' value={registerData.username} onChange={registerChange} />\n//           {registerError.username && <p className=\"error\">* {registerError.username}</p>}\n//           {/* Password */}\n//           <div className='login-input'>\n//             <input type={registerPasswordType} name='password' className='password-input-register' placeholder='Password' value={registerData.password} onChange={registerChange} />\n//             <div className='password-icon-container' onClick={passwordRegisterReveal}>\n//               <div className='password-icon'></div>\n//             </div>\n//           </div>\n//           {registerError.password && <p className=\"error\">* {registerError.password}</p>}\n//           {/* Password confirmation */}\n//           <input type='password' name='password_confirmation' className='input' placeholder='Password confirmation' value={registerData.password_confirmation} onChange={registerChange} />\n//           {registerError.password_confirmation && <p className=\"error\">* {registerError.password_confirmation}</p>}\n\n//           <button type='submit'>Register</button>\n//           {registerError.post && <p className=\"error\">* {registerError.post}</p>}\n\n//         </form>\n//         <div className='register-bottom'>\n//           <button className='register-close' onClick={handleRegisterClose}>Close</button>\n//         </div>\n//       </Modal.Body>\n//     </Modal>\n//     {/* </div> */}\n\n//   </>\n// }\n\n","import { useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { isUserAuth, getUserToken, getAccessToken } from '../auth/Auth'\nimport Select from 'react-select'\nimport { Modal } from 'react-bootstrap'\nimport { GoogleLogin } from '@react-oauth/google'\nimport { isEmail, isLength, matches } from 'validator'\nimport MenuModal from '../helpers/modals/MenuModal'\n\n\nconst WhiteNavbar = ({ navbarColour }) => {\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    window.location.reload()\n  }\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='nav-section no-print' style={{ backgroundColor: navbarColour }}>\n        <div className='left-section'>\n          <div className='logo'>\n            <h2 onClick={() => navigate('/')}>Wittle</h2>\n            {/* <div className='logo-image'></div> */}\n          </div>\n        </div>\n    \n        {isUserAuth() ?\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={removeItemFromStorage}><a>Sign out</a></h3>\n          </div>\n\n          :\n          <div className=\"menu-container\" >\n            <h3 className='cta' onClick={() => navigate('/login')}><a>Sign in</a></h3>\n          </div>\n\n        }\n      </section>\n\n    </>\n  )\n\n}\n\nexport default WhiteNavbar","import { useParams, useNavigate, Link } from 'react-router-dom'\nimport React, { useState, useEffect, useRef } from 'react'\n\n\nconst WhiteSidebar = ({ setProfileDetail, variableSide, setProfileContent, setVariableSide, userData }) => {\n\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n\n  return (\n    <>\n      <section className='profile-sidebar-open no-print remove-margin'>\n        <div className='logo'>\n          <h2 onClick={() => navigate('/')}>Wittle</h2>\n        </div>\n        <div className='profile-buttons'>\n          <div className='profile-button-title' >\n            <h2 onClick={() => {\n              setProfileDetail('Home')\n              setProfileContent('Home')\n              navigate('/agents/profile')\n            }}>🧘‍♂️ Wittle home</h2>\n          </div>\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileDetail('My properties')\n              setProfileContent('My properties')\n              navigate('/agents/properties')\n            }}>🏡 My properties</h2>\n          </div>\n          {/* <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Variables')\n              setProfileDetail('Variables')\n              setVariableSide(!variableSide)\n              navigate('/agents/explore')\n            }\n            }>🔎 Explore</h2>\n            {variableSide ? <h4>v</h4> : <h4>^</h4>}\n          </div> */}\n\n          {/* <div className='profile-button-sub'>\n            <h3 onClick={() => setProfileDetail('Primary schools')}>🏫 Primary schools</h3>\n            <h3 onClick={() => setProfileDetail('Secondary schools')}>👨‍🏫 Secondary schools</h3>\n            <h3 onClick={() => setProfileDetail('Restaurants')}>🍽 Restaurants </h3>\n            <h3 onClick={() => setProfileDetail('Pubs')}>🍺 Pubs </h3>\n            <h3 onClick={() => setProfileDetail('Fitness')}>🏋️‍♂️ Fitness </h3>\n            <h3 onClick={() => setProfileDetail('Supermarkets')}>🛒 Supermarkets </h3>\n            <h3 onClick={() => setProfileDetail('EVs')}>⛽️ EVs </h3>\n\n          </div> */}\n          {/* <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Comparison')\n              setProfileDetail('Comparison')\n              navigate('/agents/compare')\n            }}>↔️ Comparison</h2>\n          </div> */}\n          <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Property finder')\n              setProfileDetail('Property finder')\n              navigate('/agents/finder')\n            }}>🔎 Property finder</h2>\n          </div>\n          {/* <div className='profile-button-title' id='second-title'>\n            <h2 onClick={() => {\n              setProfileContent('Account')\n              setProfileDetail('Account')\n            }}>🖥 Account details</h2>\n          </div> */}\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default WhiteSidebar","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst EVDetails = ({ propertyData, ev1, listType, setEv1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [evView, setEvView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [ev2, setEv2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedEvs, setSelectedEvs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleEvClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedEvs(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...ev1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setEv1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as ev2\n      setEv2([...ev1])\n    } else {\n      setEv2(\n        ev1.filter(item => {\n          return (\n            item.location.toLowerCase().includes(term.toLowerCase()) ||\n            // item.power.toLowerCase().includes(term.toLowerCase()) ||\n            item.fast_charging.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (ev1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, ev1])\n\n  \n\n  return (\n    <>\n      {ev1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">EV charging point details near {propertyData.name} </h1> : <h1>EV charging point long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setEvView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setEvView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {evView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('location')}>\n                  <h5>Charger location</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('power')}>\n                  <h5>Power</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Fast Charging</h5>\n              </div>\n              <div className='school-table-details'>\n                {ev2 ? ev2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.location}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.power} kW</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.fast_charging}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : evView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {ev2 ? ev2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.location}</h5>\n                              <h5>⛽️ Power: {item.power} kW</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {ev2 &&\n                    ev2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleEvClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedEvs ? \n                        <Popup\n                          longitude={selectedEvs.longitude}\n                          latitude={selectedEvs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedEvs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedEvs.location}</h5>\n                              <p>⛽️ Power:{selectedEvs.power} kW</p>\n                              <p>⛽️ Fast charging: {selectedEvs.fast_charging}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {ev2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(ev2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default EVDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst FitnessDetails = ({ propertyData, gyms1, listType, setGyms1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [fitnessView, setFitnessView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [gyms2, setGyms2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedGyms, setSelectedGyms] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleGymClick = (gym) => {\n    console.log('selectd gym ->', gym)\n    setSelectedGyms(gym)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...gyms1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setGyms1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as gyms2\n      setGyms2([...gyms1])\n    } else {\n      setGyms2(\n        gyms1.filter(item => {\n          return (\n            item.gym_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.gym_group.toLowerCase().includes(term.toLowerCase()) ||\n            item.class_type.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (gyms1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, gyms1])\n\n  \n\n  return (\n    <>\n      {gyms1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Fitness details near {propertyData.name} </h1> : <h1>Fitness long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setFitnessView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setFitnessView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {fitnessView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('gym_name')}>\n                  <h5>Studio name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                <div id='column3' className='gym-group sort-section' onClick={() => handleSort('gym_group')}>\n                  <h5>Studio group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>           \n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5' className='gym-final'>Class types</h5>\n              </div>\n              <div className='school-table-details'>\n                {gyms2 ? gyms2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.gym_name}</h5>\n                        </div>\n                        <div className='column gym-group' id='column3'>\n                          <h5>{item.gym_group}</h5>\n                        </div>\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column gym-final' id='column5'>\n                          <h5>{item.class_type}</h5>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : fitnessView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {gyms2 ? gyms2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.gym_name}</h5>\n                              <h5>{item.gym_group}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {gyms2 &&\n                    gyms2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.long}\n                        latitude={item.Lat}\n                        onClick={() => handleGymClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedGyms ? \n                        <Popup\n                          longitude={selectedGyms.long}\n                          latitude={selectedGyms.Lat}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedGyms(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedGyms.gym_name}</h5>\n                              <p>{selectedGyms.gym_group}</p>\n                              <p>{selectedGyms.class_type}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {gyms2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(gyms2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default FitnessDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PrimaryDetails = ({ propertyData, primaryData1, listType, setPrimaryData1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [primaryView, setPrimaryView] = useState('Table')\n\n  // state for storing new primary data \n  const [primaryData2, setPrimaryData2] = useState([])\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you clicjk button for pagination\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...primaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPrimaryData1(sortedData)\n  }\n  \n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as primaryData1\n      setPrimaryData2([...primaryData1])\n    } else {\n      setPrimaryData2(\n        primaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (primaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, primaryData1])\n\n\n  return (\n    <>\n      {primaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Primary school details near {propertyData.name} </h1> : <h1>Primary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPrimaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPrimaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {primaryView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('pupils_at_standard')}>\n                  <h5>At standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('pupils_exceeding_standard')}>\n                  <h5>Exceeding standard</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {primaryData2 ? primaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/primary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_at_standard * 100)}%</h5>}\n                        </div>\n                        <div className='column' id='column7'>\n                          {item.school_type === 'Independent school' ? <h5>N/a</h5> : <h5>{Math.round(item.pupils_exceeding_standard * 100)}%</h5>}\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              {item.max_distance !== null ? <h5>{item.max_distance}</h5> : <h5>Not specified</h5>}\n                            </div>\n                            : ''\n                        }\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : primaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {primaryData2 ? primaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              {listType === 'short list' ?\n                                <>\n                                  <h5>🌍 {item.within_catchment}</h5>\n                                  <h5>⏰ {item.walkTimeMin} mins</h5>\n                                </>\n                                : listType === 'long list' ?\n                                  <h5>🌍 {item.max_distance}</h5>\n                                  : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {primaryData2 &&\n                    primaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ? \n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }} \n                              paint={{\n                                'text-color': '#051885',\n                              \n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n\n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {primaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(primaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n\n    </>\n  )\n}\n\nexport default PrimaryDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst PubDetails = ({ propertyData, pubs1, listType, setPubs1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [pubView, setPubView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [pub2, setPub2] = useState([])\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set state for icon selection\n  const [selectedPubs, setSelectedPubs] = useState()\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handlePubClick = (pub) => {\n    console.log('selected pub ->', pub)\n    setSelectedPubs(pub)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...pubs1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setPubs1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as pub2\n      setPub2([...pubs1])\n    } else {\n      setPub2(\n        pubs1.filter(item => {\n          return (\n            item.name.toLowerCase().includes(term.toLowerCase()) ||\n            item.operator.toLowerCase().includes(term.toLowerCase()) ||\n            item.walkTimeMin.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (pubs1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, pubs1])\n\n  \n\n  return (\n    <>\n      {pubs1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Pub details near {propertyData.name} </h1> : <h1>Pub long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setPubView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setPubView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {pubView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('name')}>\n                  <h5>Pub name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>   \n                {/* <div id='column3' className='pub-group sort-section' onClick={() => handleSort('operator')}>\n                  <h5>Pub group</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>            */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>\n                  :\n                  <h5 id='column4'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {pub2 ? pub2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.name}</h5>\n                        </div>\n                        {/* <div className='column pub-group' id='column3'>\n                          <h5>{item.operator}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : pubView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {pub2 ? pub2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.name}</h5>\n                              <h5>🍺 Pub group: {item.operator}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {pub2 &&\n                    pub2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handlePubClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedPubs ? \n                        <Popup\n                          longitude={selectedPubs.longitude}\n                          latitude={selectedPubs.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedPubs(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedPubs.name}</h5>\n                              <p>🍺 {selectedPubs.operator} pub group</p>\n                              <p>🍺 Distance: {selectedPubs.walkTimeMin} mins</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {pub2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(pub2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          {/* <h1>Pub data loading...</h1> */}\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default PubDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst RestaurantDetails = ({ propertyData, restaurants1, listType, setRestaurants1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [restaurantView, setRestaurantView] = useState('Table')\n\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  const [selectedRestaurants, setSelectdRestaurant] = useState(null)\n\n\n  // state for storing new supermarket data \n  const [restaurants2, setRestaurants2] = useState([])\n\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSchoolClick = (restaurant) => {\n    console.log('selectd restaurant ->', restaurant)\n    setSelectdRestaurant(restaurant)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...restaurants1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setRestaurants1(sortedData)\n  }\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as restaurants2\n      setRestaurants2([...restaurants1])\n    } else {\n      setRestaurants2(\n        restaurants1.filter(item => {\n          return (\n            item.restaurant_name.toLowerCase().includes(term.toLowerCase())\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (restaurants1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, restaurants1])\n\n  \n\n  return (\n    <>\n      {restaurants1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Restaurant details near {propertyData.name} </h1> : <h1>Restaurants long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setRestaurantView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setRestaurantView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {restaurantView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('restaurant_name')}>\n                  <h5>Restaurant name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {/* <div id='column3' className='sort-section' onClick={() => handleSort('rating')}>\n                  <h5>Rating (/5)</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>              */}\n                {listType === 'short list' ?\n                  <div id='column4' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                  :\n                  <h5 id='column4'></h5>\n                }\n\n                <h5 id='column5'>Website</h5>\n              </div>\n              <div className='school-table-details'>\n                {restaurants2 ? restaurants2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5>{item.restaurant_name}</h5>\n                        </div>\n                        {/* <div className='column' id='column3'>\n                          <h5>{item.rating}</h5>\n                        </div> */}\n                      \n                        <div className='column' id='column4'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins </h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n                        <div className='column' id='column5'>\n                          <a href={item.url}>Visit website</a>\n                        </div>\n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : restaurantView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {restaurants2 ? restaurants2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.restaurant_name}</h5>\n                              {/* <h5>📈 Rating: {item.rating} /5</h5> */}\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {restaurants2 &&\n                    restaurants2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedRestaurants ? \n                        <Popup\n                          longitude={selectedRestaurants.longitude}\n                          latitude={selectedRestaurants.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectdRestaurant(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedRestaurants.restaurant_name}</h5>\n                              <p>{selectedRestaurants.master_cuisine}</p>\n                              {/* <p>{selectedRestaurants.rating} /5</p> */}\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {restaurants2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(restaurants2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default RestaurantDetails\n\n\n\n","import React, { useState, useEffect, useInsertionEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\nconst SecondaryDetails = ({ propertyData, secondaryData1, listType, setSecondaryData1, postcodeData }) => {\n\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for storing new primary data \n  const [secondaryData2, setSecondaryData2] = useState([])\n\n\n  // states for handling the view type\n  const [secondaryView, setSecondaryView] = useState('Table')\n\n\n  const [selectedSchool, setSelectedSchool] = useState(null)\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // trigger icon pop up\n  const handleSchoolClick = (school) => {\n    setSelectedSchool(school)\n  }\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n\n\n  // ? Section3: Ability to sort data by different column names\n  // function to sort data by column name\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...secondaryData1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSecondaryData1(sortedData)\n  }\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as secondaryData1\n      setSecondaryData2([...secondaryData1])\n    } else {\n      setSecondaryData2(\n        secondaryData1.filter(item => {\n          return (\n            item.school_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.local_authority.toLowerCase().includes(term.toLowerCase()) ||\n            item.school_type.toLowerCase().includes(term.toLowerCase()) ||\n            item.ofsted_results && item.ofsted_results.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_pass_rate && item.total_pass_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            item.total_top_rate && item.total_top_rate.toString().toLowerCase().includes(term.toLowerCase()) ||\n            (listType === 'short list' && item.within_catchment.toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'short list' && item.walkTimeMin && item.walkTimeMin.toString().toLowerCase().includes(term.toLowerCase())) ||\n            (listType === 'long list' && item.max_distance && item.max_distance.toString().toLowerCase().includes(term.toLowerCase()))\n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (secondaryData1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, secondaryData1])\n\n  \n\n  return (\n\n    <>\n      {secondaryData1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Secondary school details near {propertyData.name} </h1> : <h1>Secondary school long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSecondaryView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSecondaryView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n          {secondaryView === 'Table' ? \n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='sort-section' onClick={() => handleSort('school_name')}>\n                  <h5>School name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <h5 id='column3'>Local authority</h5>\n                <h5 id='column4'>Type</h5>\n                <div id='column5' className='sort-section' onClick={() => handleSort('ofsted_results')}>\n                  <h5>Ofsted</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column6' className='sort-section' onClick={() => handleSort('total_pass_rate')}>\n                  <h5>GCSE pass rate</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                <div id='column7' className='sort-section' onClick={() => handleSort('total_top_rate')}>\n                  <h5>GCSE A/A*</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>\n                {listType === 'short list' ?\n                  <>\n                    <h5 id='column8'>Catchment</h5>\n                    <div id='column9' className='sort-section' onClick={() => handleSort('distance_between')}>\n                      <h5>Dist</h5>\n                      <h5 className='sort-button'>↕️</h5>\n                    </div>\n                  </>\n\n                  : listType === 'long list' ?\n                    <>\n                      <div id='column8' className='sort-section' onClick={() => handleSort('max_distance')}>\n                        <h5>Catchment distance</h5>\n                        <h5 className='sort-button'>↕️</h5>\n                      </div>\n                    </>\n                    : '' }\n              </div>\n              <div className='school-table-details'>\n                {secondaryData2 ? secondaryData2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column' id='column2'>\n                          <h5 onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                        </div>\n                        <div className='column' id='column3'>\n                          <h5>{item.local_authority}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.school_type}</h5>\n                        </div>\n                        <div className='column' id='column5'>\n                          <h5>{item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                        </div>\n                        <div className='column' id='column6'>\n                          <h5>{(item.total_pass_rate === null ? 'N/a' : item.total_pass_rate)}</h5>\n                        </div>\n                        <div className='column' id='column7'>\n                          <h5>{(item.total_top_rate === null ? 'N/a' : item.total_top_rate)}</h5>\n                        </div>\n                        {listType === 'short list' ? \n                          <>\n                            <div className='column' id='column8'>\n                              <h5>{item.within_catchment}</h5>\n                            </div><div className='column' id='column9'>\n                              <h5>{item.walkTimeMin} mins</h5>\n                            </div>\n                          </>\n                          : listType === 'long list' ?\n                            <div className='column' id='column8'>\n                              <h5>{item.school_type === 'Independent school' ? 'N/a' : item.max_distance}</h5>\n                            </div>\n                            : ''\n                        }\n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n            </div>\n\n            : secondaryView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {secondaryData2 ? secondaryData2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title' onClick={() => navigate(`/agents/secondary-schools/${item.id}`)}>{item.school_name}</h5>\n                              <h5>🎓{item.school_type}</h5>\n                              <h5>📈 {item.ofsted_results === null ? 'N/a' : item.ofsted_results}</h5>\n                              <h5>🌍 {item.within_catchment}</h5>\n                              <h5>⏰ {item.walkTimeMin} mins</h5>\n                            </div>\n\n                          </div>\n                          <hr className=\"dividing-line\" />\n\n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {secondaryData2 &&\n                    secondaryData2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSchoolClick(item)}\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n\n                      {selectedSchool && !['Does not apply', 'Check', 'Religion', null].includes(selectedSchool.max_distance) ? \n                        <>\n                          <Source\n                            id=\"catchment-area\"\n                            type=\"geojson\"\n                            data={turf.circle([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"catchment-area-ring\"\n                              type=\"fill\"\n                              paint={{\n                                'fill-color': '#FFA7E5',\n                                'fill-opacity': 0.3,\n                              }} />\n                            <Layer\n                              id=\"catchment-area-outline\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#FFA7E5',\n                                'line-width': 2,\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-line\"\n                            type=\"geojson\"\n                            data={turf.lineString([[selectedSchool.longitude, selectedSchool.latitude],\n                              turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance, 90, { units: 'kilometers' }).geometry.coordinates])}\n                          >\n                            <Layer\n                              id=\"radius\"\n                              type=\"line\"\n                              paint={{\n                                'line-color': '#051885',\n                                'line-width': 2,\n                                'line-dasharray': [2, 1],\n                              }} />\n                          </Source>\n                          <Source\n                            id=\"radius-label\"\n                            type=\"geojson\"\n                            data={turf.destination([selectedSchool.longitude, selectedSchool.latitude], selectedSchool.max_distance / 2, 90, { units: 'kilometers' })}\n                          >\n                            <Layer\n                              id=\"radius-label\"\n                              type=\"symbol\"\n                              layout={{\n                                'text-field': `${selectedSchool.max_distance} km`,\n                                'text-font': ['Open Sans Bold', 'Arial Unicode MS Bold'],\n                                'text-size': 12,\n                                'text-offset': [0, -1],\n                              }} \n                              paint={{\n                                'text-color': '#051885',\n                              \n                              }}\n                            />\n                          </Source>\n                        </>\n                        : selectedSchool ?\n                          <Popup\n                            longitude={selectedSchool.longitude}\n                            latitude={selectedSchool.latitude}\n                            closeOnClick={false}\n                            className=\"item-popup\"\n                            onClose={() => setSelectedSchool(null)} \n                          >\n                            <div className=\"popup-content\">\n\n                              <div className='popup-border'>\n                                <h5 className='title'>This school has no catchment area</h5>\n                              </div>                      \n                            </div>\n                          </Popup>\n                          : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n              </div>\n\n              : '' }\n          {secondaryData2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(secondaryData2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n\n        \n        </section>\n        :\n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SecondaryDetails","import React, { useState, useEffect } from 'react'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport ReactPaginate from 'react-paginate'\nimport ReactMapGL, { Marker, Popup, Source, Layer } from 'react-map-gl'\nimport * as turf from '@turf/turf'\nimport Footer from '../../../tools/Footer'\nimport Loading from '../../../helpers/Loading'\n\n\n\nconst SupermarketDetails = ({ propertyData, supermarkets1, listType, setSupermarkets1, postcodeData }) => {\n\n  // ? Section 1: load states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // states for handling the view type\n  const [supermarketsView, setSupermarketsView] = useState('Table')\n\n  // state for storing new supermarket data \n  const [supermarkets2, setSupermarkets2] = useState([])\n\n  // state for clicking the supermnarkewt icon\n  const [selectedSupermarkets, setSelectedSupermarkts] = useState()\n\n  // set sort fields\n  const [sortField, setSortField] = useState(null)\n  const [sortDirection, setSortDirection] = useState(null)\n\n  // set search state\n  const [searchTerm, setSearchTerm] = useState('')\n\n  // control the states for maps\n  const [viewport, setViewport] = useState({\n    latitude: 51.515419,\n    longitude: -0.141099,\n    zoom: 11.5,\n  })\n\n  // states for handling the popups on the map\n  const [showPopup, setShowPopup] = useState(true)\n  const [iconId, setIconId] = useState()\n\n  // pagination on map\n  const ITEMS_PER_PAGE = 50\n  const [currentPage, setCurrentPage] = useState(0)\n  const startIndex = currentPage * ITEMS_PER_PAGE\n  const endIndex = startIndex + ITEMS_PER_PAGE\n\n\n  // ? Section 2: Functions relating to the map\n  // set pop up icon\n  const iconSetting = (e) => {\n    setShowPopup(true)\n    console.log(showPopup)\n    setIconId(parseInt(e.target.id))\n    console.log(parseInt(e.target.id))\n  }\n\n  // set current page when you click icon\n  const handleSupermarketClick = (supermarket) => {\n    console.log('selectd supermarket ->', supermarket)\n    setSelectedSupermarkts(supermarket)\n  }\n\n  // load in viewport data based on location of the property\n  useEffect(() => {\n    if (postcodeData) {\n      setViewport((prevViewport) => ({\n        ...prevViewport,\n        latitude: postcodeData[0].longitude,\n        longitude: postcodeData[0].latitude,\n        zoom: 12.5,\n      }))\n    }\n  }, [postcodeData])\n\n  // set current page when you clicjk button for pagination\n  const handlePageClick = (data) => {\n    const { selected } = data\n    setCurrentPage(selected)\n  }\n\n\n\n  // ? Section 3: Functinos for sorting table headers\n  const handleSort = (field) => {\n    let direction = 'asc'\n\n    if (sortField === field && sortDirection === 'asc') {\n      direction = 'desc'\n    }\n  \n    setSortField(field)\n    setSortDirection(direction)\n  \n    const sortedData = [...supermarkets1].sort((a, b) => {\n      if (!isNaN(a[field]) && !isNaN(b[field])) {\n        return direction === 'asc' ? a[field] - b[field] : b[field] - a[field]\n      }\n  \n      if (a[field] < b[field]) {\n        return direction === 'asc' ? -1 : 1\n      }\n  \n      if (a[field] > b[field]) {\n        return direction === 'asc' ? 1 : -1\n      }\n  \n      return 0\n    })\n  \n    setSupermarkets1(sortedData)\n  }\n\n\n\n\n  // ? Section 4: Table search\n  // function for searching the table\n  const handleSearch = (term) => {\n    if (term === '') {\n      // if search term is empty, reset primaryData2 to be the same as supermarkets1\n      setSupermarkets2([...supermarkets1])\n    } else {\n      setSupermarkets2(\n        supermarkets1.filter(item => {\n          return (\n            item.cleansed_name.toLowerCase().includes(term.toLowerCase()) ||\n            item.segment.toLowerCase().includes(term.toLowerCase()) ||\n            item.size.toLowerCase().includes(term.toLowerCase()) \n          )\n        })\n      )\n    }\n  }\n  \n  useEffect(() => {\n    if (supermarkets1) {\n      handleSearch(searchTerm)\n    }\n  }, [searchTerm, supermarkets1])\n\n  \n\n  return (\n    <>\n      {supermarkets1 ?\n        <section className=\"primary-details-section\">\n          <div className='title-buttons'>\n            {propertyData ? <h1 className=\"primary-title\">Supermarkets near {propertyData.name} </h1> : <h1>Supermarkets long list</h1> }\n            <div className='icon-selector-section'>\n              <div className='icon-selector'>\n                <div className='table-icon' onClick={(e) => setSupermarketsView('Table')} ></div>\n\n              </div>\n              <div className='icon-selector'>\n                <div className='map-icon' onClick={(e) => setSupermarketsView('Map')} ></div>\n              </div>\n            </div>\n          </div>\n          <div className='search-section'>\n            <input type=\"text\" value={searchTerm} onChange={e => setSearchTerm(e.target.value)} placeholder=\"🔎 explore the data...\" />\n\n          </div>\n\n          {supermarketsView === 'Table' ?\n            <div className='school-block'>\n              <div className='school-table-headers'>\n                <h5 id='column1'>#</h5>\n                <div id='column2' className='gym-name sort-section' onClick={() => handleSort('supermarket_store_name')}>\n                  <h5>Supermarket name</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>             \n                <div id='column3' className='sort-section supermarket' onClick={() => handleSort('segment')}>\n                  <h5>Segment</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div>  \n                <div id='column4' className='sort-section' onClick={() => handleSort('store_size')}>\n                  <h5>Size</h5>\n                  <h5 className='sort-button'>↕️</h5>\n                </div> \n                {listType === 'short list' ?\n                  <div id='column5' className='sort-section' onClick={() => handleSort('walkTimeMin')}>\n                    <h5>Distance</h5>\n                    <h5 className='sort-button'>↕️</h5>\n                  </div>                \n                  :\n                  <h5 id='column5'></h5>\n                }\n\n              </div>\n              <div className='school-table-details'>\n                {supermarkets2 ? supermarkets2.map((item, index) => {\n                  return (\n                    <>\n                      <div className='school-content'>\n                        <div className='column' id='column1'>\n                          <h5>{index + 1}</h5>\n                        </div>\n                        <div className='column gym-name' id='column2'>\n                          <h5>{item.supermarket_store_name}</h5>\n                        </div>\n                        <div className='column supermarket' id='column3'>\n                          <h5>{item.segment}</h5>\n                        </div>\n                        <div className='column' id='column4'>\n                          <h5>{item.store_size}</h5>\n                        </div>\n                      \n                        <div className='column' id='column5'>\n                          {listType === 'short list' ?\n                            <h5>{item.walkTimeMin} mins</h5>\n                            :\n                            <h5></h5>\n                          }\n                        </div>\n  \n                \n                      </div>\n                      <hr className=\"dividing-line\" />\n        \n                    </>\n                  )\n                }).slice(startIndex, endIndex) : ''}\n              </div>\n\n            </div>\n\n\n\n\n            : supermarketsView === 'Map' ?\n\n              <div className='school-block'>\n                <div className='map-grid-view'>\n\n\n                  <div className='grid-list'>\n                    {supermarkets2 ? supermarkets2.map((item, index) => {\n                      return (\n                        <>\n                          <div className='school-content'>\n                            <div className='grid-left'>\n                              <h5>{index + 1}</h5>\n\n                            </div>\n                            <div className='grid-right' id={item.id} onMouseEnter={iconSetting} >\n                              <h5 className='title'>{item.supermarket_store_name}</h5>\n                              <h5>{item.store_size}</h5>\n                              {listType === 'short list' ?\n                                <h5>🌐 Distance: {item.walkTimeMin} mins</h5>\n                                : '' }\n                            </div>\n                          </div>\n                          <hr className=\"dividing-line\" />\n        \n                        </>\n                      )\n                    }).slice(startIndex, endIndex) : ''}\n\n\n                  </div>\n\n                  <div className=\"map-section\">\n                    <ReactMapGL\n                      {...viewport}\n                      mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_ACCESS_TOKEN}\n                      mapStyle=\"mapbox://styles/mapbox/outdoors-v12\"\n                      onViewportChange={viewport => {\n                        setViewport(viewport)\n                      }}\n                      center={viewport}\n                      onMove={evt => setViewport(evt.viewport)}                    \n                      className=\"profile-map\"\n                    >\n                      {supermarkets2 &&\n                    supermarkets2.map((item, index) => (\n                      <Marker\n                        key={index}\n                        id={item.id}\n                        longitude={item.longitude}\n                        latitude={item.latitude}\n                        onClick={() => handleSupermarketClick(item)}\n\n                      >\n                        <div className=\"poi-background\">{index + 1}</div>\n                      </Marker>\n                    )).slice(startIndex, endIndex)}\n                      {postcodeData &&\n                    <Marker \n                      id={postcodeData[0].id}\n                      longitude={postcodeData[0].latitude}\n                      latitude={postcodeData[0].longitude}\n                    >\n                      {/* <div className=\"poi-background\">99</div> */}\n                      <h1 className='property-icon'>🏠</h1>\n\n                    </Marker>}\n                      {selectedSupermarkets ? \n                        <Popup\n                          longitude={selectedSupermarkets.longitude}\n                          latitude={selectedSupermarkets.latitude}\n                          closeOnClick={false}\n                          className=\"item-popup\"\n                          onClose={() => setSelectedSupermarkts(null)} \n\n                        >\n                          <div className=\"popup-content\">\n\n                            <div className='popup-border'>\n                              <h5 className='title'>{selectedSupermarkets.supermarket_store_name}</h5>\n                              <p>{selectedSupermarkets.store_size}</p>\n                            </div>                      \n                          </div>\n                        </Popup>\n                        : ''\n                      }\n                    </ReactMapGL>\n                  </div>\n                </div>\n\n\n\n              </div>\n\n              : '' }\n          {supermarkets2 ? \n            <ReactPaginate\n              pageCount={Math.ceil(supermarkets2.length / 50)}\n              onPageChange={handlePageClick}\n              containerClassName={'pagination'}\n              activeClassName={'active'}\n              previousLabel={'<'}\n              nextLabel={'>'}\n              pageRangeDisplayed={0}\n              breakLabel={'...'}\n            />\n            : '' }\n\n        \n        </section>\n        : \n        <section className='loading-screen'>\n          <Loading />\n        </section>\n      }\n    </>\n  )\n}\n\nexport default SupermarketDetails\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken , getAccessToken } from '../../auth/Auth'\n\nimport PrimaryDetails from '../propertyDetails/componentDetails/PrimaryDetails'\nimport SecondaryDetails from '../propertyDetails/componentDetails/SecondaryDetails'\nimport RestaurantDetails from '../propertyDetails/componentDetails/RestaurantDetails'\nimport FitnessDetails from '../propertyDetails/componentDetails/FitnessDetails'\nimport SupermarketDetails from '../propertyDetails/componentDetails/SupermarketDetails'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport EVDetails from '../propertyDetails/componentDetails/EVDetails'\nimport PubDetails from '../propertyDetails/componentDetails/PubDetails'\n\n\n\n\nconst VariablesPage = () => {\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for property info\n  const [propertyData, setPropertyData] = useState()\n\n  // set state for company data\n  const [company, setCompany] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [ev, setEv] = useState()\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Variables')\n  const [profileDetail, setProfileDetail] = useState('Variables')  \n\n  // states for pop outs on the side\n  const [variableSide, setVariableSide] = useState(true)\n\n\n\n  // ? Section 2: load user data\n  // user data\n  const loadUserData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      try {\n        const getUser = async () => {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n          setCompany(data.company)\n        }\n        getUser()\n      } catch (error) {\n        setErrors(true)\n        console.log(error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        const sortedData = data.sort((a, b) => b.pupils_at_standard - a.pupils_at_standard)\n        setPrimaryData(sortedData)\n        console.log('all primaries ->', sortedData)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    loadPrimaryData()\n  }, [])\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        const sortedData = data.sort((a, b) => b.total_pass_rate - a.total_pass_rate)\n        setSecondaryData(sortedData)\n        console.log('all secondaries ->', sortedData)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadSecondaryData()\n  }, [])\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        const sortedData = data.sort((a, b) => b.rating - a.rating)\n        setRestaurants(sortedData)\n        console.log('all restaurants ->', sortedData)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n  \n  useEffect(() =>{\n    loadRestaurantData()\n  }, [])\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadFitnessData()\n  }, [])\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadSupermarketData()\n  }, [])\n\n\n  // ? Section 8: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        console.log('ev data ->', data)\n        setEv(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadEVdata()\n  }, [])\n\n\n  \n\n  // ? Section 8: Load and sort Pubs data\n  const loadPubs = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        console.log('pubs data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() =>{\n    loadPubs()\n  }, [])\n\n\n\n\n\n\n  return (\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar \n          setProfileDetail={setProfileDetail}\n          variableSide={variableSide} \n          setProfileContent={setProfileContent} \n          setVariableSide={setVariableSide}\n          userData={userData}\n        />    \n        {profileDetail === 'Variables' ?  \n          <section className='variables-section'>\n\n            <h1>Explore the different variables</h1>\n            <div className='variables-list'>\n              <div className='variable' onClick={() => setProfileDetail('Primary schools')}>\n                <h1>🏫</h1>\n                <h3>Primary schools</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Secondary schools')}>\n                <h1>👨‍🏫</h1>\n                <h3>Secondary schools</h3>\n              </div>\n              <div className='variable'>\n                <h1>🎓</h1>\n                <h3>6th form colleges</h3>\n              </div>\n              <div className='variable'>\n                <h1>🌳</h1>\n                <h3>Green space</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Restaurants')}>\n                <h1>🍽</h1>\n                <h3>Restaurants</h3>\n              </div>\n              <div className='variable'>\n                <h1>🚇</h1>\n                <h3>Tube stations</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('EVs')}>\n                <h1>⛽️</h1>\n                <h3>Electric vehicles</h3>\n              </div>\n              <div className='variable'onClick={() => setProfileDetail('Pubs')}>\n                <h1>🍻</h1>\n                <h3>Pubs</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Fitness')}>\n                <h1>🏋️‍♂️</h1>\n                <h3>Fitness</h3>\n              </div>\n              <div className='variable' onClick={() => setProfileDetail('Supermarkets')}>\n                <h1>🛒</h1>\n                <h3>Supermarkets</h3>\n              </div>\n            </div>\n\n          </section>\n          : profileDetail === 'Primary schools' ?\n            <section  className='variables-single-section'>\n              <PrimaryDetails\n                primaryData1={primaryData}\n                setPrimaryData1={setPrimaryData}\n                listType={'long list'}\n                setProfileDetail={setProfileDetail}\n              />\n\n            </section>\n\n            : profileDetail === 'Secondary schools' ?\n              <section  className='variables-single-section'>\n                <SecondaryDetails\n                  secondaryData1={secondaryData}\n                  setSecondaryData1={setSecondaryData}\n                  listType={'long list'}\n                />\n\n              </section>\n\n              : profileDetail === 'Restaurants' ?\n                <section  className='variables-single-section'>\n                  <RestaurantDetails\n                    restaurants1={restaurants}\n                    setRestaurants1={setRestaurants}\n                    listType={'long list'}\n                  />\n\n                </section>\n\n                : profileDetail === 'Fitness' ?\n                  <section  className='variables-single-section'>\n                    <FitnessDetails\n                      gyms1={gyms}\n                      setGyms1={setGyms}\n                      listType={'long list'}\n                    />\n\n                  </section>\n\n                  : profileDetail === 'Supermarkets' ?\n                    <section className='variables-single-section'>\n                      <SupermarketDetails\n                        supermarkets1={supermarkets}\n                        setSupermarkets1={setSupermarkets}\n                        listType={'long list'}\n                      />\n\n                    </section>\n\n                    : profileDetail === 'EVs' ?\n                      <section className='variables-single-section'>\n                        <EVDetails\n                          ev1={ev}\n                          setEv1={setEv}\n                          listType={'long list'}\n                        />\n\n                      </section>\n\n                      : profileDetail === 'Pubs' ?\n                        <section className='variables-single-section'>\n                          <PubDetails\n                            pubs1={pubs}\n                            setPubs1={setPubs}\n                            listType={'long list'}\n                          />\n\n                        </section>\n\n\n\n                        : ''}\n    \n\n      </section>\n    </>\n  )\n}\n\nexport default VariablesPage"],"names":["className","src","require","alt","textColour","pageType","id","style","color","setProfileContent","profileContent","profileDetail","setProfileDetail","navigate","useNavigate","isActive","setIsActive","useRef","useState","errors","setErrors","email","password","passwordConfirmation","loginPasswordType","setLoginPasswordType","registerPasswordType","setRegisterPasswordType","menuShow","setMenuShow","registerShow","setRegisterShow","registerData","setRegisterData","username","password_confirmation","first_name","last_name","registerError","setRegisterError","post","navColour","setNavColour","titleColour","setTitleColour","setTextColour","backgroundColor","onClick","textDecoration","textUnderlineOffset","navbarColour","isUserAuth","token","localStorage","removeItem","window","location","reload","variableSide","setVariableSide","userData","propertyData","ev1","listType","setEv1","postcodeData","evView","setEvView","ev2","setEv2","sortField","setSortField","sortDirection","setSortDirection","selectedEvs","setSelectedEvs","searchTerm","setSearchTerm","viewport","setViewport","latitude","longitude","zoom","showPopup","setShowPopup","iconId","setIconId","currentPage","setCurrentPage","startIndex","endIndex","iconSetting","e","console","log","parseInt","target","useEffect","prevViewport","handleSort","field","direction","sortedData","sort","a","b","isNaN","term","filter","item","toLowerCase","includes","fast_charging","name","type","value","onChange","placeholder","map","index","power","walkTimeMin","slice","onMouseEnter","mapboxApiAccessToken","process","mapStyle","onViewportChange","center","onMove","evt","handleEvClick","gym","closeOnClick","onClose","pageCount","Math","ceil","length","onPageChange","data","selected","containerClassName","activeClassName","previousLabel","nextLabel","pageRangeDisplayed","breakLabel","gyms1","setGyms1","fitnessView","setFitnessView","gyms2","setGyms2","selectedGyms","setSelectedGyms","gym_name","gym_group","class_type","long","Lat","handleGymClick","primaryData1","setPrimaryData1","primaryView","setPrimaryView","primaryData2","setPrimaryData2","selectedSchool","setSelectedSchool","school_name","local_authority","school_type","ofsted_results","toString","total_pass_rate","total_top_rate","within_catchment","max_distance","round","pupils_at_standard","pupils_exceeding_standard","turf","units","paint","geometry","coordinates","layout","pubs1","setPubs1","pubView","setPubView","pub2","setPub2","selectedPubs","setSelectedPubs","operator","handlePubClick","pub","restaurants1","setRestaurants1","restaurantView","setRestaurantView","selectedRestaurants","setSelectdRestaurant","restaurants2","setRestaurants2","restaurant_name","href","url","handleSchoolClick","restaurant","master_cuisine","secondaryData1","setSecondaryData1","secondaryData2","setSecondaryData2","secondaryView","setSecondaryView","supermarkets1","setSupermarkets1","supermarketsView","setSupermarketsView","supermarkets2","setSupermarkets2","selectedSupermarkets","setSelectedSupermarkts","cleansed_name","segment","size","supermarket_store_name","store_size","handleSupermarketClick","supermarket","setUserData","setPropertyData","company","setCompany","primaryData","setPrimaryData","secondaryData","setSecondaryData","restaurants","setRestaurants","gyms","setGyms","pubs","setPubs","supermarkets","setSupermarkets","tubes","setTubes","ev","setEv","async","axios","getUserToken","headers","Authorization","getAccessToken","getUser","error","loadUserData","getPrimaries","loadPrimaryData","getSecondaries","loadSecondaryData","rating","getData","loadRestaurantData","loadFitnessData","loadSupermarketData","loadEVdata","loadPubs"],"sourceRoot":""}