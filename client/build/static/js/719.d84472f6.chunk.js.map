{"version":3,"file":"static/js/719.d84472f6.chunk.js","mappings":"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","sources":["components/whiteLabel/propertyDetails/PropertyInsightsOverview.js","components/whiteLabel/propertyList.js/SavedListings.js","components/whiteLabel/propertyList.js/ListingGenerator.js"],"sourcesContent":["\nimport React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { NumericFormat } from 'react-number-format'\nimport PropertySummary from './componentHighlights/PropertySummary'\nimport SchoolHighlights from './componentHighlights/SchoolHighlights'\nimport LifestyleHighlights from './componentHighlights/LifestyleHighlights'\nimport TransportHighlights from './componentHighlights/TransportHighlights'\nimport NeighbourhoodHighlights from './componentHighlights/NeighbourhoodHighlights'\nimport PropertyDetailSlider from './helpers/PropertyDetailSlider'\nimport PrimaryDetails from './componentDetails/PrimaryDetails'\nimport SecondaryDetails from './componentDetails/SecondaryDetails'\nimport TubeDetails from './componentDetails/TubeDetails'\nimport RestaurantDetails from './componentDetails/RestaurantDetails'\nimport PubDetails from './componentDetails/PubDetails'\nimport SupermarketDetails from './componentDetails/SupermarketDetails'\nimport FitnessDetails from './componentDetails/FitnessDetails'\nimport EVDetails from './componentDetails/EVDetails'\n\n\n\n\nconst PropertyInsightsOverview = ({ addressSubstring, postcodeSubstring, listingFields, postcodeData, topPrimaries, topSecondaries,\n  restaurants1, cuisines, topRestaurants, gyms1, mainGyms, supermarkets1, mainSupermarkets, pubs1, topPubs, tubes1, trains1, setInsightView,\n  primaryData1, setPrimaryData1, secondaryData1, setSecondaryData1, setTubes1, setRestaurants1, setPubs1, setSupermarkets1, setGyms1,\n  ev1, setEv1, secondaryDetail, setSecondaryDetail, primaryDetail, setPrimaryDetail }) => {\n\n  const [propertyView, setPropertyView] = useState('Overview')\n\n\n\n  const [neighbourhoodScore, setNeighbourhoodScore] = useState()\n\n  const [schoolSection, setSchoolSection] = useState(false)\n  const [lifestyleSection, setLifestyleSection] = useState(false)\n  const [transportSection, setTransportSection] = useState(false)\n  const [neighbourhoodSection, setNeighbourhoodSection] = useState(false)\n\n  const [sliderSelection, setSliderSelection] = useState('Primary schools')\n\n  const [tableMapView, setTableMapView] = useState('Table')\n\n\n  // neighbourhood score calculation\n  const calculateScore = () => {\n    const calculation = Math.ceil((((1 - postcodeData[0].crime[0].percentile) +\n      postcodeData[0].ev.percentile +\n      postcodeData[0].fitness.percentile +\n      (1 - (postcodeData[0].parks_lsoa[0].london_percentile / 100)) +\n      postcodeData[0].restaurants.normal_percentile +\n      postcodeData[0].supermarkets.percentile +\n      postcodeData[0].tubes.percentile) / 7) * 100)\n    setNeighbourhoodScore(calculation)\n    // console.log('neighbourhood score ->', calculation)\n  }\n\n\n  // run calculation\n  useEffect(() => {\n    if (postcodeData) {\n      calculateScore()\n    }\n  })\n\n  // overview navigation\n  const goToOverview = () => {\n    setPropertyView('Overview')\n    setPrimaryDetail('Table')\n    setSecondaryDetail('Table')\n  }\n\n  return (\n    <>\n      <section className=\"insights-results-wrapper remove-margin\">\n        <section className=\"insights-navigation remove-some-margin\">\n          <div className=\"direction-arrow no-print\" onClick={() => setInsightView('Search')}></div>\n          <div className=\"navigation-input\">\n            <h3 className=\"title\">Postcode</h3>\n            <h3 className=\"result\">{postcodeSubstring}</h3>\n          </div>\n          <div className=\"navigation-input\">\n            <h3 className=\"title\">Address</h3>\n            <h3 className=\"result\">{addressSubstring}</h3>\n          </div>\n          <div className=\"navigation-input no-print\">\n            <h3 className=\"title\">Channel</h3>\n            <h3 className=\"result\">{listingFields.channel}</h3>\n          </div>\n        </section>\n\n        <section className=\"property-insights-wrapper\">\n          <div className=\"property-insight-nav no-print remove-margin\">\n            <div className=\"property-insight-buttons no-print remove-margin\">\n              <h3 className={`insight-button ${propertyView === 'Overview' ? 'active' : 'inactive'}`} id='left' onClick={() => goToOverview()}>Property overview</h3>\n              <h3 className={`insight-button ${propertyView === 'Details' ? 'active' : 'inactive'}`} id='right' onClick={() => setPropertyView('Details')}>Property details</h3>\n            </div>\n            <div className='print-section' onClick={() => window.print()}>\n              <div className=\"print-icon\"></div>\n              <h3 >Print</h3>\n\n            </div>\n          </div>\n          {propertyView === 'Overview' ?\n            <div className='insight-dropdowns'>\n              <div className='summary-header'>\n                <h3>Property Summary</h3>\n                <hr className='header-line' />\n              </div>\n              <PropertySummary\n                neighbourhoodScore={neighbourhoodScore}\n                postcodeData={postcodeData}\n              />\n              <div className='summary-header' onClick={() => setSchoolSection(!schoolSection)}>\n                <h3>School highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {schoolSection ?\n                <SchoolHighlights\n                  topPrimaries={topPrimaries}\n                  topSecondaries={topSecondaries}\n                  setPropertyView={setPropertyView}\n                  setSecondaryDetail={setSecondaryDetail}\n                  setPrimaryDetail={setPrimaryDetail}\n                  setSliderSelection={setSliderSelection}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setLifestyleSection(!lifestyleSection)}>\n                <h3>Lifestyle highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {lifestyleSection ?\n                <LifestyleHighlights\n                  restaurants1={restaurants1}\n                  cuisines={cuisines}\n                  topRestaurants={topRestaurants}\n                  gyms1={gyms1}\n                  mainGyms={mainGyms}\n                  supermarkets1={supermarkets1}\n                  mainSupermarkets={mainSupermarkets}\n                  pubs1={pubs1}\n                  topPubs={topPubs}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setTransportSection(!transportSection)}>\n                <h3>Transport highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {transportSection ?\n                <TransportHighlights\n                  postcodeData={postcodeData}\n                  tubes1={tubes1}\n                  trains1={trains1}\n                />\n                : ''\n              }\n              <div className='summary-header' onClick={() => setNeighbourhoodSection(!neighbourhoodSection)}>\n                <h3>Neighbourhoood highlights</h3>\n                <hr className='header-line' />\n              </div>\n              {neighbourhoodSection ?\n                <NeighbourhoodHighlights\n                  postcodeData={postcodeData}\n                />\n                : ''\n              }\n            </div>\n\n            : propertyView === 'Details' ?\n              <>\n\n                <div className='property-details-wrapper'>\n                  <PropertyDetailSlider\n                    sliderSelection={sliderSelection}\n                    setSliderSelection={setSliderSelection}\n                    setSecondaryDetail={setSecondaryDetail}\n                    setPrimaryDetail={setPrimaryDetail}\n                  />\n                  {secondaryDetail === 'School' ?\n                    <h3 className='go-back' onClick={() => setSecondaryDetail('Table')}>&lt;- Back to secondary school long list</h3>\n                    :\n                    primaryDetail === 'School' ?\n                      <h3 className='go-back' onClick={() => setPrimaryDetail('Table')}>&lt;- Back to primary school long list</h3>\n                      :\n                      <div className='detail-table-title'>\n                        <h3>{sliderSelection} list</h3>\n                        <hr className='table-title-line' />\n                        <input placeholder='Explore the data'></input>\n                        <div className={`icon-box ${tableMapView === 'Table' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Table')}>\n                          <div className='icon' id='table'></div>\n                        </div>\n                        <div className={`icon-box ${tableMapView === 'Map' ? 'active' : 'inactive'}`} onClick={() => setTableMapView('Map')}>\n                          <div className='icon' id='map'></div>\n                        </div>\n\n                      </div>\n                  }\n                  <div className='insight-tables'>\n                    {sliderSelection === 'Primary schools' ?\n                      <PrimaryDetails\n                        primaryData1={primaryData1}\n                        setPrimaryData1={setPrimaryData1}\n                        postcodeData={postcodeData}\n                        tableMapView={tableMapView}\n                        listType={'short list'}\n                        primaryDetail={primaryDetail}\n                        setPrimaryDetail={setPrimaryDetail}\n                        setSliderSelection={setSliderSelection}\n                        setPropertyView={setPropertyView}\n                      />\n\n                      : sliderSelection === 'Secondary schools' ?\n\n                        <SecondaryDetails\n                          secondaryData1={secondaryData1}\n                          setSecondaryData1={setSecondaryData1}\n                          postcodeData={postcodeData}\n                          tableMapView={tableMapView}\n                          listType={'short list'}\n                          secondaryDetail={secondaryDetail}\n                          setSecondaryDetail={setSecondaryDetail}\n                          setSliderSelection={setSliderSelection}\n                          setPropertyView={setPropertyView}\n                        />\n\n                        : sliderSelection === 'Tubes' ?\n                          <TubeDetails\n                            tubes1={tubes1}\n                            setTubes1={setTubes1}\n                            listType={'short list'}\n                            postcodeData={postcodeData}\n                            tableMapView={tableMapView}\n                          />\n\n                          : sliderSelection === 'Restaurants' ?\n                            <RestaurantDetails\n                              restaurants1={restaurants1}\n                              setRestaurants1={setRestaurants1}\n                              listType={'short list'}\n                              postcodeData={postcodeData}\n                              tableMapView={tableMapView}\n                            />\n\n                            : sliderSelection === 'Pubs' ?\n                              <PubDetails\n                                pubs1={pubs1}\n                                setPubs1={setPubs1}\n                                listType={'short list'}\n                                postcodeData={postcodeData}\n                                tableMapView={tableMapView}\n\n                              />\n\n                              : sliderSelection === 'Supermarkets' ?\n                                <SupermarketDetails\n                                  supermarkets1={supermarkets1}\n                                  setSupermarkets1={setSupermarkets1}\n                                  listType={'short list'}\n                                  postcodeData={postcodeData}\n                                  tableMapView={tableMapView}\n\n                                />\n\n                                : sliderSelection === 'Fitness' ?\n                                  <FitnessDetails\n                                    gyms1={gyms1}\n                                    setGyms1={setGyms1}\n                                    listType={'short list'}\n                                    postcodeData={postcodeData}\n                                    tableMapView={tableMapView}\n\n                                  />\n\n                                  : sliderSelection === 'EVs' ?\n                                    <EVDetails\n                                      ev1={ev1}\n                                      setEv1={setEv1}\n                                      listType={'short list'}\n                                      postcodeData={postcodeData}\n                                      tableMapView={tableMapView}\n\n                                    />\n                                    :\n                                    ''}\n                  </div>\n\n\n\n                </div>\n\n\n\n              </>\n\n              : ''}\n        </section>\n\n      </section>\n\n    </>\n\n  )\n}\n\n\nexport default PropertyInsightsOverview","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { isUserAuth, getUserToken, getAccessToken } from '../../auth/Auth'\n\n\n\n\n\nconst SavedListings = ({ userData, loadUserData, setListingSelection }) => {\n\n  // ? Section 1: Define states\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // state for handling locations\n  const location = useLocation()\n\n  // set state for determineing which favourites you see\n  const [favouriteTab, setFavouriteTab] = useState('Property prospects')\n\n\n\n  // ? Section 2: Functions to access\n  // function to delete favourites\n  const deleteListingFavourite = async (property) => {\n    if (isUserAuth()) {\n      try {\n        // Use the ID in the endpoint URL\n        const { data } = await axios.delete(`/api/listing_favourites/${property.id}/`, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        loadUserData()\n      } catch (error) {\n        console.error('Error deleting favourite:', error)\n      }\n    } else {\n      navigate('/access-denied')\n      console.log('logged out')\n    }\n  }\n\n\n  // function to move to the listings\n  const goToListing = (item) => {\n    console.log('postcode ->', item.postcode)\n    window.localStorage.setItem('listing-postcode', JSON.stringify(item.postcode))\n    window.localStorage.setItem('listing-route', JSON.stringify('On'))\n    setListingSelection('Property insights')\n    navigate('/agents/listing-generator')\n  }\n\n\n\n  return (\n    <>\n      <section className='saved-listings'>\n        {userData && userData.listing_favourites.length > 0 ?\n          <>\n            <div className='favourite-count'>\n              <h3>You have {userData ? userData.listing_favourites.length : ''} {userData && userData.listing_favourites.length === 1 ? 'listing' : 'listings'} saved</h3>\n\n            </div>\n\n            <div className='table-section'>\n              <div className='table-headers'>\n                <h5 id='column1' className='column'>#</h5>\n                <div id='column2' className='column'>\n                  <h5>Address</h5>\n                </div>\n                <div id='column3' className='column'>\n                  <h5>Postcode</h5>\n                </div>\n                <div id='column4' className='column'>\n                  <h5>Channel</h5>\n                </div>\n                <div id='column5' className='column'>\n                  <h5>Date saved</h5>\n                </div>\n                <div id='column6' className='column'>\n                  <h5>Action</h5>\n                </div>\n              </div>\n              <hr className='property-divider' />\n              <div className='table-details'>\n                {userData ? userData.listing_favourites\n                  .map((item, index) => {\n                    return (\n                      <>\n                        <div key={index}\n                          className='results-content'\n                        >\n                          <div className='column' id='column1'>\n                            <h5>{index + 1}</h5>\n                          </div>\n                          <div className='column' id='column2' onClick={() => goToListing(item)}>\n                            <h5>{item.address === '' ? 'N/a' : item.address}</h5>\n                          </div>\n                          <div className='column' id='column3'>\n                            <h5>{item.postcode === '' ? 'N/a' : item.postcode}</h5>\n                          </div>\n                          <div className='column' id='column4'>\n                            <h5>{item.channel}</h5>\n                          </div>\n                          <div className='column' id='column5'>\n                            <h5>{item.date_added}</h5>\n                          </div>\n                          <div className='column' id='column6' onClick={() => deleteListingFavourite(item)}>\n                            <h5 className='remove'>🗑</h5>\n                          </div>\n                        </div>\n                        <hr className='property-divider' />\n                      </>\n                    )\n                  })\n                  : ''}\n\n              </div>\n\n            </div>\n          </>\n          : favouriteTab === 'Listings' && userData && userData.listing_favourites.length === 0 ?\n            <>\n              <div className='favourite-count'>\n                <h3>😕 You don&apos;t have any properties saved here. Head to the listing generator tab to get started!</h3>\n              </div>\n            </>\n            : ''}\n      </section>\n    </>\n  )\n}\n\nexport default SavedListings","import React, { useState, useEffect, useRef } from 'react'\nimport axios from 'axios'\nimport { useParams, useNavigate, Link } from 'react-router-dom'\nimport { getUserToken, isUserAuth, getAccessToken } from '../../auth/Auth'\nimport { Modal } from 'react-bootstrap'\nimport { NumericFormat } from 'react-number-format'\nimport NavBar from '../../tools/NavBar'\nimport ProfileMobileSlider from '../../tools/ProfileMobileSlider'\nimport WhiteNavbar from '../../tools/WhiteNavbar'\nimport WhiteSidebar from '../WhiteSidebar'\nimport NavBarRevised from '../../tools/NavBarRevised'\nimport ReactSwitch from 'react-switch'\nimport AIListingGenrator from './AIListingGenrator'\nimport PropertyInsightsOverview from '../propertyDetails/PropertyInsightsOverview'\nimport SavedListings from './SavedListings'\nimport TopProperties from '../advancedSearch/TopProperties'\n\n\n\naxios.defaults.xsrfCookieName = 'csrftoken'\naxios.defaults.xsrfHeaderName = 'X-CSRFToken'\n\nconst ListingGenerator = () => {\n\n\n  // state to enable navigation between pages\n  const navigate = useNavigate()\n\n  // set state for errors\n  const [errors, setErrors] = useState()\n\n  // set state for user data\n  const [userData, setUserData] = useState()\n\n  // set state for loading\n  const [loading, setLoading] = useState()\n\n\n  // Create a reference to the div\n  const textDivRef = useRef(null)\n\n  // set state for completing a search\n  const [search, setSearch] = useState(false)\n\n  // state for determining what content shows\n  const [profileContent, setProfileContent] = useState('Listing generator')\n  const [profileDetail, setProfileDetail] = useState('Listing generator')\n\n  // state for changing the view to insights results\n  const [insightView, setInsightView] = useState('Search')\n\n  // lisrting options\n  const [listingSelection, setListingSelection] = useState('Property insights')\n\n  const [postcodeSubstring, setPostcodeSubstring] = useState('')\n\n  const [addressSubstring, setAddressSubstring] = useState('')\n\n  const [listingRoute, setListingRoute] = useState('Off')\n\n  // listing generator form\n  const [listingFields, setListingFields] = useState({\n    postcode: '',\n    address: '',\n    description: '',\n    channel: '',\n    bedrooms: '',\n    bathrooms: '',\n    property_type: '',\n    tenure: '',\n    size: '',\n    on_road_parking: '',\n    off_road_parking: '',\n    balcony: '',\n    primary_schools: 0,\n    secondary_schools: 0,\n    tubes: 0,\n    trains: 0,\n    restaurants: 0,\n    pubs: 0,\n    supermarkets: 0,\n    gyms: 0,\n    parks: 0,\n    evs: 0,\n    crime: 0,\n  })\n\n\n  // ai listing fields\n  const [aiFields, setAiFields] = useState({\n    'location': '',\n    'size': '',\n    'property_type': '',\n    'bedrooms': '',\n    'bathrooms': '',\n    'en_suites': '',\n    'amenities': [],\n    'channel': '',\n    'additional_info': '',\n    'price': '',\n    'restaurants': '',\n    'pubs': '',\n    'supermarkets': '',\n    'tube': '',\n    'trains': '',\n    'parks': '',\n    'evs': '',\n    'primary_schools': '',\n    'secondary_schools': '',\n    'gyms': '',\n  })\n\n  // features to include in checkbox: \n  const features = [\n    'balcony', 'on-road parking', 'off-road parking',\n    'private gated', 'private garage', 'shared garage',\n    'lift', 'open-plan', 'concierge', 'gym',\n    'pool & spa', 'penthouse', 'duplex', 'garden'\n  ]\n\n\n\n  // set state for user data\n  const [postcodeData, setPostcodes] = useState()\n\n  // set state for schools data\n  const [primaryData, setPrimaryData] = useState()\n  const [primaryData1, setPrimaryData1] = useState()\n  const [secondaryData, setSecondaryData] = useState()\n  const [secondaryData1, setSecondaryData1] = useState()\n\n  // additional scvhool states\n  const [topPrimaries, setTopPrimaries] = useState()\n  const [topSecondaries, setTopSecondaries] = useState()\n\n  // set states for lifestyle information\n  const [restaurants, setRestaurants] = useState()\n  const [gyms, setGyms] = useState()\n  const [pubs, setPubs] = useState()\n  const [supermarkets, setSupermarkets] = useState()\n  const [ev, setEv] = useState()\n\n  // set states for first calculations\n  const [restaurants1, setRestaurants1] = useState()\n  const [gyms1, setGyms1] = useState()\n  const [pubs1, setPubs1] = useState()\n  const [supermarkets1, setSupermarkets1] = useState()\n  const [ev1, setEv1] = useState()\n\n  // additional restaurant states\n  const [cuisines, setCuisines] = useState()\n  const [topRestaurants, setTopRestaurants] = useState([])\n  const [topPubs, setTopPubs] = useState([])\n\n  // additional gym states\n  const [mainGyms, setMainGyms] = useState([])\n\n  // additional supermarket states\n  const [mainSupermarkets, setMainSupermarkets] = useState([])\n\n  // set states for lifestyle information\n  const [tubes, setTubes] = useState()\n  const [trains, setTrains] = useState()\n\n  // set states for first calculations\n  const [tubes1, setTubes1] = useState()\n  const [trains1, setTrains1] = useState()\n\n  const [aiSearch, setAiSearch] = useState()\n\n  const [aiReady, setAiReady] = useState(false)\n\n  // start ai seearch\n  const [searchGo, setSearchGo] = useState(false)\n\n  const [secondaryDetail, setSecondaryDetail] = useState('Table')\n  const [primaryDetail, setPrimaryDetail] = useState('Table')\n\n\n\n  // ? Section 2: Load user information\n  const loadUserData = () => {\n    // Assuming the user is authorized, we want to load their profile information and set states based on relevant sections of this\n    if (isUserAuth()) {\n      const getUser = async () => {\n        try {\n          const { data } = await axios.get(`/api/auth/profile/${getUserToken()}/`, {\n            headers: {\n              Authorization: `Bearer ${getAccessToken()}`,\n            },\n          })\n          console.log('user data ->', data)\n          setUserData(data)\n        } catch (error) {\n          setErrors(true)\n          console.log(error)\n        }\n      }\n      getUser()\n    } else {\n      navigate('/access-denied')\n      console.log('no account')\n    }\n  }\n\n\n  // carry out calculation to load user data\n  useEffect(() => {\n    loadUserData()\n  }, [])\n\n\n\n  // ? Section 2: Load postcode and user data\n  const loadPostcodeData = async (listingType) => {\n    try {\n\n      // if its an ai load, then we need to set a state to organise the loading of the dataset\n      if (listingType === 'listing_ai_total') {\n        setAiReady(false) // Before loading the data for AI\n      }\n\n      // we need to access the postcode data in all eventualities\n      const { data } = await axios.post('/api/postcodes/', { postcode: postcodeSubstring })\n      console.log('postcode data ->', data)\n      setPostcodes(data)\n\n      increaseUsageCount(listingType) // Pass the listing type to the increaseUsageCount function\n\n      // if the postcode data arrives and its an ai search, we want to load the rest of the data\n      if (listingType === 'listing_ai_total') {\n        setSearchGo(true)\n      }\n\n      // if its just an insights load, wee want to add this to th db then navigate to the insights page\n      if (listingType === 'listing_insight_total') {\n        // const { data } = await axios.get(`/api/postcodes/${postcodeSubstring}`)\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Insights',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n        setResultsToLocalStorage()\n      }\n\n      // if its a normal listing build, then we want to run the code for that\n      if (listingType === 'listing_normal_total') {\n        const modifiedData = {\n          ...listingFields,\n          postcode: postcodeSubstring,\n          request_type: 'Listing',\n        }\n        const response = await axios.post('/api/listing_favourites/', modifiedData, {\n          headers: {\n            Authorization: `Bearer ${getAccessToken()}`,\n          },\n        })\n      }\n\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n\n  // define function for setting results to storage\n  const setResultsToLocalStorage = (token) => {\n    window.localStorage.setItem('listing-postcode', JSON.stringify(postcodeSubstring))\n  }\n\n\n\n  // ? Section 3: Load primaries data\n  const loadPrimaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getPrimaries = async () => {\n        const { data } = await axios.get('/api/primaries/')\n        // console.log('primaries data ->', data)\n        setPrimaryData(data)\n      }\n      getPrimaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPrimaryData()\n    }\n  }, [postcodeData])\n\n\n  // set distance\n  const walkDistanceKm20 = 5 * (20 / 60) // updated for 20 mins\n\n  const R = 6371 // Radius of the earth in km\n  const toRad = (value) => value * Math.PI / 180 // Convert degrees to radians\n  const kmPerMinute = 5 / 60 // average walking speed is 5 km per hour\n\n  // function for restaurants with least walking distance\n  const getNearbyPrimaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbyPrimaries = primaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const distancePercent = distanceKm / item.max_distance\n\n      // handle independent schools\n      if (item.school_type === 'Independent school') {\n        item.within_catchment = 'N/a'\n\n        // handle special schools\n      } else if (item.school_type === 'Special school') {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'On request') {\n        item.within_catchment = 'N/a'\n\n        // handle schools with a map catchment\n      } else if (item.additional_status === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools that have religioius requirement and have no distane measurement\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, even if religious critera met'\n\n        // handle schools that have not specified their catchment\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.4) {\n        item.within_catchment = 'Very likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 0.7) {\n        item.within_catchment = 'Likely but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between < 1) {\n        item.within_catchment = 'Probably but no distance specified'\n      } else if (item.max_distance === 'Not specified' & item.distance_between > 1) {\n        item.within_catchment = 'Unlikely, but no distance specified'\n\n        // handle schools that have not been incliuded in the catchment extract\n      } else if (item.max_distance === null & item.distance_between < 0.6) {\n        item.within_catchment = 'Very likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 0.8) {\n        item.within_catchment = 'Likely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1) {\n        item.within_catchment = 'Probably, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between < 1.5) {\n        item.within_catchment = 'Unlikely, but no distance data available'\n      } else if (item.max_distance === null & item.distance_between > 1.5) {\n        item.within_catchment = 'Very unlikely, but no distance data available'\n\n        // handle schools with actual distance measurements\n      } else if (distancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (distancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (distancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (distancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n\n        // handle schools that have no catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle any other schools\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm20\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbyPrimaries.slice(0, 8)\n\n\n    setTopPrimaries(firstSchoolNames)\n    setPrimaryData1(nearbyPrimaries)\n\n    console.log('nearby primaries ->', nearbyPrimaries)\n  }\n\n\n  // load data \n  useEffect(() => {\n    if (primaryData) {\n      getNearbyPrimaries()\n    }\n  }, [primaryData])\n\n\n\n\n  // ? Section 4: Load secondary school data  \n  const loadSecondaryData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getSecondaries = async () => {\n        const { data } = await axios.get('/api/secondaries/')\n        // console.log('secondaries data ->', data)\n        setSecondaryData(data)\n      }\n      getSecondaries()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSecondaryData()\n    }\n  }, [postcodeData])\n\n  // function for restaurants with least walking distance\n\n  const walkDistanceKm30 = 5 * (30 / 60) // updated for 20 mins\n\n  const getNearbySecondaries = () => {\n    // filter out restaurants firther than 20 mins walk away and add distanceKm and walkTimeMin to each item\n    const nearbySecondaries = secondaryData.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      // logic to determine whether school is in the catchment area\n      const maxDistancePercent = distanceKm / item.max_distance\n      const minDistancePercent = distanceKm / item.min_distance\n\n      // handle independent schools, special schools and examination requirements\n      if (item.school_type.includes('independent')) {\n        item.within_catchment = 'N/a'\n      } else if (item.school_type.includes('special')) {\n        item.within_catchment = 'N/a'\n      } else if (item.max_distance === 'Exam' || item.max_distance === 'Test score') {\n        item.within_catchment = 'Dependent on test results'\n      } else if (item.max_distance === 'Random') {\n        item.within_catchment = 'Random selection based on performance'\n      } else if (item.max_distance === 'Catchment score') {\n        item.within_catchment = 'School uses catchment score - check'\n\n        // handle schools with a map catchment\n      } else if (item.max_distance === 'Based on map') {\n        item.within_catchment = 'Check catchment map'\n\n        // handle schools with religious requirements and no specified distance\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.7) {\n        item.within_catchment = 'Very likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 0.9) {\n        item.within_catchment = 'Likely if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between < 1.5) {\n        item.within_catchment = 'Probably if religious critera met'\n      } else if (item.max_distance === 'Religion' & item.distance_between > 1.5) {\n        item.within_catchment = 'Unlikely, even if religious critera met'\n\n        // handle schools without a catchment\n      } else if (item.max_distance === 'Does not apply') {\n        item.within_catchment = 'Yes'\n\n        // handle schools with a lower and an upper catchment\n      } else if (item.min_distance !== null & minDistancePercent <= 1) {\n        item.within_catchment = 'Yes'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.5) {\n        item.within_catchment = 'Very likely'\n      } else if (item.min_distance !== null & maxDistancePercent <= 0.7) {\n        item.within_catchment = 'Probably'\n\n        // handle schools with only uppeer catchment\n      } else if (maxDistancePercent <= 0.6) {\n        item.within_catchment = 'Yes'\n      } else if (maxDistancePercent <= 0.8) {\n        item.within_catchment = 'Very likely'\n      } else if (maxDistancePercent <= 1.0) {\n        item.within_catchment = 'Probably'\n      } else if (maxDistancePercent <= 1.2) {\n        item.within_catchment = 'Probably not'\n      } else {\n        item.within_catchment = 'No'\n      }\n\n      return distanceKm <= walkDistanceKm30\n\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n    const firstSchoolNames = nearbySecondaries.slice(0, 8)\n\n\n    setTopSecondaries(firstSchoolNames)\n    setSecondaryData1(nearbySecondaries)\n\n    // console.log('nearby secondaries ->', nearbySecondaries)\n  }\n\n  // load data \n  useEffect(() => {\n    if (secondaryData) {\n      getNearbySecondaries()\n    }\n  }, [secondaryData])\n\n\n\n  // ? Section 5: Load and sort restaurant data\n  const loadRestaurantData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/restaurants/')\n        // console.log('restaurant data ->', data)\n        setRestaurants(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadRestaurantData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n  const walkDistanceKm15 = 5 * (15 / 60)\n\n  // function for restaurants with least walking distance\n  const getNearbyRestaurants = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyRestaurants = restaurants.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => b.rating - a.rating)\n\n    // count the number of cuisines in the area\n    const countUniqueCuisines = (restaurants) => {\n      const cuisines = new Set(restaurants.map(restaurant => restaurant.cuisine))\n      return cuisines.size\n    }\n\n    // extract the top 3 restaurants\n    const topThreeRestaurants = nearbyRestaurants\n      .filter(restaurant => restaurant.cuisine !== 'No Cuisine Data')\n      .slice(0, 3)\n      .map(restaurant => restaurant.restaurant_name)\n\n    setCuisines(countUniqueCuisines(nearbyRestaurants))\n    setRestaurants1(nearbyRestaurants)\n    setTopRestaurants(topThreeRestaurants)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    // console.log('Nearby restaurants ->', nearbyRestaurants)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n    if (listingFields.restaurants === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        restaurants: `${nearbyRestaurants.length} restaurants within 15 min walk, with more than ${cuisines} cuisines available`,\n      }))\n    }\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (restaurants) {\n      getNearbyRestaurants()\n    }\n  }, [restaurants])\n\n\n\n\n\n  // ? Section 6: Load and sort fitness data\n  const loadFitnessData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/gyms/')\n        // console.log('gyms data ->', data)\n        setGyms(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadFitnessData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbyStudios = () => {\n\n    const specificGyms = ['third space', 'pure gym', '1 rebel', 'virgin', 'barry\\'s', 'the gym group']\n    const uniqueGyms = new Set() // Used to store unique gym names\n\n\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyStudios = gyms.filter(item => {\n      const dLat = toRad(parseFloat(item.Lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.Lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n    // extract the key studios\n    const topThreeStudios = []\n\n    for (let i = 0; i < nearbyStudios.length; i++) {\n      const gym = nearbyStudios[i]\n      if (gym.gym_group && specificGyms.includes(gym.gym_group.toLowerCase()) && !uniqueGyms.has(gym.gym_group)) {\n        topThreeStudios.push(gym.gym_group)\n        uniqueGyms.add(gym.gym_group)\n\n        if (topThreeStudios.length === 3) {\n          break\n        }\n      }\n    }\n\n    setGyms1(nearbyStudios)\n    setMainGyms(topThreeStudios)\n    // console.log('Nearby gyms ->', nearbyStudios)\n    // console.log('Main gyms ->', topThreeStudios)\n    if (listingFields.gyms === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        gyms: `${nearbyStudios.length} gyms within 15 min walk, including ${topThreeStudios[0]} and  ${topThreeStudios[1]}`,\n      }))\n    }\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (gyms) {\n      getNearbyStudios()\n    }\n  }, [gyms])\n\n\n\n\n  // ? Section 7: Load and sort supermarket data\n  const loadSupermarketData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/supermarkets/')\n        // console.log('supermarkets data ->', data)\n        setSupermarkets(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadSupermarketData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n  // Average walking speed is 5km/h. Therefore, in 15 minutes, a person can walk approximately 1.25 km\n\n  // function for restaurants with least walking distance\n  const getNearbySupermatkets = () => {\n\n    const specificSupermarkets = ['m&s', 'waitrose', 'aldi', 'lidl', 'sainsburys', 'tesco', 'asda']\n    const uniqueSupermarkets = new Set() // Used to store unique gym names\n\n\n\n    // filter out restaurants firther than 15 mins walk away\n    const allSupermarkets = supermarkets.map(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return { ...item, distance: distanceKm }\n    })\n\n    const nearbySupermarkets = allSupermarkets\n      .filter(item => item.distance <= walkDistanceKm15)\n\n    // extract the key studios\n    const topThreeSupermarkets = []\n\n    for (let i = 0; i < nearbySupermarkets.length; i++) {\n      const supermarket = nearbySupermarkets[i]\n      if (specificSupermarkets.includes(supermarket.supermarket_brand.toLowerCase()) && !uniqueSupermarkets.has(supermarket.supermarket_brand)) {\n        topThreeSupermarkets.push(supermarket.supermarket_brand)\n        uniqueSupermarkets.add(supermarket.supermarket_brand)\n\n        if (topThreeSupermarkets.length === 3) {\n          break\n        }\n      }\n    }\n\n    setSupermarkets1(nearbySupermarkets)\n    setMainSupermarkets(topThreeSupermarkets)\n    // console.log('Nearby supermarkets ->', nearbySupermarkets)\n    if (listingFields.supermarkets === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        supermarkets: `${nearbySupermarkets.length} supermarkets within 15 min walk, including ${topThreeSupermarkets[0]} and ${topThreeSupermarkets[1]}`,\n      }))\n    }\n    // console.log('Main supermarktets ->', topThreeSupermarkets)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (supermarkets) {\n      getNearbySupermatkets()\n    }\n  }, [supermarkets])\n\n\n\n  // ? Section 8: Load and sort tubes data\n  const loadTubesData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/tubes/')\n        // console.log('tubes data ->', data)\n        setTubes(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTubesData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTubes = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTubes = tubes.filter(item => {\n      const dLat = toRad(parseFloat(item.lat) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.long) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.lat))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTubes1(nearbyTubes)\n    console.log('Nearby tubes ->', nearbyTubes)\n\n    if (listingFields.tubes === 1) {\n      setAiFields(prevState => ({\n        ...prevState,\n        tubes: `${nearbyTubes.length} within 15 min walk, including ${nearbyTubes[0].station_name} and ${nearbyTubes[1].station_name}`,\n      }))\n    }\n\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (tubes) {\n      getNearbyTubes()\n    }\n  }, [tubes])\n\n\n\n  // ? Section 9: Load and sort EV data\n  const loadEVdata = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/evs/')\n        // console.log('ev data ->', data)\n        setEv(data)\n        // Average walking speed is 5km/h. \n        const walkDistanceKm10 = 5 * (10 / 60)\n\n        // filter out restaurants firther than 15 mins walk away\n        const nearbyChargers = data.filter(item => {\n          const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n          const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n          const a =\n            Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n            Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n            Math.sin(dLon / 2) * Math.sin(dLon / 2)\n          const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n          const distanceKm = R * c\n\n          item.distance_between = distanceKm\n          item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n          return distanceKm <= walkDistanceKm10\n        }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n        setEv1(nearbyChargers)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadEVdata()\n    }\n  }, [postcodeData])\n\n\n\n\n  // ? Section 10: Load in pubs data\n  const loadPubsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/pubs/')\n        // console.log('pub data ->', data)\n        setPubs(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadPubsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates\n\n  // function for restaurants with least walking distance\n  const getNearbyPubs = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyPubs = pubs.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm15\n    }).sort((a, b) => a.walkTimeMin - b.walkTimeMin)\n\n\n    // extract the top 3 restaurants\n    const topThreePubs = nearbyPubs\n      .slice(0, 3)\n      .map(pub => pub.name)\n\n    setPubs1(nearbyPubs)\n    setTopPubs(topThreePubs)\n    // console.log('cuisines ->', countUniqueCuisines(nearbyRestaurants))\n    // console.log('Nearby pubs ->', nearbyPubs)\n    // console.log('Top restaurants ->', topThreeRestaurants)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (pubs) {\n      getNearbyPubs()\n    }\n  }, [pubs])\n\n\n\n  // ? Section 11: Load and sort tubes data\n  const loadTrainsData = () => {\n    // Assuming th user is authorised, we want to load their profile information and set states based on relevant sections of this\n    try {\n      const getData = async () => {\n        const { data } = await axios.get('/api/trains/')\n        // console.log('trains data ->', data)\n        setTrains(data)\n      }\n      getData()\n    } catch (error) {\n      setErrors(true)\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    if (postcodeData) {\n      loadTrainsData()\n    }\n  }, [postcodeData])\n\n  // calculatgion for adding distances to the data based on the input coordinates  \n  // function for restaurants with least walking distance\n  const getNearbyTrains = () => {\n\n    // filter out restaurants firther than 15 mins walk away\n    const nearbyTrains = trains.filter(item => {\n      const dLat = toRad(parseFloat(item.latitude) - parseFloat(postcodeData[0].longitude))\n      const dLon = toRad(parseFloat(item.longitude) - parseFloat(postcodeData[0].latitude))\n      const a =\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(toRad(parseFloat(postcodeData[0].longitude))) * Math.cos(toRad(parseFloat(item.latitude))) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2)\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a))\n      const distanceKm = R * c\n\n      item.distance_between = distanceKm\n      item.walkTimeMin = Math.round(distanceKm / kmPerMinute)\n\n      return distanceKm <= walkDistanceKm20\n    }).sort((b, a) => b.walkTimeMin - a.walkTimeMin)\n\n\n    setTrains1(nearbyTrains)\n    // console.log('Nearby trains ->', nearbyTrains)\n  }\n\n  // load data for nearest restaurants\n  useEffect(() => {\n    if (trains) {\n      getNearbyTrains()\n    }\n  }, [trains])\n\n\n\n  // calculation to determine the inputs on the form and the toggle\n  const toggleStatus = (key) => {\n    setListingFields(prevData => ({\n      ...prevData,\n      [key]: prevData[key] === 1 ? 0 : 1,\n    }))\n  }\n\n\n  // Copy function\n  const handleCopyText = () => {\n    const htmlContent = textDivRef.current.innerHTML\n    const el = document.createElement('div')\n    el.contentEditable = true\n    el.innerHTML = htmlContent\n    document.body.appendChild(el)\n    const range = document.createRange()\n    range.selectNodeContents(el)\n    const sel = window.getSelection()\n    sel.removeAllRanges()\n    sel.addRange(range)\n    el.focus()\n    document.execCommand('copy')\n    document.body.removeChild(el)\n  }\n\n\n\n  // Increase value in db based on successful response\n  const increaseUsageCount = async (listingType) => {\n    // console.log('trying to increase')\n    try {\n      const { data } = await axios.post('/api/usage/listing/', { column: listingType }, {\n        headers: {\n          Authorization: `Bearer ${getAccessToken()}`,\n        },\n      })\n      console.log(data)\n      if (data.status === 'success') {\n        // console.log('Usage count increased successfully')\n      } else {\n        // console.error('Failed to increase usage count:', data.message)\n      }\n    } catch (error) {\n      console.error('Error:', error)\n    }\n  }\n\n\n\n  const handleCheckboxChange = (feature) => {\n    setAiFields(prev => {\n      // Check if the feature is already in the amenities array\n      if (prev.amenities.includes(feature)) {\n        // If it is, remove it\n        return {\n          ...prev,\n          amenities: prev.amenities.filter(a => a !== feature),\n        }\n      } else {\n        // If it isn’t, add it\n        return {\n          ...prev,\n          amenities: [...prev.amenities, feature],\n        }\n      }\n    })\n  }\n\n\n  const handleInsightClick = () => {\n    loadPostcodeData('listing_insight_total')\n    setListingFields(prevState => ({ ...prevState, request_type: 'insights' }))\n    setInsightView('Results')\n  }\n\n  // remove login token from storage\n  const removeItemFromStorage = (token) => {\n    localStorage.removeItem('wittle-user-token')\n    localStorage.removeItem('wittle-username')\n    navigate('/login')\n  }\n\n\n  // check to see if the user has come from the favourites section\n  // useEffect(() => {\n  //   const listing = JSON.parse(localStorage.getItem('listing-route'))\n  //   setListingRoute(listing)\n  //   console.log(listing)\n  // }, [])\n\n\n  // useEffect(() => {\n  //   const listing = JSON.parse(localStorage.getItem('listing-route'))\n  //   console.log('listing route ->', listing)\n\n  const fetchData = async () => {\n    const listing = JSON.parse(localStorage.getItem('listing-route'))\n    console.log('listing route ->', listing)\n    if (listing === 'On') {\n      setInsightView('Results')\n      const postcodeRoute = JSON.parse(localStorage.getItem('listing-postcode'))\n      console.log('postcode-route', postcodeRoute)\n      try {\n        const { data } = await axios.post('/api/postcodes/', { postcode: postcodeRoute })\n        console.log('postcode data ->', data)\n        setPostcodes(data)\n        window.localStorage.setItem('listing-route', JSON.stringify('Off'))\n        setListingRoute('Off')\n      } catch (error) {\n        console.error('Error fetching postcodes:', error)\n      }\n    }\n  }\n  //   fetchData()\n  // }, [])\n\n\n  // load data to trigger data load if user comes from the favourites section\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     if (listingRoute === 'On') {\n  //       setInsightView('Results')\n  //       const postcodeRoute = JSON.parse(localStorage.getItem('listing-postcode'))\n  //       try {\n  //         const { data } = await axios.post('/api/postcodes/', { postcode: postcodeRoute })\n  //         console.log('postcode data ->', data)\n  //         setPostcodes(data)\n  //         window.localStorage.setItem('listing-route', JSON.stringify('Off'))\n  //         setListingRoute('Off')\n  //       } catch (error) {\n  //         console.error('Error fetching postcodes:', error)\n  //       }\n  //     }\n  //   }\n\n  //   fetchData()\n  // }, [listingRoute])\n\n\n\n\n  return (\n\n    <>\n      <section className='agent-profile-page'>\n        <div className='desktop-nav'>\n          <WhiteNavbar\n            navbarColour='#FDF7F0'\n          />\n        </div>\n        <div className='mobile-nav'>\n          <NavBarRevised\n            setProfileContent={setProfileContent}\n            profileContent={profileContent}\n            profileDetail={profileDetail}\n            setProfileDetail={setProfileDetail}\n          />\n        </div>\n        <WhiteSidebar\n          setProfileDetail={setProfileDetail}\n          setProfileContent={setProfileContent}\n          userData={userData}\n        />\n        {userData && userData.usage_stats[0].package === 'Trial expired' ?\n\n          <section className='main-body remove-margin' style={{ height: insightView === 'Results' ? 'auto' : 'none', marginTop: insightView === 'Results' ? '3%' : 'none' }}>\n            <section className='main-body-details'  >\n              <section className='listing-generator'>\n                <div className='listing-options'>\n                  <div className='listing-buttons'></div>\n                  <div className='logout-button' onClick={removeItemFromStorage}>\n                    <div className='logout-icon'></div>\n                  </div>\n                </div>\n                <div className='no-access-body'>\n                  <div className='no-access-image'></div>\n                  <h1 className='no-access-title'>Oops! Dead end</h1>\n                  <h3 className='no-access-message'>You no longer have access to this content. Get in touch to upgrade your account and access the Wittle magic.</h3>\n                </div>\n              </section>\n            </section>\n          </section>\n          :\n\n          <section className='main-body remove-margin' style={{ height: insightView === 'Results' ? 'auto' : 'none', marginTop: insightView === 'Results' ? '3%' : 'none' }}>\n            <section className='main-body-details'  >\n              <section className='listing-generator'>\n                {/* <h1>Wittle listing generator</h1> */}\n                {/* <h1>Insert your property details to build a listing or explore insights</h1> */}\n\n                <div className='listing-options'>\n                  <div className='listing-buttons'>\n                    <h5 className='no-print' onClick={() => setListingSelection('Property insights')} style={{ borderBottom: listingSelection === 'Property insights' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Property insights' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Property insights' ? '700' : '400' }}>Property insights</h5>\n                    <h5 className='no-print' onClick={() => setListingSelection('Listing generator')} style={{ borderBottom: listingSelection === 'Listing generator' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Listing generator' ? '700' : '400' }}>Listing generator</h5>\n                    <h5 className='no-print' onClick={() => setListingSelection('AI listing generator')} style={{ borderBottom: listingSelection === 'AI listing generator' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'AI listing generator' ? '0.5em' : 'initial', fontWeight: listingSelection === 'AI listing generator' ? '700' : '400' }}>AI listing generator</h5>\n                    <h5 className='no-print' onClick={() => setListingSelection('Saved searches')} style={{ borderBottom: listingSelection === 'Saved searches' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Saved searches' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Saved searches' ? '700' : '400' }}>Saved searches</h5>\n                    {userData && (userData.id === 1 || userData.id === 62 || userData.id === 55) ? <h5 className='no-print' onClick={() => setListingSelection('Top properties')} style={{ borderBottom: listingSelection === 'Top properties' ? '3px solid #ED6B86' : 'none', textUnderlineOffset: listingSelection === 'Top properties' ? '0.5em' : 'initial', fontWeight: listingSelection === 'Top properties' ? '700' : '400' }}>Top properties</h5> : ''}\n                  </div>\n                  <div className='logout-button' onClick={removeItemFromStorage}>\n                    <div className='logout-icon'></div>\n                  </div>\n\n\n                </div>\n                <hr className='title-line' />\n\n                {listingSelection === 'Property insights' && userData &&\n                  ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                    (userData.usage_stats[0].package === 'Unlimited') ||\n                    (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n                  <>\n                    {insightView === 'Search' ?\n                      <div className='basic-listing-wrapper'>\n\n                        <div className='property-insight-inputs'>\n                          <h3 className='insight-title'>Insert full postcode to extract details about property</h3>\n                          <div className='double-input-block'>\n                            <div className='input-block small'>\n                              <h3>Postcode</h3>\n                              <input\n                                type=\"text\"\n                                value={postcodeSubstring}\n                                onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                                placeholder=\"Enter postcode\"></input>\n                            </div>\n                            <div className='input-block medium'>\n                              <h3>Address</h3>\n                              <input\n                                type=\"text\"\n                                value={addressSubstring}\n                                onChange={e => {\n                                  const value = e.target.value\n                                  setAddressSubstring(value)\n                                  setListingFields(prevData => ({ ...prevData, address: value }))\n                                }}\n                                placeholder=\"Enter address\"></input>\n                            </div>\n                          </div>\n\n                          <div className='input-block large'>\n                            <h3>Channel</h3>\n\n                            <select className='listing-dropdown' onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                              <option>--- Select ---</option>\n                              <option>Sales</option>\n                              <option>Rental</option>\n                            </select>\n                          </div>\n                          <div className='search-section'>\n                            <button className='load-insights' onClick={handleInsightClick}>See insights</button>\n\n                          </div>\n                        </div>\n                      </div>\n                      : insightView === 'Results' ?\n                        <PropertyInsightsOverview\n                          postcodeSubstring={postcodeSubstring}\n                          addressSubstring={addressSubstring}\n                          listingFields={listingFields}\n                          postcodeData={postcodeData}\n                          topPrimaries={topPrimaries}\n                          topSecondaries={topSecondaries}\n                          restaurants1={restaurants1}\n                          cuisines={cuisines}\n                          topRestaurants={topRestaurants}\n                          setRestaurants1={setRestaurants1}\n                          gyms1={gyms1}\n                          setGyms1={setGyms1}\n                          mainGyms={mainGyms}\n                          supermarkets1={supermarkets1}\n                          setSupermarkets1={setSupermarkets1}\n                          mainSupermarkets={mainSupermarkets}\n                          pubs1={pubs1}\n                          topPubs={topPubs}\n                          tubes1={tubes1}\n                          setTubes1={setTubes1}\n                          trains1={trains1}\n                          insightView={insightView}\n                          setInsightView={setInsightView}\n                          primaryData1={primaryData1}\n                          setPrimaryData1={setPrimaryData1}\n                          secondaryData1={secondaryData1}\n                          setSecondaryData1={setSecondaryData1}\n                          ev1={ev1}\n                          setEv1={setEv1}\n                          secondaryDetail={secondaryDetail}\n                          setSecondaryDetail={setSecondaryDetail}\n                          primaryDetail={primaryDetail}\n                          setPrimaryDetail={setPrimaryDetail}\n                        />\n                        : ''}\n                  </>\n\n\n                  : listingSelection === 'Listing generator' && userData &&\n                    ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                      (userData.usage_stats[0].package === 'Unlimited') ||\n                      (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n                    <>\n                      <div className='full-listing-wrapper'>\n                        <div className='full-listing-inputs'>\n\n                          <div className='property-insight-inputs'>\n                            <h3 className='insight-title'>Input details and select features you want to include in your listing</h3>\n                            <div className='double-input-block'>\n                              <div className='input-block small'>\n                                <h3>Postcode</h3>\n                                <input\n                                  type=\"text\"\n                                  value={postcodeSubstring}\n                                  onChange={e => setPostcodeSubstring(e.target.value.toUpperCase().replace(/\\s+/g, ''))}\n                                  placeholder=\"Enter postcode...\"></input>\n                              </div>\n                              <div className='input-block medium'>\n                                <h3>Address</h3>\n                                <input\n                                  type=\"text\"\n                                  value={addressSubstring}\n                                  onChange={e => {\n                                    const value = e.target.value\n                                    setAddressSubstring(value)\n                                    setListingFields(prevData => ({ ...prevData, address: value }))\n                                  }}\n                                  placeholder=\"Enter address\"></input>\n                              </div>\n                            </div>\n                            <div className='single-input-block'>\n\n                              <div className='input-block large'>\n                                <h3>Channel</h3>\n\n                                <select className='listing-dropdown' onChange={e => setListingFields(prevState => ({ ...prevState, channel: e.target.value }))}>\n                                  <option>--- Select ---</option>\n                                  <option>Sales</option>\n                                  <option>Rental</option>\n                                </select>\n                              </div>\n                            </div>\n                            <div className='single-input-block'>\n\n                              <div className='input-block large'>\n                                <h3>Description</h3>\n                                <textarea id=\"description\" value={listingFields.description} rows=\"4\" placeholder='Enter description' onChange={e => setListingFields(prevState => ({ ...prevState, description: e.target.value }))}></textarea>\n                              </div>\n                            </div>\n                            <div className='lifestyle-input-block'>\n                              <h3 className='insight-title'>Lifestyle elements to include</h3>\n\n                              <div className='lifestyle-input-wrap'>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='primaries'></div>\n                                  <h3>Primary schools</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.primary_schools === 1}\n                                    onChange={() => toggleStatus('primary_schools')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='secondaries'></div>\n                                  <h3>Secondary schools</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.secondary_schools === 1}\n                                    onChange={() => toggleStatus('secondary_schools')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='tubes'></div>\n                                  <h3>Tubes</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.tubes === 1}\n                                    onChange={() => toggleStatus('tubes')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='trains'></div>\n                                  <h3>Trains</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.trains === 1}\n                                    onChange={() => toggleStatus('trains')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='evs'></div>\n                                  <h3>Electric vehicles</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.evs === 1}\n                                    onChange={() => toggleStatus('evs')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n\n\n                                  <div className='lifestyle-icon' id='restaurants'></div>\n                                  <h3>Restaurants</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.restaurants === 1}\n                                    onChange={() => toggleStatus('restaurants')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n\n                                  <div className='lifestyle-icon' id='pubs'></div>\n                                  <h3>Pubs</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.pubs === 1}\n                                    onChange={() => toggleStatus('pubs')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='parks'></div>\n                                  <h3>Parks</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.parks === 1}\n                                    onChange={() => toggleStatus('parks')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='gyms'></div>\n                                  <h3>Gyms</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.gyms === 1}\n                                    onChange={() => toggleStatus('gyms')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='supermarkets'></div>\n                                  <h3>Supermarkets</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.supermarkets === 1}\n                                    onChange={() => toggleStatus('supermarkets')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                                <div className='input-block-icons'>\n                                  <div className='lifestyle-icon' id='crime'></div>\n                                  <h3>Crime</h3>\n                                  <ReactSwitch\n                                    checked={listingFields.crime === 1}\n                                    onChange={() => toggleStatus('crime')}\n                                    onColor='#ED6B86'\n                                    offColor='#D5D5D5'\n\n                                    uncheckedIcon={null}\n                                    checkedIcon={null}\n                                  />\n                                </div>\n                              </div>\n\n                            </div>\n                            <div className='listing-search-section'>\n                              <button className='load-insights' onClick={() => loadPostcodeData('listing_normal_total')}>Load description</button>\n                            </div>\n                          </div>\n                        </div>\n                        <section className='full-listing-outputs'>\n                          <div className='results-header'>\n                            <div className='header-text'>\n                              <h3 className='results-title'>Your listing</h3>\n                            </div>\n                            <div className='header-cta'>\n                              <div className='copy-button' onClick={handleCopyText}>\n                                <div className='copy-icon'></div>\n                                <h3>Copy</h3>\n                              </div>\n                            </div>\n\n                          </div>\n\n                          {/* Results that you will see on the page */}\n                          <div className='results-section'>\n                            <div className='results-description'>\n                              {postcodeData && listingFields.description !== '' ? <h3>{listingFields.description}</h3> : ''}\n\n                            </div>\n                            {postcodeData ? <h3 className='results-sub-title'>What you should know about this area</h3> : ''}\n\n                            {restaurants1 && listingFields.restaurants === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='restaurants'></div>\n                                    <h3>Restaurants</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{restaurants1.length} restaurants within 15 mins walk</li>\n                                      <li>more than {cuisines} cuisines available</li>\n                                      <li>{topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</li>\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {pubs1 && listingFields.pubs === 1 ?\n\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='pubs'></div>\n                                    <h3>Pubs</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{pubs1.length} pubs within 15 mins walk</li>\n                                      <li>{topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</li>\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {primaryData1 && listingFields.primary_schools === 1 ?\n\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='primaries'></div>\n                                    <h3>Primary schools</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      {primaryData1.slice(0, 5).map((school, index) => (\n                                        <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                      ))}\n                                    </ul>\n\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n\n                            {secondaryData1 && listingFields.secondary_schools === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='secondaries'></div>\n                                    <h3>Secondary schools</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      {secondaryData1.slice(0, 5).map((school, index) => (\n                                        <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                      ))}\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {gyms1 && listingFields.gyms === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='gyms'></div>\n                                    <h3>Gyms</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{gyms1.length} gyms within 15 mins walk</li>\n                                      {mainGyms.length === 3 ? <li>includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</li> : mainGyms.length === 2 ? <li>includes {mainGyms[0]} & {mainGyms[1]} </li> : mainGyms.length === 1 ? <li>includes {mainGyms[0]}</li> : ''}\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {supermarkets1 && listingFields.supermarkets === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='supermarkets'></div>\n                                    <h3>Supermarkets</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>🛒 {supermarkets1.length} supermarkets within 15 mins walk</li>\n                                      {mainSupermarkets.length === 3 ? <li>🛒 includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</li> : mainSupermarkets.length === 2 ? <li>🛒 includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </li> : mainSupermarkets.length === 1 ? <li>🛒 includes {mainSupermarkets[0]}</li> : ''}\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {tubes1 && listingFields.tubes === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='tubes'></div>\n                                    <h3>Tubes</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{tubes1.length} stations within 20 mins walk</li>\n                                      {\n                                        tubes1.slice(0, 3).map((train, index) => (\n                                          <li key={index}>{train.station_name} - {train.line} - {train.walkTimeMin} mins walk</li>\n                                        ))\n                                      } </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {trains1 && listingFields.trains === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='trains'></div>\n                                    <h3>Trains</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{trains1.length} stations within 20 mins walk</li>\n                                      {\n                                        trains1.slice(0, 3).map((train, index) => (\n                                          <li key={index}>{train.station} - {train.walkTimeMin} mins walk</li>\n                                        ))\n                                      }\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {postcodeData && listingFields.parks === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='parks'></div>\n                                    <h3>Parks</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</li>\n                                      <li>{postcodeData[0].parks_postcode.park_name0} - {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</li>\n                                      <li>{postcodeData[0].parks_postcode.park_name1} - {Math.ceil((((postcodeData[0].parks_postcode.distance1) / 1000) / 5) * 60)} mins walk</li>\n                                      <li>{postcodeData[0].parks_postcode.park_name2} - {Math.ceil((((postcodeData[0].parks_postcode.distance2) / 1000) / 5) * 60)} mins walk</li>\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {ev1 && listingFields.evs === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='evs'></div>\n                                    <h3>Electric vehicle charging</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</li>\n                                      <li>in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</li>\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                          </div>\n\n\n                          {/* Results that you will get when you click export */}\n                          <div className='results-section-icons' ref={textDivRef}>\n                            <div className='results-description'>\n                              {postcodeData && listingFields.description !== '' ? <h3>{listingFields.description}</h3> : ''}\n\n                            </div>\n                            {postcodeData ? <h3 className='results-sub-title'>What you should know about this area</h3> : ''}\n\n                            {restaurants1 && listingFields.restaurants === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='restaurants'></div>\n                                    <h3>🥘 Restaurants</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      {/* <li>{restaurants1.length} restaurants within 15 mins walk</li> */}\n                                      <li>more than {cuisines} cuisines available</li>\n                                      <li>{topRestaurants[0]}, {topRestaurants[1]} & {topRestaurants[2]} are well rated</li>\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {pubs1 && listingFields.pubs === 1 ?\n\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='pubs'></div>\n                                    <h3>🍺 Pubs</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{pubs1.length} pubs within 15 mins walk</li>\n                                      <li>{topPubs[0]}, {topPubs[1]} & {topPubs[2]} are well rated</li>\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {primaryData1 && listingFields.primary_schools === 1 ?\n\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='primaries'></div>\n                                    <h3>👶 Primary schools</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      {primaryData1.slice(0, 5).map((school, index) => (\n                                        <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                      ))}\n                                    </ul>\n\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n\n                            {secondaryData1 && listingFields.secondary_schools === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='secondaries'></div>\n                                    <h3>🎓 Secondary schools</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      {secondaryData1.slice(0, 5).map((school, index) => (\n                                        <li key={index}>{school.school_name} - {school.ofsted_results} ofsted - {school.walkTimeMin} mins walk</li>\n                                      ))}\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {gyms1 && listingFields.gyms === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='gyms'></div>\n                                    <h3>🏋️‍♂️ Gyms</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{gyms1.length} gyms within 15 mins walk</li>\n                                      {mainGyms.length === 3 ? <li>includes {mainGyms[0]}, {mainGyms[1]} & {mainGyms[2]}</li> : mainGyms.length === 2 ? <li>includes {mainGyms[0]} & {mainGyms[1]} </li> : mainGyms.length === 1 ? <li>includes {mainGyms[0]}</li> : ''}\n                                    </ul>\n                                  </>\n                                </div><hr className='results-divider' />\n                              </>\n                              : ''}\n                            {supermarkets1 && listingFields.supermarkets === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='supermarkets'></div>\n                                    <h3>🛒 Supermarkets</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{supermarkets1.length} supermarkets within 15 mins walk</li>\n                                      {mainSupermarkets.length === 3 ? <li>includes {mainSupermarkets[0]}, {mainSupermarkets[1]} & {mainSupermarkets[2]}</li> : mainSupermarkets.length === 2 ? <li>Includes {mainSupermarkets[0]} & {mainSupermarkets[1]} </li> : mainSupermarkets.length === 1 ? <li>Iincludes {mainSupermarkets[0]}</li> : ''}\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {tubes1 && listingFields.tubes === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='tubes'></div>\n                                    <h3>🚇 Tubes</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{tubes1.length} stations within 20 mins walk</li>\n                                      {\n                                        tubes1.slice(0, 3).map((train, index) => (\n                                          <li key={index}>{train.station_name} - {train.line} - {train.walkTimeMin} mins walk</li>\n                                        ))\n                                      } </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {trains1 && listingFields.trains === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='trains'></div>\n                                    <h3>🚈 Trains</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{trains1.length} stations within 20 mins walk</li>\n                                      {\n                                        trains1.slice(0, 3).map((train, index) => (\n                                          <li key={index}>{train.station} - {train.walkTimeMin} mins walk</li>\n                                        ))\n                                      }\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {postcodeData && listingFields.parks === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='parks'></div>\n                                    <h3>🌳 Parks</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>within top {100 - postcodeData[0].parks_lsoa[0].london_percentile}% of areas in london for access to greenspace</li>\n                                      <li>{postcodeData[0].parks_postcode.park_name0} - {Math.ceil((((postcodeData[0].parks_postcode.distance0) / 1000) / 5) * 60)} mins walk</li>\n                                      <li>{postcodeData[0].parks_postcode.park_name1} - {Math.ceil((((postcodeData[0].parks_postcode.distance1) / 1000) / 5) * 60)} mins walk</li>\n                                      <li>{postcodeData[0].parks_postcode.park_name2} - {Math.ceil((((postcodeData[0].parks_postcode.distance2) / 1000) / 5) * 60)} mins walk</li>\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                            {ev1 && listingFields.evs === 1 ?\n                              <>\n                                <div className='results-block'>\n                                  <div className='result-block-header'>\n                                    <div className='lifestyle-icon' id='evs'></div>\n                                    <h3>⛽️ Electric vehicle charging</h3>\n                                  </div>\n                                  <>\n                                    <ul className='results-details'>\n                                      <li>{postcodeData[0].ev.ev_10_mins} charging points within 10 mins walk</li>\n                                      <li>in the top {Math.round((1 - postcodeData[0].ev.percentile) * 100)}% of areas in London for ev charging access</li>\n                                    </ul>\n                                  </>\n                                </div>\n                                <hr className='results-divider' />\n                              </>\n                              : ''}\n                          </div>\n                        </section>\n                      </div>\n                    </>\n\n                    : listingSelection === 'AI listing generator' && userData &&\n                      ((userData.usage_stats[0].package === 'Basic' && userData.usage_stats[0].listing_monthly_count < 11) ||\n                        (userData.usage_stats[0].package === 'Unlimited') ||\n                        (userData.usage_stats[0].package === 'Advanced Pilot' && userData.usage_stats[0].listing_monthly_count < 101)) ?\n\n                      <>\n                        <AIListingGenrator />\n                      </>\n\n\n                      : listingSelection === 'Saved searches' && userData && userData.listing_favourites.length > 0 ?\n\n                        <SavedListings\n                          userData={userData}\n                          loadUserData={loadUserData}\n                          setListingSelection={setListingSelection}\n                        />\n\n\n                        : listingSelection === 'Top properties' && userData ?\n\n                          <TopProperties\n                            userData={userData}\n                            loadUserData={loadUserData}\n                            setListingSelection={setListingSelection}\n                            fetchData={fetchData}\n                          />\n                          : ''}\n\n\n              </section>\n            </section>\n          </section>\n        }\n\n\n      </section>\n\n\n\n    </>\n  )\n}\n\nexport default ListingGenerator\n\n\n\n"],"names":["_ref","addressSubstring","postcodeSubstring","listingFields","postcodeData","topPrimaries","topSecondaries","restaurants1","cuisines","topRestaurants","gyms1","mainGyms","supermarkets1","mainSupermarkets","pubs1","topPubs","tubes1","trains1","setInsightView","primaryData1","setPrimaryData1","secondaryData1","setSecondaryData1","setTubes1","setRestaurants1","setPubs1","setSupermarkets1","setGyms1","ev1","setEv1","secondaryDetail","setSecondaryDetail","primaryDetail","setPrimaryDetail","propertyView","setPropertyView","useState","neighbourhoodScore","setNeighbourhoodScore","schoolSection","setSchoolSection","lifestyleSection","setLifestyleSection","transportSection","setTransportSection","neighbourhoodSection","setNeighbourhoodSection","sliderSelection","setSliderSelection","tableMapView","setTableMapView","useEffect","calculateScore","calculation","Math","ceil","crime","percentile","ev","fitness","parks_lsoa","london_percentile","restaurants","normal_percentile","supermarkets","tubes","_jsx","_Fragment","children","_jsxs","className","onClick","channel","id","window","print","PropertySummary","SchoolHighlights","LifestyleHighlights","TransportHighlights","NeighbourhoodHighlights","PropertyDetailSlider","placeholder","PrimaryDetails","listType","SecondaryDetails","TubeDetails","RestaurantDetails","PubDetails","SupermarketDetails","FitnessDetails","EVDetails","userData","loadUserData","setListingSelection","navigate","useNavigate","favouriteTab","setFavouriteTab","useLocation","listing_favourites","length","map","item","index","console","log","postcode","localStorage","setItem","JSON","stringify","goToListing","address","date_added","async","isUserAuth","data","axios","delete","property","headers","Authorization","getAccessToken","error","deleteListingFavourite","defaults","xsrfCookieName","xsrfHeaderName","ListingGenerator","errors","setErrors","setUserData","loading","setLoading","textDivRef","useRef","search","setSearch","profileContent","setProfileContent","profileDetail","setProfileDetail","insightView","listingSelection","setPostcodeSubstring","setAddressSubstring","listingRoute","setListingRoute","setListingFields","description","bedrooms","bathrooms","property_type","tenure","size","on_road_parking","off_road_parking","balcony","primary_schools","secondary_schools","trains","pubs","gyms","parks","evs","aiFields","setAiFields","setPostcodes","primaryData","setPrimaryData","secondaryData","setSecondaryData","setTopPrimaries","setTopSecondaries","setRestaurants","setGyms","setPubs","setSupermarkets","setEv","setCuisines","setTopRestaurants","setTopPubs","setMainGyms","setMainSupermarkets","setTubes","setTrains","setTrains1","aiSearch","setAiSearch","aiReady","setAiReady","searchGo","setSearchGo","get","getUserToken","getUser","loadPostcodeData","listingType","post","increaseUsageCount","modifiedData","request_type","setResultsToLocalStorage","token","loadPrimaryData","getPrimaries","walkDistanceKm20","R","toRad","value","PI","kmPerMinute","getNearbyPrimaries","nearbyPrimaries","filter","dLat","parseFloat","latitude","longitude","dLon","a","sin","cos","c","atan2","sqrt","distanceKm","distance_between","walkTimeMin","round","distancePercent","max_distance","school_type","within_catchment","additional_status","sort","b","firstSchoolNames","slice","loadSecondaryData","getSecondaries","getNearbySecondaries","nearbySecondaries","maxDistancePercent","minDistancePercent","min_distance","includes","loadRestaurantData","getData","walkDistanceKm15","getNearbyRestaurants","nearbyRestaurants","rating","topThreeRestaurants","restaurant","cuisine","restaurant_name","Set","countUniqueCuisines","prevState","loadFitnessData","getNearbyStudios","specificGyms","uniqueGyms","nearbyStudios","Lat","long","topThreeStudios","i","gym","gym_group","toLowerCase","has","push","add","loadSupermarketData","getNearbySupermatkets","specificSupermarkets","uniqueSupermarkets","nearbySupermarkets","distance","topThreeSupermarkets","supermarket","supermarket_brand","loadTubesData","getNearbyTubes","nearbyTubes","lat","station_name","loadEVdata","nearbyChargers","loadPubsData","getNearbyPubs","nearbyPubs","topThreePubs","pub","name","loadTrainsData","getNearbyTrains","nearbyTrains","toggleStatus","key","prevData","column","status","removeItemFromStorage","removeItem","WhiteNavbar","navbarColour","NavBarRevised","WhiteSidebar","usage_stats","package","style","height","marginTop","borderBottom","textUnderlineOffset","fontWeight","listing_monthly_count","type","onChange","e","target","toUpperCase","replace","handleInsightClick","PropertyInsightsOverview","rows","ReactSwitch","checked","onColor","offColor","uncheckedIcon","checkedIcon","handleCopyText","htmlContent","current","innerHTML","el","document","createElement","contentEditable","body","appendChild","range","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","focus","execCommand","removeChild","school","school_name","ofsted_results","train","line","station","parks_postcode","park_name0","distance0","park_name1","distance1","park_name2","distance2","ev_10_mins","ref","AIListingGenrator","SavedListings","TopProperties","fetchData","listing","parse","getItem","postcodeRoute"],"sourceRoot":""}