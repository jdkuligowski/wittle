"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import environ
import os

env = environ.Env()

environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# print('Base ->', BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = [env('ALLOWED_HOSTS')]
# ALLOWED_HOSTS = ['127.0.0.1']
# ALLOWED_HOSTS='wittle-test.azurewebsites.net'

# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'webpack_loader',
    'rest_framework',
    'jwt_auth',
    'properties',
    'favourites_properties',
    'property_primaries',
    'property_secondaries',
    'property_colleges',
    'property_gyms',
    'property_parks',
    'property_tubes',
    'property_trains',
    'property_cafes',
    'property_supermarkets',
    'property_bars',
    'property_restaurants',
    'property_takeaways',
    'property_search_details',
    'property_search_scores',
    'areas',
    'area_primaries',
    'tubes',
    'trains',
    'percentiles',
    'postcode_locations',
    'living_details', 
    'living_restaurants',
    'living_gyms',
]

MIDDLEWARE = [

    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]


STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [os.path.join(BASE_DIR, 'client')
        #          ]
        # ,
        'DIRS': [BASE_DIR.as_posix() + '/client'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# print('templates ->', TEMPLATES)

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        # this specifies postgres as the db to use
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        # Â name of db, needs to be created manually `createdb wittle-db`
        'NAME': env('DBNAME'),
        'HOST': env('DBHOST'),
        # 'HOST': 'wittle-test-azure.postgres.database.azure.com',
        'PORT': 5432,  # this is the port our postgres server is running on
        'USER': env('DBUSER'),
        'PASSWORD': env('DBPASS')
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


STATIC_URL = '/static/'

STATICFILES_DIRS = (
    # os.path.join(BASE_DIR, "client", "build", "static"),
    BASE_DIR.as_posix() + '/client' + '/build' + '/static',
    # os.path.join(BASE_DIR, 'client'),
)

# print('static-files ->', STATICFILES_DIRS)

STATIC_ROOT = (
    # os.path.join(BASE_DIR, "static")
    BASE_DIR.as_posix() + '/static'
)

# print('static-root ->', STATIC_ROOT)

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# This is pointing Django to our own custom user model, instead of Django's default
AUTH_USER_MODEL = 'jwt_auth.User'

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'jwt_auth.authentication.JWTAuthentication',
    ),
}


WEBPACK_LOADER = {
    'DEFAULT': {
        'CACHE': not DEBUG,
        # 'STATS_FILE': os.path.join(BASE_DIR, 'webpack-stats.json'),
        'STATS_FILE': BASE_DIR.as_posix() + 'webpack-stats.json',
        'POLL_INTERVAL': 0.1,
        'IGNORE': [r'.+\.hot-update.js', r'.+\.map'],
    }
}

DATE_INPUT_FORMATS = ['%Y-%m-%d']

USE_LI0N = False


# django==3.2,<4.0
# django==4.1.5
# djangorestframework
# pyjwt
# # jwt
# psycopg2-binary
# environ
# django-environ
# pathlib
# whitenoise
# django-webpack-loader